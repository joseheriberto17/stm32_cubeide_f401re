
proyecto_tutorial_nucleo_f401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f78  08004f78  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f80  08004f80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000088  08005010  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005010  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1c7  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d61  00000000  00000000  0002d2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bd  00000000  00000000  0002fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001675f  00000000  00000000  0003064d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dde6  00000000  00000000  00046dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d650  00000000  00000000  00054b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039f0  00000000  00000000  000e21e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e5bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d28 	.word	0x08004d28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004d28 	.word	0x08004d28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fdef 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f8bf 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f9c3 	bl	8000924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f997 	bl	80008d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005a2:	f000 f925 	bl	80007f0 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // timer 2 para la secuencia de led
  HAL_TIM_Base_Start_IT(&htim2);
 80005a6:	484c      	ldr	r0, [pc, #304]	; (80006d8 <main+0x14c>)
 80005a8:	f001 feb2 	bl	8002310 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	484a      	ldr	r0, [pc, #296]	; (80006d8 <main+0x14c>)
 80005b0:	f001 ff6a 	bl	8002488 <HAL_TIM_IC_Start>

  // uart 2 para la comunicacion
  print_msg(&huart2);
 80005b4:	4849      	ldr	r0, [pc, #292]	; (80006dc <main+0x150>)
 80005b6:	f000 fb21 	bl	8000bfc <print_msg>
  //data = 20 SOLO LEE el numero e bites de todo el arrego;
  data = sizeof(tramos);
 80005ba:	4b49      	ldr	r3, [pc, #292]	; (80006e0 <main+0x154>)
 80005bc:	2214      	movs	r2, #20
 80005be:	601a      	str	r2, [r3, #0]

  char msg_2[30];

  while (1) {
	  //el Flag_Rx esta pndiente de un comando
	  opt=readUserInput();
 80005c0:	f000 fb50 	bl	8000c64 <readUserInput>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b46      	ldr	r3, [pc, #280]	; (80006e4 <main+0x158>)
 80005ca:	701a      	strb	r2, [r3, #0]

	  if (opt > 0) {
 80005cc:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <main+0x158>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <main+0x60>
		  // este proceso funciona con el uart normal
		  processUserInput(opt);
 80005d4:	4b43      	ldr	r3, [pc, #268]	; (80006e4 <main+0x158>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fb79 	bl	8000cd0 <processUserInput>
		  if (opt ==4) {
 80005de:	4b41      	ldr	r3, [pc, #260]	; (80006e4 <main+0x158>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d102      	bne.n	80005ec <main+0x60>
			  //reimprime la consola
			  print_msg(&huart2);
 80005e6:	483d      	ldr	r0, [pc, #244]	; (80006dc <main+0x150>)
 80005e8:	f000 fb08 	bl	8000bfc <print_msg>
		  }
	  }


	  if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1)) {
 80005ec:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <main+0x14c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d12c      	bne.n	8000654 <main+0xc8>

		  Flag_IC=toogle_data(Flag_IC);
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <main+0x15c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb52 	bl	8000ca8 <toogle_data>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <main+0x15c>)
 800060a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,Flag_IC);
 800060c:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <main+0x15c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	2120      	movs	r1, #32
 8000614:	4835      	ldr	r0, [pc, #212]	; (80006ec <main+0x160>)
 8000616:	f001 f947 	bl	80018a8 <HAL_GPIO_WritePin>

		  sprintf(msg_2, "\r\n LED : %s", Flag_IC == 1 ? "ON" : "OFF");
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <main+0x15c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d101      	bne.n	8000626 <main+0x9a>
 8000622:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <main+0x164>)
 8000624:	e000      	b.n	8000628 <main+0x9c>
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <main+0x168>)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4933      	ldr	r1, [pc, #204]	; (80006f8 <main+0x16c>)
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fed7 	bl	80043e0 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, strlen(msg_2), 300);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fdd3 	bl	80001e0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	1d39      	adds	r1, r7, #4
 8000640:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000644:	4825      	ldr	r0, [pc, #148]	; (80006dc <main+0x150>)
 8000646:	f002 fdae 	bl	80031a6 <HAL_UART_Transmit>

		  __HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_CC1);
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <main+0x14c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f06f 0202 	mvn.w	r2, #2
 8000652:	611a      	str	r2, [r3, #16]
	  }

	  if (counter_add == 1){
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <main+0x170>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d1b1      	bne.n	80005c0 <main+0x34>
		  counter_add = 0;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <main+0x170>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
		  if (counter_led == 3) {
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <main+0x174>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d102      	bne.n	8000670 <main+0xe4>
			  counter_led = 0;
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <main+0x174>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
		  }
		  for (int i = 0; i < 3; ++i) {
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	e026      	b.n	80006c4 <main+0x138>
			  if (stop == 0) {
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <main+0x178>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d11f      	bne.n	80006be <main+0x132>
				  HAL_GPIO_WritePin(gpio_ports[i],gpio_pins[i],M_LED[counter_led][2*push_dir*(1-i)+i]);
 800067e:	4a22      	ldr	r2, [pc, #136]	; (8000708 <main+0x17c>)
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <main+0x180>)
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <main+0x174>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461d      	mov	r5, r3
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <main+0x184>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	f1c3 0301 	rsb	r3, r3, #1
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	005a      	lsls	r2, r3, #1
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	441a      	add	r2, r3
 80006aa:	4c1a      	ldr	r4, [pc, #104]	; (8000714 <main+0x188>)
 80006ac:	462b      	mov	r3, r5
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	442b      	add	r3, r5
 80006b2:	4423      	add	r3, r4
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	f001 f8f5 	bl	80018a8 <HAL_GPIO_WritePin>
		  for (int i = 0; i < 3; ++i) {
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	3301      	adds	r3, #1
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	ddd5      	ble.n	8000676 <main+0xea>
			  }
		  }
		  counter_led++;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <main+0x174>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <main+0x174>)
 80006d4:	701a      	strb	r2, [r3, #0]
	  opt=readUserInput();
 80006d6:	e773      	b.n	80005c0 <main+0x34>
 80006d8:	200000a4 	.word	0x200000a4
 80006dc:	200000ec 	.word	0x200000ec
 80006e0:	2000013c 	.word	0x2000013c
 80006e4:	20000135 	.word	0x20000135
 80006e8:	20000134 	.word	0x20000134
 80006ec:	40020000 	.word	0x40020000
 80006f0:	08004dac 	.word	0x08004dac
 80006f4:	08004db0 	.word	0x08004db0
 80006f8:	08004db4 	.word	0x08004db4
 80006fc:	20000130 	.word	0x20000130
 8000700:	20000131 	.word	0x20000131
 8000704:	20000133 	.word	0x20000133
 8000708:	20000000 	.word	0x20000000
 800070c:	2000000c 	.word	0x2000000c
 8000710:	20000132 	.word	0x20000132
 8000714:	08004e20 	.word	0x08004e20

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fe7a 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <SystemClock_Config+0xd0>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xd4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd4>)
 8000766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800078c:	2310      	movs	r3, #16
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000790:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000796:	2304      	movs	r3, #4
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079a:	2307      	movs	r3, #7
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f8cc 	bl	8001940 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ae:	f000 fb4f 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fb2e 	bl	8001e30 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007da:	f000 fb39 	bl	8000e50 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_TIM2_Init+0xdc>)
 800081c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000820:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_TIM2_Init+0xdc>)
 8000824:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_TIM2_Init+0xdc>)
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_TIM2_Init+0xdc>)
 8000832:	f242 720f 	movw	r2, #9999	; 0x270f
 8000836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_TIM2_Init+0xdc>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_TIM2_Init+0xdc>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000844:	4821      	ldr	r0, [pc, #132]	; (80008cc <MX_TIM2_Init+0xdc>)
 8000846:	f001 fd13 	bl	8002270 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000850:	f000 fafe 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	4619      	mov	r1, r3
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_TIM2_Init+0xdc>)
 8000862:	f002 f883 	bl	800296c <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800086c:	f000 faf0 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000870:	4816      	ldr	r0, [pc, #88]	; (80008cc <MX_TIM2_Init+0xdc>)
 8000872:	f001 fdaf 	bl	80023d4 <HAL_TIM_IC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800087c:	f000 fae8 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	480f      	ldr	r0, [pc, #60]	; (80008cc <MX_TIM2_Init+0xdc>)
 8000890:	f002 fbba 	bl	8003008 <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800089a:	f000 fad9 	bl	8000e50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008a2:	2301      	movs	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_TIM2_Init+0xdc>)
 80008b6:	f001 ffbd 	bl	8002834 <HAL_TIM_IC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80008c0:	f000 fac6 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000a4 	.word	0x200000a4

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART2_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000908:	f002 fc00 	bl	800310c <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 fa9d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000ec 	.word	0x200000ec
 8000920:	40004400 	.word	0x40004400

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a59      	ldr	r2, [pc, #356]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <MX_GPIO_Init+0x184>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b53      	ldr	r3, [pc, #332]	; (8000aa8 <MX_GPIO_Init+0x184>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a4b      	ldr	r2, [pc, #300]	; (8000aa8 <MX_GPIO_Init+0x184>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b49      	ldr	r3, [pc, #292]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <MX_GPIO_Init+0x184>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <MX_GPIO_Init+0x184>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 7108 	mov.w	r1, #544	; 0x220
 80009b0:	483e      	ldr	r0, [pc, #248]	; (8000aac <MX_GPIO_Init+0x188>)
 80009b2:	f000 ff79 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x18c>)
 80009bc:	f000 ff74 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	483b      	ldr	r0, [pc, #236]	; (8000ab4 <MX_GPIO_Init+0x190>)
 80009c6:	f000 ff6f 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x18c>)
 80009e2:	f000 fddd 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_1_Pin;
 80009e6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	482b      	ldr	r0, [pc, #172]	; (8000aac <MX_GPIO_Init+0x188>)
 8000a00:	f000 fdce 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_2_Pin */
  GPIO_InitStruct.Pin = PUSH_2_Pin;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4824      	ldr	r0, [pc, #144]	; (8000aac <MX_GPIO_Init+0x188>)
 8000a1a:	f000 fdc1 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0x18c>)
 8000a36:	f000 fdb3 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_1_Pin */
  GPIO_InitStruct.Pin = PUSH_1_Pin;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0x190>)
 8000a50:	f000 fda6 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0x190>)
 8000a6c:	f000 fd98 	bl	80015a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2102      	movs	r1, #2
 8000a74:	200a      	movs	r0, #10
 8000a76:	f000 fcca 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f000 fce3 	bl	8001446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2101      	movs	r1, #1
 8000a84:	2017      	movs	r0, #23
 8000a86:	f000 fcc2 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a8a:	2017      	movs	r0, #23
 8000a8c:	f000 fcdb 	bl	8001446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2103      	movs	r1, #3
 8000a94:	2028      	movs	r0, #40	; 0x28
 8000a96:	f000 fcba 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f000 fcd3 	bl	8001446 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	Flag_Rx=1;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <HAL_UART_RxCpltCallback+0x1c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000028 	.word	0x20000028

08000ad8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	counter_add = 1;
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000130 	.word	0x20000130

08000af8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
	char msg_2[30];

	if (GPIO_Pin == B1_Pin) {
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b08:	d123      	bne.n	8000b52 <HAL_GPIO_EXTI_Callback+0x5a>
		push_dir =  toogle_data(push_dir);
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f8ca 	bl	8000ca8 <toogle_data>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b1a:	701a      	strb	r2, [r3, #0]

	sprintf(msg_2, "\r\n DIR: : %s", push_dir == 1 ? "DERECHA" : "IZQUIERDA");
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d101      	bne.n	8000b28 <HAL_GPIO_EXTI_Callback+0x30>
 8000b24:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000b26:	e000      	b.n	8000b2a <HAL_GPIO_EXTI_Callback+0x32>
 8000b28:	4a2b      	ldr	r2, [pc, #172]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	492b      	ldr	r1, [pc, #172]	; (8000bdc <HAL_GPIO_EXTI_Callback+0xe4>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fc55 	bl	80043e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, strlen(msg_2), 300);
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb50 	bl	80001e0 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	f107 0108 	add.w	r1, r7, #8
 8000b48:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b4e:	f002 fb2a 	bl	80031a6 <HAL_UART_Transmit>
	}
	if (GPIO_Pin == PUSH_2_Pin){
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	2b80      	cmp	r3, #128	; 0x80
 8000b56:	d137      	bne.n	8000bc8 <HAL_GPIO_EXTI_Callback+0xd0>
		stop =  toogle_data(stop);
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f8a3 	bl	8000ca8 <toogle_data>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b68:	701a      	strb	r2, [r3, #0]
		if (stop ==1) {
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10f      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x9a>
			HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b78:	481b      	ldr	r0, [pc, #108]	; (8000be8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000b7a:	f000 fe95 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2140      	movs	r1, #64	; 0x40
 8000b82:	481a      	ldr	r0, [pc, #104]	; (8000bec <HAL_GPIO_EXTI_Callback+0xf4>)
 8000b84:	f000 fe90 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000b8e:	f000 fe8b 	bl	80018a8 <HAL_GPIO_WritePin>
		}
	sprintf(msg_2, "\r\n DIR: : %s", stop == 1 ? "ON" : "OFF");
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <HAL_GPIO_EXTI_Callback+0xa6>
 8000b9a:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000b9c:	e000      	b.n	8000ba0 <HAL_GPIO_EXTI_Callback+0xa8>
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <HAL_GPIO_EXTI_Callback+0xe4>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 fc1a 	bl	80043e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, strlen(msg_2), 300);
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fb15 	bl	80001e0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f107 0108 	add.w	r1, r7, #8
 8000bbe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000bc4:	f002 faef 	bl	80031a6 <HAL_UART_Transmit>
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000132 	.word	0x20000132
 8000bd4:	08004dc0 	.word	0x08004dc0
 8000bd8:	08004dc8 	.word	0x08004dc8
 8000bdc:	08004dd4 	.word	0x08004dd4
 8000be0:	200000ec 	.word	0x200000ec
 8000be4:	20000133 	.word	0x20000133
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	08004dac 	.word	0x08004dac
 8000bf8:	08004db0 	.word	0x08004db0

08000bfc <print_msg>:
void print_msg(UART_HandleTypeDef *huart){
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 5; ++i) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e021      	b.n	8000c4e <print_msg+0x52>
		HAL_UART_Transmit_IT(huart, (uint8_t*) tramos[i], strlen(tramos[i]));
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <print_msg+0x64>)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000c12:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <print_msg+0x64>)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	4621      	mov	r1, r4
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f002 fb4e 	bl	80032ca <HAL_UART_Transmit_IT>
		//	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
		while (HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX ||
 8000c2e:	bf00      	nop
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f002 fe6d 	bl	8003910 <HAL_UART_GetState>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b21      	cmp	r3, #33	; 0x21
 8000c3a:	d0f9      	beq.n	8000c30 <print_msg+0x34>
				HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX_RX);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f002 fe67 	bl	8003910 <HAL_UART_GetState>
 8000c42:	4603      	mov	r3, r0
		while (HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX ||
 8000c44:	2b23      	cmp	r3, #35	; 0x23
 8000c46:	d0f3      	beq.n	8000c30 <print_msg+0x34>
	for (int i = 0; i < 5; ++i) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	ddda      	ble.n	8000c0a <print_msg+0xe>
	}
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000014 	.word	0x20000014

08000c64 <readUserInput>:

uint8_t readUserInput(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	int valor =-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6e:	607b      	str	r3, [r7, #4]
	if (Flag_Rx ==1){
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <readUserInput+0x38>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d10b      	bne.n	8000c90 <readUserInput+0x2c>
		Flag_Rx =0;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <readUserInput+0x38>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t*) readBuf, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <readUserInput+0x3c>)
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <readUserInput+0x40>)
 8000c84:	f002 fb66 	bl	8003354 <HAL_UART_Receive_IT>
		valor =atoi(readBuf);
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <readUserInput+0x3c>)
 8000c8a:	f003 fb19 	bl	80042c0 <atoi>
 8000c8e:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
	return valor;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000028 	.word	0x20000028
 8000ca0:	20000138 	.word	0x20000138
 8000ca4:	200000ec 	.word	0x200000ec

08000ca8 <toogle_data>:
uint8_t toogle_data(uint8_t variable){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	if (variable == 0) {
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <toogle_data+0x16>
		variable = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	e001      	b.n	8000cc2 <toogle_data+0x1a>
	} else {
		variable = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	}
	return variable;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <processUserInput>:
uint8_t processUserInput(uint8_t opt) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b092      	sub	sp, #72	; 0x48
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	char msg[60];

	if(!opt || opt > 3)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <processUserInput+0x16>
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d901      	bls.n	8000cea <processUserInput+0x1a>
	return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e091      	b.n	8000e0e <processUserInput+0x13e>

	sprintf(msg, "%d", opt);
 8000cea:	79fa      	ldrb	r2, [r7, #7]
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4949      	ldr	r1, [pc, #292]	; (8000e18 <processUserInput+0x148>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fb74 	bl	80043e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 300);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fa6f 	bl	80001e0 <strlen>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f107 010c 	add.w	r1, r7, #12
 8000d0a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d0e:	4843      	ldr	r0, [pc, #268]	; (8000e1c <processUserInput+0x14c>)
 8000d10:	f002 fa49 	bl	80031a6 <HAL_UART_Transmit>

	switch(opt) {
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d870      	bhi.n	8000dfe <processUserInput+0x12e>
 8000d1c:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <processUserInput+0x54>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d35 	.word	0x08000d35
 8000d28:	08000d3f 	.word	0x08000d3f
 8000d2c:	08000d89 	.word	0x08000d89
 8000d30:	08000dfb 	.word	0x08000dfb
	case 1:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d34:	2120      	movs	r1, #32
 8000d36:	483a      	ldr	r0, [pc, #232]	; (8000e20 <processUserInput+0x150>)
 8000d38:	f000 fdcf 	bl	80018da <HAL_GPIO_TogglePin>
		break;
 8000d3c:	e05f      	b.n	8000dfe <processUserInput+0x12e>
	case 2:
		push_dir=toogle_data(push_dir);
 8000d3e:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <processUserInput+0x154>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ffb0 	bl	8000ca8 <toogle_data>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <processUserInput+0x154>)
 8000d4e:	701a      	strb	r2, [r3, #0]
		sprintf(msg, "\r\n Dir_status: %s", push_dir == 1 ? "derecha" : "izquierda");
 8000d50:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <processUserInput+0x154>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d101      	bne.n	8000d5c <processUserInput+0x8c>
 8000d58:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <processUserInput+0x158>)
 8000d5a:	e000      	b.n	8000d5e <processUserInput+0x8e>
 8000d5c:	4a33      	ldr	r2, [pc, #204]	; (8000e2c <processUserInput+0x15c>)
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4933      	ldr	r1, [pc, #204]	; (8000e30 <processUserInput+0x160>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fb3b 	bl	80043e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 300);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa36 	bl	80001e0 <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	f107 010c 	add.w	r1, r7, #12
 8000d7c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <processUserInput+0x14c>)
 8000d82:	f002 fa10 	bl	80031a6 <HAL_UART_Transmit>
		break;
 8000d86:	e03a      	b.n	8000dfe <processUserInput+0x12e>

	case 3:
		stop =  toogle_data(stop);
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <processUserInput+0x164>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff8b 	bl	8000ca8 <toogle_data>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <processUserInput+0x164>)
 8000d98:	701a      	strb	r2, [r3, #0]
		if (stop ==1) {
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <processUserInput+0x164>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10f      	bne.n	8000dc2 <processUserInput+0xf2>
			HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <processUserInput+0x150>)
 8000daa:	f000 fd7d 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	4821      	ldr	r0, [pc, #132]	; (8000e38 <processUserInput+0x168>)
 8000db4:	f000 fd78 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	481f      	ldr	r0, [pc, #124]	; (8000e3c <processUserInput+0x16c>)
 8000dbe:	f000 fd73 	bl	80018a8 <HAL_GPIO_WritePin>
		}
		sprintf(msg, "\r\n Stop: %s.", stop == 1 ? "ON" : "OFF");
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <processUserInput+0x164>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <processUserInput+0xfe>
 8000dca:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <processUserInput+0x170>)
 8000dcc:	e000      	b.n	8000dd0 <processUserInput+0x100>
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <processUserInput+0x174>)
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	491c      	ldr	r1, [pc, #112]	; (8000e48 <processUserInput+0x178>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fb02 	bl	80043e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 300);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff f9fd 	bl	80001e0 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f107 010c 	add.w	r1, r7, #12
 8000dee:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000df2:	480a      	ldr	r0, [pc, #40]	; (8000e1c <processUserInput+0x14c>)
 8000df4:	f002 f9d7 	bl	80031a6 <HAL_UART_Transmit>
		break;
 8000df8:	e001      	b.n	8000dfe <processUserInput+0x12e>
	case 4:
		return 2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e007      	b.n	8000e0e <processUserInput+0x13e>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e02:	2203      	movs	r2, #3
 8000e04:	4911      	ldr	r1, [pc, #68]	; (8000e4c <processUserInput+0x17c>)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <processUserInput+0x14c>)
 8000e08:	f002 f9cd 	bl	80031a6 <HAL_UART_Transmit>
	return 1;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3748      	adds	r7, #72	; 0x48
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08004de4 	.word	0x08004de4
 8000e1c:	200000ec 	.word	0x200000ec
 8000e20:	40020000 	.word	0x40020000
 8000e24:	20000132 	.word	0x20000132
 8000e28:	08004de8 	.word	0x08004de8
 8000e2c:	08004df0 	.word	0x08004df0
 8000e30:	08004dfc 	.word	0x08004dfc
 8000e34:	20000133 	.word	0x20000133
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	08004dac 	.word	0x08004dac
 8000e44:	08004db0 	.word	0x08004db0
 8000e48:	08004e10 	.word	0x08004e10
 8000e4c:	08004da8 	.word	0x08004da8

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ecc:	d133      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_TIM_Base_MspInit+0x94>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <HAL_TIM_Base_MspInit+0x94>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_TIM_Base_MspInit+0x94>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_TIM_Base_MspInit+0x94>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <HAL_TIM_Base_MspInit+0x94>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_TIM_Base_MspInit+0x94>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f06:	2301      	movs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f16:	2301      	movs	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <HAL_TIM_Base_MspInit+0x98>)
 8000f22:	f000 fb3d 	bl	80015a0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	201c      	movs	r0, #28
 8000f2c:	f000 fa6f 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f30:	201c      	movs	r0, #28
 8000f32:	f000 fa88 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_UART_MspInit+0x94>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d133      	bne.n	8000fd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <HAL_UART_MspInit+0x9c>)
 8000fbe:	f000 faef 	bl	80015a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2026      	movs	r0, #38	; 0x26
 8000fc8:	f000 fa21 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fcc:	2026      	movs	r0, #38	; 0x26
 8000fce:	f000 fa3a 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40004400 	.word	0x40004400
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f8f0 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_1_Pin);
 8001040:	2010      	movs	r0, #16
 8001042:	f000 fc65 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_2_Pin);
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	f000 fc5e 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM2_IRQHandler+0x10>)
 800105e:	f001 fae1 	bl	8002624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000a4 	.word	0x200000a4

0800106c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <USART2_IRQHandler+0x10>)
 8001072:	f002 f99f 	bl	80033b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000ec 	.word	0x200000ec

08001080 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001084:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001088:	f000 fc42 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <_sbrk>:
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
 80010c0:	f003 f9b6 	bl	8004430 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20018000 	.word	0x20018000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000140 	.word	0x20000140
 80010f8:	20000290 	.word	0x20000290

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
 800112a:	2300      	movs	r3, #0
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:
 800112e:	58d4      	ldr	r4, [r2, r3]
 8001130:	50c4      	str	r4, [r0, r3]
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:
 8001134:	18c4      	adds	r4, r0, r3
 8001136:	428c      	cmp	r4, r1
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
 800113e:	2300      	movs	r3, #0
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:
 8001146:	42a2      	cmp	r2, r4
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>
 800114a:	f7ff ffd7 	bl	80010fc <SystemInit>
 800114e:	f003 f975 	bl	800443c <__libc_init_array>
 8001152:	f7ff fa1b 	bl	800058c <main>
 8001156:	4770      	bx	lr
 8001158:	20018000 	.word	0x20018000
 800115c:	20000000 	.word	0x20000000
 8001160:	20000088 	.word	0x20000088
 8001164:	08004f88 	.word	0x08004f88
 8001168:	20000088 	.word	0x20000088
 800116c:	20000290 	.word	0x20000290

08001170 <ADC_IRQHandler>:
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f92b 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fe58 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f943 	bl	8001462 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f000 f90b 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000002c 	.word	0x2000002c
 8001210:	20000034 	.word	0x20000034
 8001214:	20000030 	.word	0x20000030

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000034 	.word	0x20000034
 800123c:	20000144 	.word	0x20000144

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000144 	.word	0x20000144

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff feda 	bl	8001240 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d008      	beq.n	80014ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e052      	b.n	8001552 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0216 	bic.w	r2, r2, #22
 80014ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <HAL_DMA_Abort+0x62>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0208 	bic.w	r2, r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fc:	e013      	b.n	8001526 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fe:	f7ff fe9f 	bl	8001240 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b05      	cmp	r3, #5
 800150a:	d90c      	bls.n	8001526 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2220      	movs	r2, #32
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e015      	b.n	8001552 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1e4      	bne.n	80014fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	223f      	movs	r2, #63	; 0x3f
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d004      	beq.n	8001578 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e00c      	b.n	8001592 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2205      	movs	r2, #5
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	e159      	b.n	8001870 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	f040 8148 	bne.w	800186a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d005      	beq.n	80015f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d130      	bne.n	8001654 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001628:	2201      	movs	r2, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 0201 	and.w	r2, r3, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b03      	cmp	r3, #3
 800165e:	d017      	beq.n	8001690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d123      	bne.n	80016e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	69b9      	ldr	r1, [r7, #24]
 80016e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a2 	beq.w	800186a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b57      	ldr	r3, [pc, #348]	; (8001888 <HAL_GPIO_Init+0x2e8>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a56      	ldr	r2, [pc, #344]	; (8001888 <HAL_GPIO_Init+0x2e8>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b54      	ldr	r3, [pc, #336]	; (8001888 <HAL_GPIO_Init+0x2e8>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001742:	4a52      	ldr	r2, [pc, #328]	; (800188c <HAL_GPIO_Init+0x2ec>)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a49      	ldr	r2, [pc, #292]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0x202>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x2f4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x1fe>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a47      	ldr	r2, [pc, #284]	; (8001898 <HAL_GPIO_Init+0x2f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x1fa>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a46      	ldr	r2, [pc, #280]	; (800189c <HAL_GPIO_Init+0x2fc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x1f6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a45      	ldr	r2, [pc, #276]	; (80018a0 <HAL_GPIO_Init+0x300>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x1f2>
 800178e:	2304      	movs	r3, #4
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 8001792:	2307      	movs	r3, #7
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x204>
 80017a2:	2300      	movs	r3, #0
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b4:	4935      	ldr	r1, [pc, #212]	; (800188c <HAL_GPIO_Init+0x2ec>)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_GPIO_Init+0x304>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e6:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <HAL_GPIO_Init+0x304>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ec:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_GPIO_Init+0x304>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001810:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <HAL_GPIO_Init+0x304>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_GPIO_Init+0x304>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <HAL_GPIO_Init+0x304>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_GPIO_Init+0x304>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001864:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_GPIO_Init+0x304>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3301      	adds	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2b0f      	cmp	r3, #15
 8001874:	f67f aea2 	bls.w	80015bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40013800 	.word	0x40013800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020400 	.word	0x40020400
 8001898:	40020800 	.word	0x40020800
 800189c:	40020c00 	.word	0x40020c00
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c4:	e003      	b.n	80018ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	041a      	lsls	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	619a      	str	r2, [r3, #24]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ec:	887a      	ldrh	r2, [r7, #2]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	400b      	ands	r3, r1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	619a      	str	r2, [r3, #24]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f8e2 	bl	8000af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e267      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d075      	beq.n	8001a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800195e:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b04      	cmp	r3, #4
 8001968:	d00c      	beq.n	8001984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196a:	4b85      	ldr	r3, [pc, #532]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001972:	2b08      	cmp	r3, #8
 8001974:	d112      	bne.n	800199c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001976:	4b82      	ldr	r3, [pc, #520]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001982:	d10b      	bne.n	800199c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	4b7e      	ldr	r3, [pc, #504]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d05b      	beq.n	8001a48 <HAL_RCC_OscConfig+0x108>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d157      	bne.n	8001a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e242      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d106      	bne.n	80019b4 <HAL_RCC_OscConfig+0x74>
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e01d      	b.n	80019f0 <HAL_RCC_OscConfig+0xb0>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x98>
 80019be:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6f      	ldr	r2, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6c      	ldr	r2, [pc, #432]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e00b      	b.n	80019f0 <HAL_RCC_OscConfig+0xb0>
 80019d8:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a68      	ldr	r2, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fc22 	bl	8001240 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff fc1e 	bl	8001240 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e207      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0xc0>
 8001a1e:	e014      	b.n	8001a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc0e 	bl	8001240 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fc0a 	bl	8001240 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1f3      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0xe8>
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d063      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00b      	beq.n	8001a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d11c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d116      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_RCC_OscConfig+0x152>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e1c7      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4937      	ldr	r1, [pc, #220]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	e03a      	b.n	8001b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <HAL_RCC_OscConfig+0x244>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fbc3 	bl	8001240 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff fbbf 	bl	8001240 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e1a8      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4925      	ldr	r1, [pc, #148]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
 8001af0:	e015      	b.n	8001b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x244>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fba2 	bl	8001240 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b00:	f7ff fb9e 	bl	8001240 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e187      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d036      	beq.n	8001b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d016      	beq.n	8001b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_RCC_OscConfig+0x248>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fb82 	bl	8001240 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b40:	f7ff fb7e 	bl	8001240 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e167      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x240>)
 8001b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x200>
 8001b5e:	e01b      	b.n	8001b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_OscConfig+0x248>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb6b 	bl	8001240 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6c:	e00e      	b.n	8001b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fb67 	bl	8001240 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d907      	bls.n	8001b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e150      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
 8001b80:	40023800 	.word	0x40023800
 8001b84:	42470000 	.word	0x42470000
 8001b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b88      	ldr	r3, [pc, #544]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ea      	bne.n	8001b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 8097 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b81      	ldr	r3, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a7c      	ldr	r2, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b7a      	ldr	r3, [pc, #488]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b77      	ldr	r3, [pc, #476]	; (8001db4 <HAL_RCC_OscConfig+0x474>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be2:	4b74      	ldr	r3, [pc, #464]	; (8001db4 <HAL_RCC_OscConfig+0x474>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a73      	ldr	r2, [pc, #460]	; (8001db4 <HAL_RCC_OscConfig+0x474>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fb27 	bl	8001240 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7ff fb23 	bl	8001240 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e10c      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_OscConfig+0x474>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x2ea>
 8001c1c:	4b64      	ldr	r3, [pc, #400]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a63      	ldr	r2, [pc, #396]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	e01c      	b.n	8001c64 <HAL_RCC_OscConfig+0x324>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x30c>
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a5e      	ldr	r2, [pc, #376]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	4b5c      	ldr	r3, [pc, #368]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	4a5b      	ldr	r2, [pc, #364]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0x324>
 8001c4c:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a57      	ldr	r2, [pc, #348]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
 8001c58:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	f023 0304 	bic.w	r3, r3, #4
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d015      	beq.n	8001c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fae8 	bl	8001240 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7ff fae4 	bl	8001240 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e0cb      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8a:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0ee      	beq.n	8001c74 <HAL_RCC_OscConfig+0x334>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fad2 	bl	8001240 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff face 	bl	8001240 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0b5      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ee      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80a1 	beq.w	8001e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d05c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d141      	bne.n	8001d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_RCC_OscConfig+0x478>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff faa2 	bl	8001240 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff fa9e 	bl	8001240 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e087      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	019b      	lsls	r3, r3, #6
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	3b01      	subs	r3, #1
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	061b      	lsls	r3, r3, #24
 8001d42:	491b      	ldr	r1, [pc, #108]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x478>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fa77 	bl	8001240 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff fa73 	bl	8001240 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e05c      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x416>
 8001d74:	e054      	b.n	8001e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCC_OscConfig+0x478>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fa60 	bl	8001240 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fa5c 	bl	8001240 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e045      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_OscConfig+0x470>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x444>
 8001da2:	e03d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e038      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000
 8001db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x4ec>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d028      	beq.n	8001e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d121      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d11a      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d111      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0cc      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d90c      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0b8      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a58      	ldr	r2, [pc, #352]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	494d      	ldr	r1, [pc, #308]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d044      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d119      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e07f      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d003      	beq.n	8001eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e06f      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e067      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4934      	ldr	r1, [pc, #208]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f20:	f7ff f98e 	bl	8001240 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7ff f98a 	bl	8001240 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e04f      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 020c 	and.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1eb      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d20c      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e032      	b.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4916      	ldr	r1, [pc, #88]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb6:	f000 f821 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	490a      	ldr	r1, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	5ccb      	ldrb	r3, [r1, r3]
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f8ee 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08004e2c 	.word	0x08004e2c
 8001ff4:	2000002c 	.word	0x2000002c
 8001ff8:	20000030 	.word	0x20000030

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002000:	b094      	sub	sp, #80	; 0x50
 8002002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	647b      	str	r3, [r7, #68]	; 0x44
 8002008:	2300      	movs	r3, #0
 800200a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800200c:	2300      	movs	r3, #0
 800200e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002014:	4b79      	ldr	r3, [pc, #484]	; (80021fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d00d      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x40>
 8002020:	2b08      	cmp	r3, #8
 8002022:	f200 80e1 	bhi.w	80021e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x34>
 800202a:	2b04      	cmp	r3, #4
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x3a>
 800202e:	e0db      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b73      	ldr	r3, [pc, #460]	; (8002200 <HAL_RCC_GetSysClockFreq+0x204>)
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002034:	e0db      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <HAL_RCC_GetSysClockFreq+0x208>)
 8002038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800203a:	e0d8      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800203c:	4b6f      	ldr	r3, [pc, #444]	; (80021fc <HAL_RCC_GetSysClockFreq+0x200>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002044:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002052:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	2200      	movs	r2, #0
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
 800205c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
 800206a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800206e:	4622      	mov	r2, r4
 8002070:	462b      	mov	r3, r5
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	0159      	lsls	r1, r3, #5
 800207c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002080:	0150      	lsls	r0, r2, #5
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4621      	mov	r1, r4
 8002088:	1a51      	subs	r1, r2, r1
 800208a:	6139      	str	r1, [r7, #16]
 800208c:	4629      	mov	r1, r5
 800208e:	eb63 0301 	sbc.w	r3, r3, r1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020a0:	4659      	mov	r1, fp
 80020a2:	018b      	lsls	r3, r1, #6
 80020a4:	4651      	mov	r1, sl
 80020a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020aa:	4651      	mov	r1, sl
 80020ac:	018a      	lsls	r2, r1, #6
 80020ae:	4651      	mov	r1, sl
 80020b0:	ebb2 0801 	subs.w	r8, r2, r1
 80020b4:	4659      	mov	r1, fp
 80020b6:	eb63 0901 	sbc.w	r9, r3, r1
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ce:	4690      	mov	r8, r2
 80020d0:	4699      	mov	r9, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	eb18 0303 	adds.w	r3, r8, r3
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	462b      	mov	r3, r5
 80020dc:	eb49 0303 	adc.w	r3, r9, r3
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ee:	4629      	mov	r1, r5
 80020f0:	024b      	lsls	r3, r1, #9
 80020f2:	4621      	mov	r1, r4
 80020f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020f8:	4621      	mov	r1, r4
 80020fa:	024a      	lsls	r2, r1, #9
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002102:	2200      	movs	r2, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
 8002106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800210c:	f7fe f8c0 	bl	8000290 <__aeabi_uldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4613      	mov	r3, r2
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002118:	e058      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_RCC_GetSysClockFreq+0x200>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	2200      	movs	r2, #0
 8002122:	4618      	mov	r0, r3
 8002124:	4611      	mov	r1, r2
 8002126:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
 8002130:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002134:	4642      	mov	r2, r8
 8002136:	464b      	mov	r3, r9
 8002138:	f04f 0000 	mov.w	r0, #0
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	0159      	lsls	r1, r3, #5
 8002142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002146:	0150      	lsls	r0, r2, #5
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4641      	mov	r1, r8
 800214e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002152:	4649      	mov	r1, r9
 8002154:	eb63 0b01 	sbc.w	fp, r3, r1
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002164:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002168:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800216c:	ebb2 040a 	subs.w	r4, r2, sl
 8002170:	eb63 050b 	sbc.w	r5, r3, fp
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	00eb      	lsls	r3, r5, #3
 800217e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002182:	00e2      	lsls	r2, r4, #3
 8002184:	4614      	mov	r4, r2
 8002186:	461d      	mov	r5, r3
 8002188:	4643      	mov	r3, r8
 800218a:	18e3      	adds	r3, r4, r3
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	464b      	mov	r3, r9
 8002190:	eb45 0303 	adc.w	r3, r5, r3
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021a2:	4629      	mov	r1, r5
 80021a4:	028b      	lsls	r3, r1, #10
 80021a6:	4621      	mov	r1, r4
 80021a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021ac:	4621      	mov	r1, r4
 80021ae:	028a      	lsls	r2, r1, #10
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b6:	2200      	movs	r2, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	61fa      	str	r2, [r7, #28]
 80021bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021c0:	f7fe f866 	bl	8000290 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_GetSysClockFreq+0x200>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021e6:	e002      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3750      	adds	r7, #80	; 0x50
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	2000002c 	.word	0x2000002c

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	08004e3c 	.word	0x08004e3c

08002248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800224c:	f7ff ffdc 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0b5b      	lsrs	r3, r3, #13
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK2Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	08004e3c 	.word	0x08004e3c

08002270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e041      	b.n	8002306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fe08 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 fc4c 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d001      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e044      	b.n	80023b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d018      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002352:	d013      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00e      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_TIM_Base_Start_IT+0xbc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d111      	bne.n	80023a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d010      	beq.n	80023b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239e:	e007      	b.n	80023b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40000800 	.word	0x40000800
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40014000 	.word	0x40014000

080023d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e041      	b.n	800246a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f839 	bl	8002472 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 fb9a 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_IC_Start+0x1a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	e013      	b.n	80024ca <HAL_TIM_IC_Start+0x42>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d104      	bne.n	80024b2 <HAL_TIM_IC_Start+0x2a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	e00b      	b.n	80024ca <HAL_TIM_IC_Start+0x42>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d104      	bne.n	80024c2 <HAL_TIM_IC_Start+0x3a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	e003      	b.n	80024ca <HAL_TIM_IC_Start+0x42>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_TIM_IC_Start+0x54>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e013      	b.n	8002504 <HAL_TIM_IC_Start+0x7c>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d104      	bne.n	80024ec <HAL_TIM_IC_Start+0x64>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e00b      	b.n	8002504 <HAL_TIM_IC_Start+0x7c>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d104      	bne.n	80024fc <HAL_TIM_IC_Start+0x74>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e003      	b.n	8002504 <HAL_TIM_IC_Start+0x7c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002502:	b2db      	uxtb	r3, r3
 8002504:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e077      	b.n	8002606 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d104      	bne.n	8002526 <HAL_TIM_IC_Start+0x9e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002524:	e013      	b.n	800254e <HAL_TIM_IC_Start+0xc6>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b04      	cmp	r3, #4
 800252a:	d104      	bne.n	8002536 <HAL_TIM_IC_Start+0xae>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002534:	e00b      	b.n	800254e <HAL_TIM_IC_Start+0xc6>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b08      	cmp	r3, #8
 800253a:	d104      	bne.n	8002546 <HAL_TIM_IC_Start+0xbe>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002544:	e003      	b.n	800254e <HAL_TIM_IC_Start+0xc6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_TIM_IC_Start+0xd6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800255c:	e013      	b.n	8002586 <HAL_TIM_IC_Start+0xfe>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d104      	bne.n	800256e <HAL_TIM_IC_Start+0xe6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800256c:	e00b      	b.n	8002586 <HAL_TIM_IC_Start+0xfe>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d104      	bne.n	800257e <HAL_TIM_IC_Start+0xf6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800257c:	e003      	b.n	8002586 <HAL_TIM_IC_Start+0xfe>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fd14 	bl	8002fbc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_TIM_IC_Start+0x188>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d018      	beq.n	80025d0 <HAL_TIM_IC_Start+0x148>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d013      	beq.n	80025d0 <HAL_TIM_IC_Start+0x148>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_TIM_IC_Start+0x18c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_TIM_IC_Start+0x148>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_TIM_IC_Start+0x190>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_TIM_IC_Start+0x148>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a16      	ldr	r2, [pc, #88]	; (800261c <HAL_TIM_IC_Start+0x194>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_TIM_IC_Start+0x148>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_TIM_IC_Start+0x198>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d111      	bne.n	80025f4 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d010      	beq.n	8002604 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	e007      	b.n	8002604 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40010000 	.word	0x40010000
 8002614:	40000400 	.word	0x40000400
 8002618:	40000800 	.word	0x40000800
 800261c:	40000c00 	.word	0x40000c00
 8002620:	40014000 	.word	0x40014000

08002624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b02      	cmp	r3, #2
 8002638:	d122      	bne.n	8002680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	d11b      	bne.n	8002680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0202 	mvn.w	r2, #2
 8002650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa51 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa43 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa54 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b04      	cmp	r3, #4
 800268c:	d122      	bne.n	80026d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d11b      	bne.n	80026d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0204 	mvn.w	r2, #4
 80026a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa27 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa19 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fa2a 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0208 	mvn.w	r2, #8
 80026f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2204      	movs	r2, #4
 80026fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9fd 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f9ef 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fa00 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b10      	cmp	r3, #16
 8002734:	d122      	bne.n	800277c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b10      	cmp	r3, #16
 8002742:	d11b      	bne.n	800277c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0210 	mvn.w	r2, #16
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2208      	movs	r2, #8
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f9d3 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f9c5 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f9d6 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0201 	mvn.w	r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe f998 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b80      	cmp	r3, #128	; 0x80
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d107      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fc92 	bl	80030f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f99b 	bl	8002b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0220 	mvn.w	r2, #32
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fc5c 	bl	80030e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_TIM_IC_ConfigChannel+0x1e>
 800284e:	2302      	movs	r3, #2
 8002850:	e088      	b.n	8002964 <HAL_TIM_IC_ConfigChannel+0x130>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11b      	bne.n	8002898 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	6819      	ldr	r1, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f000 f9ec 	bl	8002c4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020c 	bic.w	r2, r2, #12
 8002882:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6999      	ldr	r1, [r3, #24]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	619a      	str	r2, [r3, #24]
 8002896:	e060      	b.n	800295a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b04      	cmp	r3, #4
 800289c:	d11c      	bne.n	80028d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f000 fa64 	bl	8002d7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6999      	ldr	r1, [r3, #24]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	619a      	str	r2, [r3, #24]
 80028d6:	e040      	b.n	800295a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d11b      	bne.n	8002916 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f000 fab1 	bl	8002e54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 020c 	bic.w	r2, r2, #12
 8002900:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69d9      	ldr	r1, [r3, #28]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	61da      	str	r2, [r3, #28]
 8002914:	e021      	b.n	800295a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d11c      	bne.n	8002956 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f000 face 	bl	8002ecc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800293e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69d9      	ldr	r1, [r3, #28]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
 8002954:	e001      	b.n	800295a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x1c>
 8002984:	2302      	movs	r3, #2
 8002986:	e0b4      	b.n	8002af2 <HAL_TIM_ConfigClockSource+0x186>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c0:	d03e      	beq.n	8002a40 <HAL_TIM_ConfigClockSource+0xd4>
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c6:	f200 8087 	bhi.w	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ce:	f000 8086 	beq.w	8002ade <HAL_TIM_ConfigClockSource+0x172>
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d87f      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b70      	cmp	r3, #112	; 0x70
 80029da:	d01a      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0xa6>
 80029dc:	2b70      	cmp	r3, #112	; 0x70
 80029de:	d87b      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b60      	cmp	r3, #96	; 0x60
 80029e2:	d050      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x11a>
 80029e4:	2b60      	cmp	r3, #96	; 0x60
 80029e6:	d877      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b50      	cmp	r3, #80	; 0x50
 80029ea:	d03c      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0xfa>
 80029ec:	2b50      	cmp	r3, #80	; 0x50
 80029ee:	d873      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d058      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d86f      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b30      	cmp	r3, #48	; 0x30
 80029fa:	d064      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80029fc:	2b30      	cmp	r3, #48	; 0x30
 80029fe:	d86b      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d060      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d867      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05c      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d05a      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a10:	e062      	b.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f000 faab 	bl	8002f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
      break;
 8002a3e:	e04f      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6899      	ldr	r1, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f000 fa94 	bl	8002f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a62:	609a      	str	r2, [r3, #8]
      break;
 8002a64:	e03c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f000 f952 	bl	8002d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2150      	movs	r1, #80	; 0x50
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fa61 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002a84:	e02c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f000 f9ae 	bl	8002df4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2160      	movs	r1, #96	; 0x60
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fa51 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002aa4:	e01c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f000 f932 	bl	8002d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fa41 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002ac4:	e00c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f000 fa38 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002ad6:	e003      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e000      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <TIM_Base_SetConfig+0xe4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00f      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d00b      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <TIM_Base_SetConfig+0xe8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a30      	ldr	r2, [pc, #192]	; (8002c38 <TIM_Base_SetConfig+0xec>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a2f      	ldr	r2, [pc, #188]	; (8002c3c <TIM_Base_SetConfig+0xf0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <TIM_Base_SetConfig+0xe4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d017      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a22      	ldr	r2, [pc, #136]	; (8002c34 <TIM_Base_SetConfig+0xe8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <TIM_Base_SetConfig+0xec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <TIM_Base_SetConfig+0xf0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <TIM_Base_SetConfig+0xf4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <TIM_Base_SetConfig+0xf8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0x8a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <TIM_Base_SetConfig+0xfc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <TIM_Base_SetConfig+0xe4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d103      	bne.n	8002c1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	615a      	str	r2, [r3, #20]
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40014400 	.word	0x40014400
 8002c48:	40014800 	.word	0x40014800

08002c4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f023 0201 	bic.w	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <TIM_TI1_SetConfig+0xbc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <TIM_TI1_SetConfig+0x56>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d00f      	beq.n	8002ca2 <TIM_TI1_SetConfig+0x56>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <TIM_TI1_SetConfig+0xc0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <TIM_TI1_SetConfig+0x56>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <TIM_TI1_SetConfig+0xc4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <TIM_TI1_SetConfig+0x56>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <TIM_TI1_SetConfig+0xc8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_TI1_SetConfig+0x56>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <TIM_TI1_SetConfig+0xcc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <TIM_TI1_SetConfig+0x5a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <TIM_TI1_SetConfig+0x5c>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e003      	b.n	8002cc6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f023 030a 	bic.w	r3, r3, #10
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f003 030a 	and.w	r3, r3, #10
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	621a      	str	r2, [r3, #32]
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40000800 	.word	0x40000800
 8002d14:	40000c00 	.word	0x40000c00
 8002d18:	40014000 	.word	0x40014000

08002d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f023 030a 	bic.w	r3, r3, #10
 8002d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f023 0210 	bic.w	r2, r3, #16
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	031b      	lsls	r3, r3, #12
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dcc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	621a      	str	r2, [r3, #32]
}
 8002de8:	bf00      	nop
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f023 0210 	bic.w	r2, r3, #16
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	031b      	lsls	r3, r3, #12
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f023 0303 	bic.w	r3, r3, #3
 8002e80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	621a      	str	r2, [r3, #32]
}
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	031b      	lsls	r3, r3, #12
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	031b      	lsls	r3, r3, #12
 8002f24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f043 0307 	orr.w	r3, r3, #7
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	021a      	lsls	r2, r3, #8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2201      	movs	r2, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	401a      	ands	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800301c:	2302      	movs	r3, #2
 800301e:	e050      	b.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d013      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40014000 	.word	0x40014000

080030e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e03f      	b.n	800319e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd ff08 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	; 0x24
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fe41 	bl	8003dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b08a      	sub	sp, #40	; 0x28
 80031aa:	af02      	add	r7, sp, #8
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d17c      	bne.n	80032c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_UART_Transmit+0x2c>
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e075      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Transmit+0x3e>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e06e      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2221      	movs	r2, #33	; 0x21
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031fa:	f7fe f821 	bl	8001240 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003214:	d108      	bne.n	8003228 <HAL_UART_Transmit+0x82>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e003      	b.n	8003230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003238:	e02a      	b.n	8003290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2200      	movs	r2, #0
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fb81 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e036      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	3302      	adds	r3, #2
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	e007      	b.n	8003282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1cf      	bne.n	800323a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fb51 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	4613      	mov	r3, r2
 80032d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d130      	bne.n	8003346 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Transmit_IT+0x26>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e029      	b.n	8003348 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Transmit_IT+0x38>
 80032fe:	2302      	movs	r3, #2
 8003300:	e022      	b.n	8003348 <HAL_UART_Transmit_IT+0x7e>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2221      	movs	r2, #33	; 0x21
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003340:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b20      	cmp	r3, #32
 800336c:	d11d      	bne.n	80033aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_UART_Receive_IT+0x26>
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e016      	b.n	80033ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_UART_Receive_IT+0x38>
 8003388:	2302      	movs	r3, #2
 800338a:	e00f      	b.n	80033ac <HAL_UART_Receive_IT+0x58>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	461a      	mov	r2, r3
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fb41 	bl	8003a28 <UART_Start_Receive_IT>
 80033a6:	4603      	mov	r3, r0
 80033a8:	e000      	b.n	80033ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b0ba      	sub	sp, #232	; 0xe8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_UART_IRQHandler+0x66>
 8003406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fc25 	bl	8003c62 <UART_Receive_IT>
      return;
 8003418:	e256      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800341a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80de 	beq.w	80035e0 <HAL_UART_IRQHandler+0x22c>
 8003424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003434:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80d1 	beq.w	80035e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_UART_IRQHandler+0xae>
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_UART_IRQHandler+0xd2>
 800346e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_UART_IRQHandler+0xf6>
 8003492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f043 0204 	orr.w	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d011      	beq.n	80034da <HAL_UART_IRQHandler+0x126>
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0208 	orr.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 81ed 	beq.w	80038be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_UART_IRQHandler+0x14e>
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fbb0 	bl	8003c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_UART_IRQHandler+0x17a>
 8003526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04f      	beq.n	80035ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fab8 	bl	8003aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d141      	bne.n	80035c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800355c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3314      	adds	r3, #20
 800356a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800356e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800357a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1d9      	bne.n	8003542 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d013      	beq.n	80035be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	4a7d      	ldr	r2, [pc, #500]	; (8003790 <HAL_UART_IRQHandler+0x3dc>)
 800359c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd ffd9 	bl	800155a <HAL_DMA_Abort_IT>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035b8:	4610      	mov	r0, r2
 80035ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	e00e      	b.n	80035dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f990 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	e00a      	b.n	80035dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f98c 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	e006      	b.n	80035dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f988 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035da:	e170      	b.n	80038be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	bf00      	nop
    return;
 80035de:	e16e      	b.n	80038be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	f040 814a 	bne.w	800387e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8143 	beq.w	800387e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 813c 	beq.w	800387e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	f040 80b4 	bne.w	8003794 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003638:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8140 	beq.w	80038c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800364a:	429a      	cmp	r2, r3
 800364c:	f080 8139 	bcs.w	80038c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003656:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003662:	f000 8088 	beq.w	8003776 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800367c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003692:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800369e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1d9      	bne.n	8003666 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3314      	adds	r3, #20
 80036d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e1      	bne.n	80036b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003712:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003714:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e3      	bne.n	80036ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003746:	f023 0310 	bic.w	r3, r3, #16
 800374a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003758:	65ba      	str	r2, [r7, #88]	; 0x58
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800375e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e3      	bne.n	8003734 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd fe82 	bl	800147a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377e:	b29b      	uxth	r3, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	b29b      	uxth	r3, r3
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8b6 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800378c:	e099      	b.n	80038c2 <HAL_UART_IRQHandler+0x50e>
 800378e:	bf00      	nop
 8003790:	08003b6b 	.word	0x08003b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800379c:	b29b      	uxth	r3, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 808b 	beq.w	80038c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8086 	beq.w	80038c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037de:	647a      	str	r2, [r7, #68]	; 0x44
 80037e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e3      	bne.n	80037ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3314      	adds	r3, #20
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	623b      	str	r3, [r7, #32]
   return(result);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003816:	633a      	str	r2, [r7, #48]	; 0x30
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800381c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e3      	bne.n	80037f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	60fb      	str	r3, [r7, #12]
   return(result);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0310 	bic.w	r3, r3, #16
 800384e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	330c      	adds	r3, #12
 8003858:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800385c:	61fa      	str	r2, [r7, #28]
 800385e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	69b9      	ldr	r1, [r7, #24]
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	617b      	str	r3, [r7, #20]
   return(result);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e3      	bne.n	8003838 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f83e 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800387c:	e023      	b.n	80038c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_UART_IRQHandler+0x4ea>
 800388a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f97b 	bl	8003b92 <UART_Transmit_IT>
    return;
 800389c:	e014      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <HAL_UART_IRQHandler+0x514>
 80038aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9bb 	bl	8003c32 <UART_EndTransmit_IT>
    return;
 80038bc:	e004      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
    return;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
      return;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_UART_IRQHandler+0x514>
      return;
 80038c6:	bf00      	nop
  }
}
 80038c8:	37e8      	adds	r7, #232	; 0xe8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop

080038d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003930:	b2db      	uxtb	r3, r3
 8003932:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4313      	orrs	r3, r2
 800393e:	b2db      	uxtb	r3, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b090      	sub	sp, #64	; 0x40
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395c:	e050      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d04c      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <UART_WaitOnFlagUntilTimeout+0x30>
 800396c:	f7fd fc68 	bl	8001240 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003978:	429a      	cmp	r2, r3
 800397a:	d241      	bcs.n	8003a00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800399c:	637a      	str	r2, [r7, #52]	; 0x34
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e5      	bne.n	800397c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	613b      	str	r3, [r7, #16]
   return(result);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039d0:	623a      	str	r2, [r7, #32]
 80039d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	69f9      	ldr	r1, [r7, #28]
 80039d6:	6a3a      	ldr	r2, [r7, #32]
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e5      	bne.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e00f      	b.n	8003a20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d09f      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3740      	adds	r7, #64	; 0x40
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2222      	movs	r2, #34	; 0x22
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0220 	orr.w	r2, r2, #32
 8003a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b095      	sub	sp, #84	; 0x54
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003acc:	643a      	str	r2, [r7, #64]	; 0x40
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e5      	bne.n	8003aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e5      	bne.n	8003ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d119      	bne.n	8003b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f023 0310 	bic.w	r3, r3, #16
 8003b32:	647b      	str	r3, [r7, #68]	; 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b3c:	61ba      	str	r2, [r7, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6979      	ldr	r1, [r7, #20]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b5e:	bf00      	nop
 8003b60:	3754      	adds	r7, #84	; 0x54
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff fead 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b21      	cmp	r3, #33	; 0x21
 8003ba4:	d13e      	bne.n	8003c24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d114      	bne.n	8003bda <UART_Transmit_IT+0x48>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d110      	bne.n	8003bda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	621a      	str	r2, [r3, #32]
 8003bd8:	e008      	b.n	8003bec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6211      	str	r1, [r2, #32]
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10f      	bne.n	8003c20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fe3c 	bl	80038d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08c      	sub	sp, #48	; 0x30
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b22      	cmp	r3, #34	; 0x22
 8003c74:	f040 80ab 	bne.w	8003dce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d117      	bne.n	8003cb2 <UART_Receive_IT+0x50>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	1c9a      	adds	r2, r3, #2
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb0:	e026      	b.n	8003d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d007      	beq.n	8003cd6 <UART_Receive_IT+0x74>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <UART_Receive_IT+0x82>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e008      	b.n	8003cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d15a      	bne.n	8003dca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0220 	bic.w	r2, r2, #32
 8003d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d135      	bne.n	8003dc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f023 0310 	bic.w	r3, r3, #16
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	623a      	str	r2, [r7, #32]
 8003d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	69f9      	ldr	r1, [r7, #28]
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e5      	bne.n	8003d5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d10a      	bne.n	8003db2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fd9d 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
 8003dbe:	e002      	b.n	8003dc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fc fe79 	bl	8000ab8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e002      	b.n	8003dd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3730      	adds	r7, #48	; 0x30
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ddc:	b0c0      	sub	sp, #256	; 0x100
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	68d9      	ldr	r1, [r3, #12]
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	ea40 0301 	orr.w	r3, r0, r1
 8003e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e30:	f021 010c 	bic.w	r1, r1, #12
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e52:	6999      	ldr	r1, [r3, #24]
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	ea40 0301 	orr.w	r3, r0, r1
 8003e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b8f      	ldr	r3, [pc, #572]	; (80040a4 <UART_SetConfig+0x2cc>)
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d005      	beq.n	8003e78 <UART_SetConfig+0xa0>
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b8d      	ldr	r3, [pc, #564]	; (80040a8 <UART_SetConfig+0x2d0>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d104      	bne.n	8003e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7fe f9e6 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e80:	e003      	b.n	8003e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e82:	f7fe f9cd 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003e86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	f040 810c 	bne.w	80040b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	1891      	adds	r1, r2, r2
 8003eb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eb2:	415b      	adcs	r3, r3
 8003eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003eba:	4621      	mov	r1, r4
 8003ebc:	eb12 0801 	adds.w	r8, r2, r1
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	eb43 0901 	adc.w	r9, r3, r1
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eda:	4690      	mov	r8, r2
 8003edc:	4699      	mov	r9, r3
 8003ede:	4623      	mov	r3, r4
 8003ee0:	eb18 0303 	adds.w	r3, r8, r3
 8003ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ee8:	462b      	mov	r3, r5
 8003eea:	eb49 0303 	adc.w	r3, r9, r3
 8003eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003efe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f06:	460b      	mov	r3, r1
 8003f08:	18db      	adds	r3, r3, r3
 8003f0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	eb42 0303 	adc.w	r3, r2, r3
 8003f12:	657b      	str	r3, [r7, #84]	; 0x54
 8003f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f1c:	f7fc f9b8 	bl	8000290 <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4b61      	ldr	r3, [pc, #388]	; (80040ac <UART_SetConfig+0x2d4>)
 8003f26:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	011c      	lsls	r4, r3, #4
 8003f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	1891      	adds	r1, r2, r2
 8003f46:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f48:	415b      	adcs	r3, r3
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f50:	4641      	mov	r1, r8
 8003f52:	eb12 0a01 	adds.w	sl, r2, r1
 8003f56:	4649      	mov	r1, r9
 8003f58:	eb43 0b01 	adc.w	fp, r3, r1
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f70:	4692      	mov	sl, r2
 8003f72:	469b      	mov	fp, r3
 8003f74:	4643      	mov	r3, r8
 8003f76:	eb1a 0303 	adds.w	r3, sl, r3
 8003f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	eb4b 0303 	adc.w	r3, fp, r3
 8003f84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	18db      	adds	r3, r3, r3
 8003fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	eb42 0303 	adc.w	r3, r2, r3
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8003faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fb2:	f7fc f96d 	bl	8000290 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <UART_SetConfig+0x2d4>)
 8003fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2264      	movs	r2, #100	; 0x64
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	1acb      	subs	r3, r1, r3
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <UART_SetConfig+0x2d4>)
 8003fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fe0:	441c      	add	r4, r3
 8003fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	1891      	adds	r1, r2, r2
 8003ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ffc:	415b      	adcs	r3, r3
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004004:	4641      	mov	r1, r8
 8004006:	1851      	adds	r1, r2, r1
 8004008:	6339      	str	r1, [r7, #48]	; 0x30
 800400a:	4649      	mov	r1, r9
 800400c:	414b      	adcs	r3, r1
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800401c:	4659      	mov	r1, fp
 800401e:	00cb      	lsls	r3, r1, #3
 8004020:	4651      	mov	r1, sl
 8004022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004026:	4651      	mov	r1, sl
 8004028:	00ca      	lsls	r2, r1, #3
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	4603      	mov	r3, r0
 8004030:	4642      	mov	r2, r8
 8004032:	189b      	adds	r3, r3, r2
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004038:	464b      	mov	r3, r9
 800403a:	460a      	mov	r2, r1
 800403c:	eb42 0303 	adc.w	r3, r2, r3
 8004040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004050:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004058:	460b      	mov	r3, r1
 800405a:	18db      	adds	r3, r3, r3
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
 800405e:	4613      	mov	r3, r2
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800406a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800406e:	f7fc f90f 	bl	8000290 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <UART_SetConfig+0x2d4>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <UART_SetConfig+0x2d4>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4422      	add	r2, r4
 800409e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040a0:	e106      	b.n	80042b0 <UART_SetConfig+0x4d8>
 80040a2:	bf00      	nop
 80040a4:	40011000 	.word	0x40011000
 80040a8:	40011400 	.word	0x40011400
 80040ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040c2:	4642      	mov	r2, r8
 80040c4:	464b      	mov	r3, r9
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	6239      	str	r1, [r7, #32]
 80040ca:	415b      	adcs	r3, r3
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
 80040ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040d2:	4641      	mov	r1, r8
 80040d4:	1854      	adds	r4, r2, r1
 80040d6:	4649      	mov	r1, r9
 80040d8:	eb43 0501 	adc.w	r5, r3, r1
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	00eb      	lsls	r3, r5, #3
 80040e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ea:	00e2      	lsls	r2, r4, #3
 80040ec:	4614      	mov	r4, r2
 80040ee:	461d      	mov	r5, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	18e3      	adds	r3, r4, r3
 80040f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040f8:	464b      	mov	r3, r9
 80040fa:	eb45 0303 	adc.w	r3, r5, r3
 80040fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800410e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800411e:	4629      	mov	r1, r5
 8004120:	008b      	lsls	r3, r1, #2
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004128:	4621      	mov	r1, r4
 800412a:	008a      	lsls	r2, r1, #2
 800412c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004130:	f7fc f8ae 	bl	8000290 <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4b60      	ldr	r3, [pc, #384]	; (80042bc <UART_SetConfig+0x4e4>)
 800413a:	fba3 2302 	umull	r2, r3, r3, r2
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	011c      	lsls	r4, r3, #4
 8004142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800414c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	1891      	adds	r1, r2, r2
 800415a:	61b9      	str	r1, [r7, #24]
 800415c:	415b      	adcs	r3, r3
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004164:	4641      	mov	r1, r8
 8004166:	1851      	adds	r1, r2, r1
 8004168:	6139      	str	r1, [r7, #16]
 800416a:	4649      	mov	r1, r9
 800416c:	414b      	adcs	r3, r1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800417c:	4659      	mov	r1, fp
 800417e:	00cb      	lsls	r3, r1, #3
 8004180:	4651      	mov	r1, sl
 8004182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004186:	4651      	mov	r1, sl
 8004188:	00ca      	lsls	r2, r1, #3
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	4603      	mov	r3, r0
 8004190:	4642      	mov	r2, r8
 8004192:	189b      	adds	r3, r3, r2
 8004194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004198:	464b      	mov	r3, r9
 800419a:	460a      	mov	r2, r1
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041bc:	4649      	mov	r1, r9
 80041be:	008b      	lsls	r3, r1, #2
 80041c0:	4641      	mov	r1, r8
 80041c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c6:	4641      	mov	r1, r8
 80041c8:	008a      	lsls	r2, r1, #2
 80041ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041ce:	f7fc f85f 	bl	8000290 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	4b38      	ldr	r3, [pc, #224]	; (80042bc <UART_SetConfig+0x4e4>)
 80041da:	fba3 2301 	umull	r2, r3, r3, r1
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2264      	movs	r2, #100	; 0x64
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	1acb      	subs	r3, r1, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a33      	ldr	r2, [pc, #204]	; (80042bc <UART_SetConfig+0x4e4>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f8:	441c      	add	r4, r3
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	673b      	str	r3, [r7, #112]	; 0x70
 8004202:	677a      	str	r2, [r7, #116]	; 0x74
 8004204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	415b      	adcs	r3, r3
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	66bb      	str	r3, [r7, #104]	; 0x68
 800424a:	464b      	mov	r3, r9
 800424c:	460a      	mov	r2, r1
 800424e:	eb42 0303 	adc.w	r3, r2, r3
 8004252:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	663b      	str	r3, [r7, #96]	; 0x60
 800425e:	667a      	str	r2, [r7, #100]	; 0x64
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800426c:	4649      	mov	r1, r9
 800426e:	008b      	lsls	r3, r1, #2
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004276:	4641      	mov	r1, r8
 8004278:	008a      	lsls	r2, r1, #2
 800427a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800427e:	f7fc f807 	bl	8000290 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <UART_SetConfig+0x4e4>)
 8004288:	fba3 1302 	umull	r1, r3, r3, r2
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	2164      	movs	r1, #100	; 0x64
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	3332      	adds	r3, #50	; 0x32
 800429a:	4a08      	ldr	r2, [pc, #32]	; (80042bc <UART_SetConfig+0x4e4>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4422      	add	r2, r4
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042b6:	46bd      	mov	sp, r7
 80042b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042bc:	51eb851f 	.word	0x51eb851f

080042c0 <atoi>:
 80042c0:	220a      	movs	r2, #10
 80042c2:	2100      	movs	r1, #0
 80042c4:	f000 b882 	b.w	80043cc <strtol>

080042c8 <_strtol_l.constprop.0>:
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ce:	d001      	beq.n	80042d4 <_strtol_l.constprop.0+0xc>
 80042d0:	2b24      	cmp	r3, #36	; 0x24
 80042d2:	d906      	bls.n	80042e2 <_strtol_l.constprop.0+0x1a>
 80042d4:	f000 f8ac 	bl	8004430 <__errno>
 80042d8:	2316      	movs	r3, #22
 80042da:	6003      	str	r3, [r0, #0]
 80042dc:	2000      	movs	r0, #0
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80043c8 <_strtol_l.constprop.0+0x100>
 80042e6:	460d      	mov	r5, r1
 80042e8:	462e      	mov	r6, r5
 80042ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80042f2:	f017 0708 	ands.w	r7, r7, #8
 80042f6:	d1f7      	bne.n	80042e8 <_strtol_l.constprop.0+0x20>
 80042f8:	2c2d      	cmp	r4, #45	; 0x2d
 80042fa:	d132      	bne.n	8004362 <_strtol_l.constprop.0+0x9a>
 80042fc:	782c      	ldrb	r4, [r5, #0]
 80042fe:	2701      	movs	r7, #1
 8004300:	1cb5      	adds	r5, r6, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d05b      	beq.n	80043be <_strtol_l.constprop.0+0xf6>
 8004306:	2b10      	cmp	r3, #16
 8004308:	d109      	bne.n	800431e <_strtol_l.constprop.0+0x56>
 800430a:	2c30      	cmp	r4, #48	; 0x30
 800430c:	d107      	bne.n	800431e <_strtol_l.constprop.0+0x56>
 800430e:	782c      	ldrb	r4, [r5, #0]
 8004310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004314:	2c58      	cmp	r4, #88	; 0x58
 8004316:	d14d      	bne.n	80043b4 <_strtol_l.constprop.0+0xec>
 8004318:	786c      	ldrb	r4, [r5, #1]
 800431a:	2310      	movs	r3, #16
 800431c:	3502      	adds	r5, #2
 800431e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004322:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004326:	f04f 0e00 	mov.w	lr, #0
 800432a:	fbb8 f9f3 	udiv	r9, r8, r3
 800432e:	4676      	mov	r6, lr
 8004330:	fb03 8a19 	mls	sl, r3, r9, r8
 8004334:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004338:	f1bc 0f09 	cmp.w	ip, #9
 800433c:	d816      	bhi.n	800436c <_strtol_l.constprop.0+0xa4>
 800433e:	4664      	mov	r4, ip
 8004340:	42a3      	cmp	r3, r4
 8004342:	dd24      	ble.n	800438e <_strtol_l.constprop.0+0xc6>
 8004344:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004348:	d008      	beq.n	800435c <_strtol_l.constprop.0+0x94>
 800434a:	45b1      	cmp	r9, r6
 800434c:	d31c      	bcc.n	8004388 <_strtol_l.constprop.0+0xc0>
 800434e:	d101      	bne.n	8004354 <_strtol_l.constprop.0+0x8c>
 8004350:	45a2      	cmp	sl, r4
 8004352:	db19      	blt.n	8004388 <_strtol_l.constprop.0+0xc0>
 8004354:	fb06 4603 	mla	r6, r6, r3, r4
 8004358:	f04f 0e01 	mov.w	lr, #1
 800435c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004360:	e7e8      	b.n	8004334 <_strtol_l.constprop.0+0x6c>
 8004362:	2c2b      	cmp	r4, #43	; 0x2b
 8004364:	bf04      	itt	eq
 8004366:	782c      	ldrbeq	r4, [r5, #0]
 8004368:	1cb5      	addeq	r5, r6, #2
 800436a:	e7ca      	b.n	8004302 <_strtol_l.constprop.0+0x3a>
 800436c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004370:	f1bc 0f19 	cmp.w	ip, #25
 8004374:	d801      	bhi.n	800437a <_strtol_l.constprop.0+0xb2>
 8004376:	3c37      	subs	r4, #55	; 0x37
 8004378:	e7e2      	b.n	8004340 <_strtol_l.constprop.0+0x78>
 800437a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800437e:	f1bc 0f19 	cmp.w	ip, #25
 8004382:	d804      	bhi.n	800438e <_strtol_l.constprop.0+0xc6>
 8004384:	3c57      	subs	r4, #87	; 0x57
 8004386:	e7db      	b.n	8004340 <_strtol_l.constprop.0+0x78>
 8004388:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800438c:	e7e6      	b.n	800435c <_strtol_l.constprop.0+0x94>
 800438e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004392:	d105      	bne.n	80043a0 <_strtol_l.constprop.0+0xd8>
 8004394:	2322      	movs	r3, #34	; 0x22
 8004396:	6003      	str	r3, [r0, #0]
 8004398:	4646      	mov	r6, r8
 800439a:	b942      	cbnz	r2, 80043ae <_strtol_l.constprop.0+0xe6>
 800439c:	4630      	mov	r0, r6
 800439e:	e79e      	b.n	80042de <_strtol_l.constprop.0+0x16>
 80043a0:	b107      	cbz	r7, 80043a4 <_strtol_l.constprop.0+0xdc>
 80043a2:	4276      	negs	r6, r6
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	d0f9      	beq.n	800439c <_strtol_l.constprop.0+0xd4>
 80043a8:	f1be 0f00 	cmp.w	lr, #0
 80043ac:	d000      	beq.n	80043b0 <_strtol_l.constprop.0+0xe8>
 80043ae:	1e69      	subs	r1, r5, #1
 80043b0:	6011      	str	r1, [r2, #0]
 80043b2:	e7f3      	b.n	800439c <_strtol_l.constprop.0+0xd4>
 80043b4:	2430      	movs	r4, #48	; 0x30
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1b1      	bne.n	800431e <_strtol_l.constprop.0+0x56>
 80043ba:	2308      	movs	r3, #8
 80043bc:	e7af      	b.n	800431e <_strtol_l.constprop.0+0x56>
 80043be:	2c30      	cmp	r4, #48	; 0x30
 80043c0:	d0a5      	beq.n	800430e <_strtol_l.constprop.0+0x46>
 80043c2:	230a      	movs	r3, #10
 80043c4:	e7ab      	b.n	800431e <_strtol_l.constprop.0+0x56>
 80043c6:	bf00      	nop
 80043c8:	08004e45 	.word	0x08004e45

080043cc <strtol>:
 80043cc:	4613      	mov	r3, r2
 80043ce:	460a      	mov	r2, r1
 80043d0:	4601      	mov	r1, r0
 80043d2:	4802      	ldr	r0, [pc, #8]	; (80043dc <strtol+0x10>)
 80043d4:	6800      	ldr	r0, [r0, #0]
 80043d6:	f7ff bf77 	b.w	80042c8 <_strtol_l.constprop.0>
 80043da:	bf00      	nop
 80043dc:	20000084 	.word	0x20000084

080043e0 <siprintf>:
 80043e0:	b40e      	push	{r1, r2, r3}
 80043e2:	b500      	push	{lr}
 80043e4:	b09c      	sub	sp, #112	; 0x70
 80043e6:	ab1d      	add	r3, sp, #116	; 0x74
 80043e8:	9002      	str	r0, [sp, #8]
 80043ea:	9006      	str	r0, [sp, #24]
 80043ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043f0:	4809      	ldr	r0, [pc, #36]	; (8004418 <siprintf+0x38>)
 80043f2:	9107      	str	r1, [sp, #28]
 80043f4:	9104      	str	r1, [sp, #16]
 80043f6:	4909      	ldr	r1, [pc, #36]	; (800441c <siprintf+0x3c>)
 80043f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043fc:	9105      	str	r1, [sp, #20]
 80043fe:	6800      	ldr	r0, [r0, #0]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	a902      	add	r1, sp, #8
 8004404:	f000 f992 	bl	800472c <_svfiprintf_r>
 8004408:	9b02      	ldr	r3, [sp, #8]
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	b01c      	add	sp, #112	; 0x70
 8004410:	f85d eb04 	ldr.w	lr, [sp], #4
 8004414:	b003      	add	sp, #12
 8004416:	4770      	bx	lr
 8004418:	20000084 	.word	0x20000084
 800441c:	ffff0208 	.word	0xffff0208

08004420 <memset>:
 8004420:	4402      	add	r2, r0
 8004422:	4603      	mov	r3, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <__errno>:
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <__errno+0x8>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000084 	.word	0x20000084

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4d0d      	ldr	r5, [pc, #52]	; (8004474 <__libc_init_array+0x38>)
 8004440:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	2600      	movs	r6, #0
 8004448:	42a6      	cmp	r6, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	4d0b      	ldr	r5, [pc, #44]	; (800447c <__libc_init_array+0x40>)
 800444e:	4c0c      	ldr	r4, [pc, #48]	; (8004480 <__libc_init_array+0x44>)
 8004450:	f000 fc6a 	bl	8004d28 <_init>
 8004454:	1b64      	subs	r4, r4, r5
 8004456:	10a4      	asrs	r4, r4, #2
 8004458:	2600      	movs	r6, #0
 800445a:	42a6      	cmp	r6, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f855 3b04 	ldr.w	r3, [r5], #4
 8004464:	4798      	blx	r3
 8004466:	3601      	adds	r6, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f855 3b04 	ldr.w	r3, [r5], #4
 800446e:	4798      	blx	r3
 8004470:	3601      	adds	r6, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	08004f80 	.word	0x08004f80
 8004478:	08004f80 	.word	0x08004f80
 800447c:	08004f80 	.word	0x08004f80
 8004480:	08004f84 	.word	0x08004f84

08004484 <__retarget_lock_acquire_recursive>:
 8004484:	4770      	bx	lr

08004486 <__retarget_lock_release_recursive>:
 8004486:	4770      	bx	lr

08004488 <_free_r>:
 8004488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800448a:	2900      	cmp	r1, #0
 800448c:	d044      	beq.n	8004518 <_free_r+0x90>
 800448e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004492:	9001      	str	r0, [sp, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f1a1 0404 	sub.w	r4, r1, #4
 800449a:	bfb8      	it	lt
 800449c:	18e4      	addlt	r4, r4, r3
 800449e:	f000 f8df 	bl	8004660 <__malloc_lock>
 80044a2:	4a1e      	ldr	r2, [pc, #120]	; (800451c <_free_r+0x94>)
 80044a4:	9801      	ldr	r0, [sp, #4]
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	b933      	cbnz	r3, 80044b8 <_free_r+0x30>
 80044aa:	6063      	str	r3, [r4, #4]
 80044ac:	6014      	str	r4, [r2, #0]
 80044ae:	b003      	add	sp, #12
 80044b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044b4:	f000 b8da 	b.w	800466c <__malloc_unlock>
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	d908      	bls.n	80044ce <_free_r+0x46>
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1961      	adds	r1, r4, r5
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf01      	itttt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	1949      	addeq	r1, r1, r5
 80044ca:	6021      	streq	r1, [r4, #0]
 80044cc:	e7ed      	b.n	80044aa <_free_r+0x22>
 80044ce:	461a      	mov	r2, r3
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	b10b      	cbz	r3, 80044d8 <_free_r+0x50>
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	d9fa      	bls.n	80044ce <_free_r+0x46>
 80044d8:	6811      	ldr	r1, [r2, #0]
 80044da:	1855      	adds	r5, r2, r1
 80044dc:	42a5      	cmp	r5, r4
 80044de:	d10b      	bne.n	80044f8 <_free_r+0x70>
 80044e0:	6824      	ldr	r4, [r4, #0]
 80044e2:	4421      	add	r1, r4
 80044e4:	1854      	adds	r4, r2, r1
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	6011      	str	r1, [r2, #0]
 80044ea:	d1e0      	bne.n	80044ae <_free_r+0x26>
 80044ec:	681c      	ldr	r4, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	6053      	str	r3, [r2, #4]
 80044f2:	440c      	add	r4, r1
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	e7da      	b.n	80044ae <_free_r+0x26>
 80044f8:	d902      	bls.n	8004500 <_free_r+0x78>
 80044fa:	230c      	movs	r3, #12
 80044fc:	6003      	str	r3, [r0, #0]
 80044fe:	e7d6      	b.n	80044ae <_free_r+0x26>
 8004500:	6825      	ldr	r5, [r4, #0]
 8004502:	1961      	adds	r1, r4, r5
 8004504:	428b      	cmp	r3, r1
 8004506:	bf04      	itt	eq
 8004508:	6819      	ldreq	r1, [r3, #0]
 800450a:	685b      	ldreq	r3, [r3, #4]
 800450c:	6063      	str	r3, [r4, #4]
 800450e:	bf04      	itt	eq
 8004510:	1949      	addeq	r1, r1, r5
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	6054      	str	r4, [r2, #4]
 8004516:	e7ca      	b.n	80044ae <_free_r+0x26>
 8004518:	b003      	add	sp, #12
 800451a:	bd30      	pop	{r4, r5, pc}
 800451c:	20000288 	.word	0x20000288

08004520 <sbrk_aligned>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4e0e      	ldr	r6, [pc, #56]	; (800455c <sbrk_aligned+0x3c>)
 8004524:	460c      	mov	r4, r1
 8004526:	6831      	ldr	r1, [r6, #0]
 8004528:	4605      	mov	r5, r0
 800452a:	b911      	cbnz	r1, 8004532 <sbrk_aligned+0x12>
 800452c:	f000 fba6 	bl	8004c7c <_sbrk_r>
 8004530:	6030      	str	r0, [r6, #0]
 8004532:	4621      	mov	r1, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f000 fba1 	bl	8004c7c <_sbrk_r>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	d00a      	beq.n	8004554 <sbrk_aligned+0x34>
 800453e:	1cc4      	adds	r4, r0, #3
 8004540:	f024 0403 	bic.w	r4, r4, #3
 8004544:	42a0      	cmp	r0, r4
 8004546:	d007      	beq.n	8004558 <sbrk_aligned+0x38>
 8004548:	1a21      	subs	r1, r4, r0
 800454a:	4628      	mov	r0, r5
 800454c:	f000 fb96 	bl	8004c7c <_sbrk_r>
 8004550:	3001      	adds	r0, #1
 8004552:	d101      	bne.n	8004558 <sbrk_aligned+0x38>
 8004554:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004558:	4620      	mov	r0, r4
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	2000028c 	.word	0x2000028c

08004560 <_malloc_r>:
 8004560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004564:	1ccd      	adds	r5, r1, #3
 8004566:	f025 0503 	bic.w	r5, r5, #3
 800456a:	3508      	adds	r5, #8
 800456c:	2d0c      	cmp	r5, #12
 800456e:	bf38      	it	cc
 8004570:	250c      	movcc	r5, #12
 8004572:	2d00      	cmp	r5, #0
 8004574:	4607      	mov	r7, r0
 8004576:	db01      	blt.n	800457c <_malloc_r+0x1c>
 8004578:	42a9      	cmp	r1, r5
 800457a:	d905      	bls.n	8004588 <_malloc_r+0x28>
 800457c:	230c      	movs	r3, #12
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	2600      	movs	r6, #0
 8004582:	4630      	mov	r0, r6
 8004584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004588:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800465c <_malloc_r+0xfc>
 800458c:	f000 f868 	bl	8004660 <__malloc_lock>
 8004590:	f8d8 3000 	ldr.w	r3, [r8]
 8004594:	461c      	mov	r4, r3
 8004596:	bb5c      	cbnz	r4, 80045f0 <_malloc_r+0x90>
 8004598:	4629      	mov	r1, r5
 800459a:	4638      	mov	r0, r7
 800459c:	f7ff ffc0 	bl	8004520 <sbrk_aligned>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	4604      	mov	r4, r0
 80045a4:	d155      	bne.n	8004652 <_malloc_r+0xf2>
 80045a6:	f8d8 4000 	ldr.w	r4, [r8]
 80045aa:	4626      	mov	r6, r4
 80045ac:	2e00      	cmp	r6, #0
 80045ae:	d145      	bne.n	800463c <_malloc_r+0xdc>
 80045b0:	2c00      	cmp	r4, #0
 80045b2:	d048      	beq.n	8004646 <_malloc_r+0xe6>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	4631      	mov	r1, r6
 80045b8:	4638      	mov	r0, r7
 80045ba:	eb04 0903 	add.w	r9, r4, r3
 80045be:	f000 fb5d 	bl	8004c7c <_sbrk_r>
 80045c2:	4581      	cmp	r9, r0
 80045c4:	d13f      	bne.n	8004646 <_malloc_r+0xe6>
 80045c6:	6821      	ldr	r1, [r4, #0]
 80045c8:	1a6d      	subs	r5, r5, r1
 80045ca:	4629      	mov	r1, r5
 80045cc:	4638      	mov	r0, r7
 80045ce:	f7ff ffa7 	bl	8004520 <sbrk_aligned>
 80045d2:	3001      	adds	r0, #1
 80045d4:	d037      	beq.n	8004646 <_malloc_r+0xe6>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	442b      	add	r3, r5
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	f8d8 3000 	ldr.w	r3, [r8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d038      	beq.n	8004656 <_malloc_r+0xf6>
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	42a2      	cmp	r2, r4
 80045e8:	d12b      	bne.n	8004642 <_malloc_r+0xe2>
 80045ea:	2200      	movs	r2, #0
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	e00f      	b.n	8004610 <_malloc_r+0xb0>
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	1b52      	subs	r2, r2, r5
 80045f4:	d41f      	bmi.n	8004636 <_malloc_r+0xd6>
 80045f6:	2a0b      	cmp	r2, #11
 80045f8:	d917      	bls.n	800462a <_malloc_r+0xca>
 80045fa:	1961      	adds	r1, r4, r5
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	6025      	str	r5, [r4, #0]
 8004600:	bf18      	it	ne
 8004602:	6059      	strne	r1, [r3, #4]
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	bf08      	it	eq
 8004608:	f8c8 1000 	streq.w	r1, [r8]
 800460c:	5162      	str	r2, [r4, r5]
 800460e:	604b      	str	r3, [r1, #4]
 8004610:	4638      	mov	r0, r7
 8004612:	f104 060b 	add.w	r6, r4, #11
 8004616:	f000 f829 	bl	800466c <__malloc_unlock>
 800461a:	f026 0607 	bic.w	r6, r6, #7
 800461e:	1d23      	adds	r3, r4, #4
 8004620:	1af2      	subs	r2, r6, r3
 8004622:	d0ae      	beq.n	8004582 <_malloc_r+0x22>
 8004624:	1b9b      	subs	r3, r3, r6
 8004626:	50a3      	str	r3, [r4, r2]
 8004628:	e7ab      	b.n	8004582 <_malloc_r+0x22>
 800462a:	42a3      	cmp	r3, r4
 800462c:	6862      	ldr	r2, [r4, #4]
 800462e:	d1dd      	bne.n	80045ec <_malloc_r+0x8c>
 8004630:	f8c8 2000 	str.w	r2, [r8]
 8004634:	e7ec      	b.n	8004610 <_malloc_r+0xb0>
 8004636:	4623      	mov	r3, r4
 8004638:	6864      	ldr	r4, [r4, #4]
 800463a:	e7ac      	b.n	8004596 <_malloc_r+0x36>
 800463c:	4634      	mov	r4, r6
 800463e:	6876      	ldr	r6, [r6, #4]
 8004640:	e7b4      	b.n	80045ac <_malloc_r+0x4c>
 8004642:	4613      	mov	r3, r2
 8004644:	e7cc      	b.n	80045e0 <_malloc_r+0x80>
 8004646:	230c      	movs	r3, #12
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4638      	mov	r0, r7
 800464c:	f000 f80e 	bl	800466c <__malloc_unlock>
 8004650:	e797      	b.n	8004582 <_malloc_r+0x22>
 8004652:	6025      	str	r5, [r4, #0]
 8004654:	e7dc      	b.n	8004610 <_malloc_r+0xb0>
 8004656:	605b      	str	r3, [r3, #4]
 8004658:	deff      	udf	#255	; 0xff
 800465a:	bf00      	nop
 800465c:	20000288 	.word	0x20000288

08004660 <__malloc_lock>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__malloc_lock+0x8>)
 8004662:	f7ff bf0f 	b.w	8004484 <__retarget_lock_acquire_recursive>
 8004666:	bf00      	nop
 8004668:	20000284 	.word	0x20000284

0800466c <__malloc_unlock>:
 800466c:	4801      	ldr	r0, [pc, #4]	; (8004674 <__malloc_unlock+0x8>)
 800466e:	f7ff bf0a 	b.w	8004486 <__retarget_lock_release_recursive>
 8004672:	bf00      	nop
 8004674:	20000284 	.word	0x20000284

08004678 <__ssputs_r>:
 8004678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	688e      	ldr	r6, [r1, #8]
 800467e:	461f      	mov	r7, r3
 8004680:	42be      	cmp	r6, r7
 8004682:	680b      	ldr	r3, [r1, #0]
 8004684:	4682      	mov	sl, r0
 8004686:	460c      	mov	r4, r1
 8004688:	4690      	mov	r8, r2
 800468a:	d82c      	bhi.n	80046e6 <__ssputs_r+0x6e>
 800468c:	898a      	ldrh	r2, [r1, #12]
 800468e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004692:	d026      	beq.n	80046e2 <__ssputs_r+0x6a>
 8004694:	6965      	ldr	r5, [r4, #20]
 8004696:	6909      	ldr	r1, [r1, #16]
 8004698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800469c:	eba3 0901 	sub.w	r9, r3, r1
 80046a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046a4:	1c7b      	adds	r3, r7, #1
 80046a6:	444b      	add	r3, r9
 80046a8:	106d      	asrs	r5, r5, #1
 80046aa:	429d      	cmp	r5, r3
 80046ac:	bf38      	it	cc
 80046ae:	461d      	movcc	r5, r3
 80046b0:	0553      	lsls	r3, r2, #21
 80046b2:	d527      	bpl.n	8004704 <__ssputs_r+0x8c>
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7ff ff53 	bl	8004560 <_malloc_r>
 80046ba:	4606      	mov	r6, r0
 80046bc:	b360      	cbz	r0, 8004718 <__ssputs_r+0xa0>
 80046be:	6921      	ldr	r1, [r4, #16]
 80046c0:	464a      	mov	r2, r9
 80046c2:	f000 faeb 	bl	8004c9c <memcpy>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	6126      	str	r6, [r4, #16]
 80046d4:	6165      	str	r5, [r4, #20]
 80046d6:	444e      	add	r6, r9
 80046d8:	eba5 0509 	sub.w	r5, r5, r9
 80046dc:	6026      	str	r6, [r4, #0]
 80046de:	60a5      	str	r5, [r4, #8]
 80046e0:	463e      	mov	r6, r7
 80046e2:	42be      	cmp	r6, r7
 80046e4:	d900      	bls.n	80046e8 <__ssputs_r+0x70>
 80046e6:	463e      	mov	r6, r7
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	4632      	mov	r2, r6
 80046ec:	4641      	mov	r1, r8
 80046ee:	f000 faab 	bl	8004c48 <memmove>
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	1b9b      	subs	r3, r3, r6
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	4433      	add	r3, r6
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	2000      	movs	r0, #0
 8004700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004704:	462a      	mov	r2, r5
 8004706:	f000 fad7 	bl	8004cb8 <_realloc_r>
 800470a:	4606      	mov	r6, r0
 800470c:	2800      	cmp	r0, #0
 800470e:	d1e0      	bne.n	80046d2 <__ssputs_r+0x5a>
 8004710:	6921      	ldr	r1, [r4, #16]
 8004712:	4650      	mov	r0, sl
 8004714:	f7ff feb8 	bl	8004488 <_free_r>
 8004718:	230c      	movs	r3, #12
 800471a:	f8ca 3000 	str.w	r3, [sl]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004724:	81a3      	strh	r3, [r4, #12]
 8004726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800472a:	e7e9      	b.n	8004700 <__ssputs_r+0x88>

0800472c <_svfiprintf_r>:
 800472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	4698      	mov	r8, r3
 8004732:	898b      	ldrh	r3, [r1, #12]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	b09d      	sub	sp, #116	; 0x74
 8004738:	4607      	mov	r7, r0
 800473a:	460d      	mov	r5, r1
 800473c:	4614      	mov	r4, r2
 800473e:	d50e      	bpl.n	800475e <_svfiprintf_r+0x32>
 8004740:	690b      	ldr	r3, [r1, #16]
 8004742:	b963      	cbnz	r3, 800475e <_svfiprintf_r+0x32>
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	f7ff ff0b 	bl	8004560 <_malloc_r>
 800474a:	6028      	str	r0, [r5, #0]
 800474c:	6128      	str	r0, [r5, #16]
 800474e:	b920      	cbnz	r0, 800475a <_svfiprintf_r+0x2e>
 8004750:	230c      	movs	r3, #12
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004758:	e0d0      	b.n	80048fc <_svfiprintf_r+0x1d0>
 800475a:	2340      	movs	r3, #64	; 0x40
 800475c:	616b      	str	r3, [r5, #20]
 800475e:	2300      	movs	r3, #0
 8004760:	9309      	str	r3, [sp, #36]	; 0x24
 8004762:	2320      	movs	r3, #32
 8004764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004768:	f8cd 800c 	str.w	r8, [sp, #12]
 800476c:	2330      	movs	r3, #48	; 0x30
 800476e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004914 <_svfiprintf_r+0x1e8>
 8004772:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004776:	f04f 0901 	mov.w	r9, #1
 800477a:	4623      	mov	r3, r4
 800477c:	469a      	mov	sl, r3
 800477e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004782:	b10a      	cbz	r2, 8004788 <_svfiprintf_r+0x5c>
 8004784:	2a25      	cmp	r2, #37	; 0x25
 8004786:	d1f9      	bne.n	800477c <_svfiprintf_r+0x50>
 8004788:	ebba 0b04 	subs.w	fp, sl, r4
 800478c:	d00b      	beq.n	80047a6 <_svfiprintf_r+0x7a>
 800478e:	465b      	mov	r3, fp
 8004790:	4622      	mov	r2, r4
 8004792:	4629      	mov	r1, r5
 8004794:	4638      	mov	r0, r7
 8004796:	f7ff ff6f 	bl	8004678 <__ssputs_r>
 800479a:	3001      	adds	r0, #1
 800479c:	f000 80a9 	beq.w	80048f2 <_svfiprintf_r+0x1c6>
 80047a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a2:	445a      	add	r2, fp
 80047a4:	9209      	str	r2, [sp, #36]	; 0x24
 80047a6:	f89a 3000 	ldrb.w	r3, [sl]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a1 	beq.w	80048f2 <_svfiprintf_r+0x1c6>
 80047b0:	2300      	movs	r3, #0
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ba:	f10a 0a01 	add.w	sl, sl, #1
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	9307      	str	r3, [sp, #28]
 80047c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047c6:	931a      	str	r3, [sp, #104]	; 0x68
 80047c8:	4654      	mov	r4, sl
 80047ca:	2205      	movs	r2, #5
 80047cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d0:	4850      	ldr	r0, [pc, #320]	; (8004914 <_svfiprintf_r+0x1e8>)
 80047d2:	f7fb fd0d 	bl	80001f0 <memchr>
 80047d6:	9a04      	ldr	r2, [sp, #16]
 80047d8:	b9d8      	cbnz	r0, 8004812 <_svfiprintf_r+0xe6>
 80047da:	06d0      	lsls	r0, r2, #27
 80047dc:	bf44      	itt	mi
 80047de:	2320      	movmi	r3, #32
 80047e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e4:	0711      	lsls	r1, r2, #28
 80047e6:	bf44      	itt	mi
 80047e8:	232b      	movmi	r3, #43	; 0x2b
 80047ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ee:	f89a 3000 	ldrb.w	r3, [sl]
 80047f2:	2b2a      	cmp	r3, #42	; 0x2a
 80047f4:	d015      	beq.n	8004822 <_svfiprintf_r+0xf6>
 80047f6:	9a07      	ldr	r2, [sp, #28]
 80047f8:	4654      	mov	r4, sl
 80047fa:	2000      	movs	r0, #0
 80047fc:	f04f 0c0a 	mov.w	ip, #10
 8004800:	4621      	mov	r1, r4
 8004802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004806:	3b30      	subs	r3, #48	; 0x30
 8004808:	2b09      	cmp	r3, #9
 800480a:	d94d      	bls.n	80048a8 <_svfiprintf_r+0x17c>
 800480c:	b1b0      	cbz	r0, 800483c <_svfiprintf_r+0x110>
 800480e:	9207      	str	r2, [sp, #28]
 8004810:	e014      	b.n	800483c <_svfiprintf_r+0x110>
 8004812:	eba0 0308 	sub.w	r3, r0, r8
 8004816:	fa09 f303 	lsl.w	r3, r9, r3
 800481a:	4313      	orrs	r3, r2
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	46a2      	mov	sl, r4
 8004820:	e7d2      	b.n	80047c8 <_svfiprintf_r+0x9c>
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	1d19      	adds	r1, r3, #4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	9103      	str	r1, [sp, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	bfbb      	ittet	lt
 800482e:	425b      	neglt	r3, r3
 8004830:	f042 0202 	orrlt.w	r2, r2, #2
 8004834:	9307      	strge	r3, [sp, #28]
 8004836:	9307      	strlt	r3, [sp, #28]
 8004838:	bfb8      	it	lt
 800483a:	9204      	strlt	r2, [sp, #16]
 800483c:	7823      	ldrb	r3, [r4, #0]
 800483e:	2b2e      	cmp	r3, #46	; 0x2e
 8004840:	d10c      	bne.n	800485c <_svfiprintf_r+0x130>
 8004842:	7863      	ldrb	r3, [r4, #1]
 8004844:	2b2a      	cmp	r3, #42	; 0x2a
 8004846:	d134      	bne.n	80048b2 <_svfiprintf_r+0x186>
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	9203      	str	r2, [sp, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	bfb8      	it	lt
 8004854:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004858:	3402      	adds	r4, #2
 800485a:	9305      	str	r3, [sp, #20]
 800485c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004924 <_svfiprintf_r+0x1f8>
 8004860:	7821      	ldrb	r1, [r4, #0]
 8004862:	2203      	movs	r2, #3
 8004864:	4650      	mov	r0, sl
 8004866:	f7fb fcc3 	bl	80001f0 <memchr>
 800486a:	b138      	cbz	r0, 800487c <_svfiprintf_r+0x150>
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	eba0 000a 	sub.w	r0, r0, sl
 8004872:	2240      	movs	r2, #64	; 0x40
 8004874:	4082      	lsls	r2, r0
 8004876:	4313      	orrs	r3, r2
 8004878:	3401      	adds	r4, #1
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004880:	4825      	ldr	r0, [pc, #148]	; (8004918 <_svfiprintf_r+0x1ec>)
 8004882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004886:	2206      	movs	r2, #6
 8004888:	f7fb fcb2 	bl	80001f0 <memchr>
 800488c:	2800      	cmp	r0, #0
 800488e:	d038      	beq.n	8004902 <_svfiprintf_r+0x1d6>
 8004890:	4b22      	ldr	r3, [pc, #136]	; (800491c <_svfiprintf_r+0x1f0>)
 8004892:	bb1b      	cbnz	r3, 80048dc <_svfiprintf_r+0x1b0>
 8004894:	9b03      	ldr	r3, [sp, #12]
 8004896:	3307      	adds	r3, #7
 8004898:	f023 0307 	bic.w	r3, r3, #7
 800489c:	3308      	adds	r3, #8
 800489e:	9303      	str	r3, [sp, #12]
 80048a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a2:	4433      	add	r3, r6
 80048a4:	9309      	str	r3, [sp, #36]	; 0x24
 80048a6:	e768      	b.n	800477a <_svfiprintf_r+0x4e>
 80048a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ac:	460c      	mov	r4, r1
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7a6      	b.n	8004800 <_svfiprintf_r+0xd4>
 80048b2:	2300      	movs	r3, #0
 80048b4:	3401      	adds	r4, #1
 80048b6:	9305      	str	r3, [sp, #20]
 80048b8:	4619      	mov	r1, r3
 80048ba:	f04f 0c0a 	mov.w	ip, #10
 80048be:	4620      	mov	r0, r4
 80048c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048c4:	3a30      	subs	r2, #48	; 0x30
 80048c6:	2a09      	cmp	r2, #9
 80048c8:	d903      	bls.n	80048d2 <_svfiprintf_r+0x1a6>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0c6      	beq.n	800485c <_svfiprintf_r+0x130>
 80048ce:	9105      	str	r1, [sp, #20]
 80048d0:	e7c4      	b.n	800485c <_svfiprintf_r+0x130>
 80048d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80048d6:	4604      	mov	r4, r0
 80048d8:	2301      	movs	r3, #1
 80048da:	e7f0      	b.n	80048be <_svfiprintf_r+0x192>
 80048dc:	ab03      	add	r3, sp, #12
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	462a      	mov	r2, r5
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <_svfiprintf_r+0x1f4>)
 80048e4:	a904      	add	r1, sp, #16
 80048e6:	4638      	mov	r0, r7
 80048e8:	f3af 8000 	nop.w
 80048ec:	1c42      	adds	r2, r0, #1
 80048ee:	4606      	mov	r6, r0
 80048f0:	d1d6      	bne.n	80048a0 <_svfiprintf_r+0x174>
 80048f2:	89ab      	ldrh	r3, [r5, #12]
 80048f4:	065b      	lsls	r3, r3, #25
 80048f6:	f53f af2d 	bmi.w	8004754 <_svfiprintf_r+0x28>
 80048fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048fc:	b01d      	add	sp, #116	; 0x74
 80048fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004902:	ab03      	add	r3, sp, #12
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	462a      	mov	r2, r5
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <_svfiprintf_r+0x1f4>)
 800490a:	a904      	add	r1, sp, #16
 800490c:	4638      	mov	r0, r7
 800490e:	f000 f879 	bl	8004a04 <_printf_i>
 8004912:	e7eb      	b.n	80048ec <_svfiprintf_r+0x1c0>
 8004914:	08004f45 	.word	0x08004f45
 8004918:	08004f4f 	.word	0x08004f4f
 800491c:	00000000 	.word	0x00000000
 8004920:	08004679 	.word	0x08004679
 8004924:	08004f4b 	.word	0x08004f4b

08004928 <_printf_common>:
 8004928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	4616      	mov	r6, r2
 800492e:	4699      	mov	r9, r3
 8004930:	688a      	ldr	r2, [r1, #8]
 8004932:	690b      	ldr	r3, [r1, #16]
 8004934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004938:	4293      	cmp	r3, r2
 800493a:	bfb8      	it	lt
 800493c:	4613      	movlt	r3, r2
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004944:	4607      	mov	r7, r0
 8004946:	460c      	mov	r4, r1
 8004948:	b10a      	cbz	r2, 800494e <_printf_common+0x26>
 800494a:	3301      	adds	r3, #1
 800494c:	6033      	str	r3, [r6, #0]
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	0699      	lsls	r1, r3, #26
 8004952:	bf42      	ittt	mi
 8004954:	6833      	ldrmi	r3, [r6, #0]
 8004956:	3302      	addmi	r3, #2
 8004958:	6033      	strmi	r3, [r6, #0]
 800495a:	6825      	ldr	r5, [r4, #0]
 800495c:	f015 0506 	ands.w	r5, r5, #6
 8004960:	d106      	bne.n	8004970 <_printf_common+0x48>
 8004962:	f104 0a19 	add.w	sl, r4, #25
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	6832      	ldr	r2, [r6, #0]
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	42ab      	cmp	r3, r5
 800496e:	dc26      	bgt.n	80049be <_printf_common+0x96>
 8004970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004974:	1e13      	subs	r3, r2, #0
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	bf18      	it	ne
 800497a:	2301      	movne	r3, #1
 800497c:	0692      	lsls	r2, r2, #26
 800497e:	d42b      	bmi.n	80049d8 <_printf_common+0xb0>
 8004980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004984:	4649      	mov	r1, r9
 8004986:	4638      	mov	r0, r7
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d01e      	beq.n	80049cc <_printf_common+0xa4>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	6922      	ldr	r2, [r4, #16]
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	2b04      	cmp	r3, #4
 8004998:	bf02      	ittt	eq
 800499a:	68e5      	ldreq	r5, [r4, #12]
 800499c:	6833      	ldreq	r3, [r6, #0]
 800499e:	1aed      	subeq	r5, r5, r3
 80049a0:	68a3      	ldr	r3, [r4, #8]
 80049a2:	bf0c      	ite	eq
 80049a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049a8:	2500      	movne	r5, #0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bfc4      	itt	gt
 80049ae:	1a9b      	subgt	r3, r3, r2
 80049b0:	18ed      	addgt	r5, r5, r3
 80049b2:	2600      	movs	r6, #0
 80049b4:	341a      	adds	r4, #26
 80049b6:	42b5      	cmp	r5, r6
 80049b8:	d11a      	bne.n	80049f0 <_printf_common+0xc8>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e008      	b.n	80049d0 <_printf_common+0xa8>
 80049be:	2301      	movs	r3, #1
 80049c0:	4652      	mov	r2, sl
 80049c2:	4649      	mov	r1, r9
 80049c4:	4638      	mov	r0, r7
 80049c6:	47c0      	blx	r8
 80049c8:	3001      	adds	r0, #1
 80049ca:	d103      	bne.n	80049d4 <_printf_common+0xac>
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	3501      	adds	r5, #1
 80049d6:	e7c6      	b.n	8004966 <_printf_common+0x3e>
 80049d8:	18e1      	adds	r1, r4, r3
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	2030      	movs	r0, #48	; 0x30
 80049de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049e2:	4422      	add	r2, r4
 80049e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ec:	3302      	adds	r3, #2
 80049ee:	e7c7      	b.n	8004980 <_printf_common+0x58>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4622      	mov	r2, r4
 80049f4:	4649      	mov	r1, r9
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	3001      	adds	r0, #1
 80049fc:	d0e6      	beq.n	80049cc <_printf_common+0xa4>
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7d9      	b.n	80049b6 <_printf_common+0x8e>
	...

08004a04 <_printf_i>:
 8004a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	7e0f      	ldrb	r7, [r1, #24]
 8004a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a0c:	2f78      	cmp	r7, #120	; 0x78
 8004a0e:	4691      	mov	r9, r2
 8004a10:	4680      	mov	r8, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	469a      	mov	sl, r3
 8004a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a1a:	d807      	bhi.n	8004a2c <_printf_i+0x28>
 8004a1c:	2f62      	cmp	r7, #98	; 0x62
 8004a1e:	d80a      	bhi.n	8004a36 <_printf_i+0x32>
 8004a20:	2f00      	cmp	r7, #0
 8004a22:	f000 80d4 	beq.w	8004bce <_printf_i+0x1ca>
 8004a26:	2f58      	cmp	r7, #88	; 0x58
 8004a28:	f000 80c0 	beq.w	8004bac <_printf_i+0x1a8>
 8004a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a34:	e03a      	b.n	8004aac <_printf_i+0xa8>
 8004a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a3a:	2b15      	cmp	r3, #21
 8004a3c:	d8f6      	bhi.n	8004a2c <_printf_i+0x28>
 8004a3e:	a101      	add	r1, pc, #4	; (adr r1, 8004a44 <_printf_i+0x40>)
 8004a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004ab1 	.word	0x08004ab1
 8004a4c:	08004a2d 	.word	0x08004a2d
 8004a50:	08004a2d 	.word	0x08004a2d
 8004a54:	08004a2d 	.word	0x08004a2d
 8004a58:	08004a2d 	.word	0x08004a2d
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	08004a2d 	.word	0x08004a2d
 8004a64:	08004a2d 	.word	0x08004a2d
 8004a68:	08004a2d 	.word	0x08004a2d
 8004a6c:	08004a2d 	.word	0x08004a2d
 8004a70:	08004bb5 	.word	0x08004bb5
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004b6f 	.word	0x08004b6f
 8004a7c:	08004a2d 	.word	0x08004a2d
 8004a80:	08004a2d 	.word	0x08004a2d
 8004a84:	08004bd7 	.word	0x08004bd7
 8004a88:	08004a2d 	.word	0x08004a2d
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004a2d 	.word	0x08004a2d
 8004a94:	08004a2d 	.word	0x08004a2d
 8004a98:	08004b77 	.word	0x08004b77
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	602a      	str	r2, [r5, #0]
 8004aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aac:	2301      	movs	r3, #1
 8004aae:	e09f      	b.n	8004bf0 <_printf_i+0x1ec>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	0607      	lsls	r7, r0, #24
 8004ab6:	f103 0104 	add.w	r1, r3, #4
 8004aba:	6029      	str	r1, [r5, #0]
 8004abc:	d501      	bpl.n	8004ac2 <_printf_i+0xbe>
 8004abe:	681e      	ldr	r6, [r3, #0]
 8004ac0:	e003      	b.n	8004aca <_printf_i+0xc6>
 8004ac2:	0646      	lsls	r6, r0, #25
 8004ac4:	d5fb      	bpl.n	8004abe <_printf_i+0xba>
 8004ac6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004aca:	2e00      	cmp	r6, #0
 8004acc:	da03      	bge.n	8004ad6 <_printf_i+0xd2>
 8004ace:	232d      	movs	r3, #45	; 0x2d
 8004ad0:	4276      	negs	r6, r6
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad6:	485a      	ldr	r0, [pc, #360]	; (8004c40 <_printf_i+0x23c>)
 8004ad8:	230a      	movs	r3, #10
 8004ada:	e012      	b.n	8004b02 <_printf_i+0xfe>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	6820      	ldr	r0, [r4, #0]
 8004ae0:	1d19      	adds	r1, r3, #4
 8004ae2:	6029      	str	r1, [r5, #0]
 8004ae4:	0605      	lsls	r5, r0, #24
 8004ae6:	d501      	bpl.n	8004aec <_printf_i+0xe8>
 8004ae8:	681e      	ldr	r6, [r3, #0]
 8004aea:	e002      	b.n	8004af2 <_printf_i+0xee>
 8004aec:	0641      	lsls	r1, r0, #25
 8004aee:	d5fb      	bpl.n	8004ae8 <_printf_i+0xe4>
 8004af0:	881e      	ldrh	r6, [r3, #0]
 8004af2:	4853      	ldr	r0, [pc, #332]	; (8004c40 <_printf_i+0x23c>)
 8004af4:	2f6f      	cmp	r7, #111	; 0x6f
 8004af6:	bf0c      	ite	eq
 8004af8:	2308      	moveq	r3, #8
 8004afa:	230a      	movne	r3, #10
 8004afc:	2100      	movs	r1, #0
 8004afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b02:	6865      	ldr	r5, [r4, #4]
 8004b04:	60a5      	str	r5, [r4, #8]
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	bfa2      	ittt	ge
 8004b0a:	6821      	ldrge	r1, [r4, #0]
 8004b0c:	f021 0104 	bicge.w	r1, r1, #4
 8004b10:	6021      	strge	r1, [r4, #0]
 8004b12:	b90e      	cbnz	r6, 8004b18 <_printf_i+0x114>
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	d04b      	beq.n	8004bb0 <_printf_i+0x1ac>
 8004b18:	4615      	mov	r5, r2
 8004b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004b22:	5dc7      	ldrb	r7, [r0, r7]
 8004b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b28:	4637      	mov	r7, r6
 8004b2a:	42bb      	cmp	r3, r7
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	d9f4      	bls.n	8004b1a <_printf_i+0x116>
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d10b      	bne.n	8004b4c <_printf_i+0x148>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	07de      	lsls	r6, r3, #31
 8004b38:	d508      	bpl.n	8004b4c <_printf_i+0x148>
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	6861      	ldr	r1, [r4, #4]
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	bfde      	ittt	le
 8004b42:	2330      	movle	r3, #48	; 0x30
 8004b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b4c:	1b52      	subs	r2, r2, r5
 8004b4e:	6122      	str	r2, [r4, #16]
 8004b50:	f8cd a000 	str.w	sl, [sp]
 8004b54:	464b      	mov	r3, r9
 8004b56:	aa03      	add	r2, sp, #12
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	f7ff fee4 	bl	8004928 <_printf_common>
 8004b60:	3001      	adds	r0, #1
 8004b62:	d14a      	bne.n	8004bfa <_printf_i+0x1f6>
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b68:	b004      	add	sp, #16
 8004b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	f043 0320 	orr.w	r3, r3, #32
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	4833      	ldr	r0, [pc, #204]	; (8004c44 <_printf_i+0x240>)
 8004b78:	2778      	movs	r7, #120	; 0x78
 8004b7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	6829      	ldr	r1, [r5, #0]
 8004b82:	061f      	lsls	r7, r3, #24
 8004b84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b88:	d402      	bmi.n	8004b90 <_printf_i+0x18c>
 8004b8a:	065f      	lsls	r7, r3, #25
 8004b8c:	bf48      	it	mi
 8004b8e:	b2b6      	uxthmi	r6, r6
 8004b90:	07df      	lsls	r7, r3, #31
 8004b92:	bf48      	it	mi
 8004b94:	f043 0320 	orrmi.w	r3, r3, #32
 8004b98:	6029      	str	r1, [r5, #0]
 8004b9a:	bf48      	it	mi
 8004b9c:	6023      	strmi	r3, [r4, #0]
 8004b9e:	b91e      	cbnz	r6, 8004ba8 <_printf_i+0x1a4>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f023 0320 	bic.w	r3, r3, #32
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	2310      	movs	r3, #16
 8004baa:	e7a7      	b.n	8004afc <_printf_i+0xf8>
 8004bac:	4824      	ldr	r0, [pc, #144]	; (8004c40 <_printf_i+0x23c>)
 8004bae:	e7e4      	b.n	8004b7a <_printf_i+0x176>
 8004bb0:	4615      	mov	r5, r2
 8004bb2:	e7bd      	b.n	8004b30 <_printf_i+0x12c>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	6826      	ldr	r6, [r4, #0]
 8004bb8:	6961      	ldr	r1, [r4, #20]
 8004bba:	1d18      	adds	r0, r3, #4
 8004bbc:	6028      	str	r0, [r5, #0]
 8004bbe:	0635      	lsls	r5, r6, #24
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_i+0x1c4>
 8004bc4:	6019      	str	r1, [r3, #0]
 8004bc6:	e002      	b.n	8004bce <_printf_i+0x1ca>
 8004bc8:	0670      	lsls	r0, r6, #25
 8004bca:	d5fb      	bpl.n	8004bc4 <_printf_i+0x1c0>
 8004bcc:	8019      	strh	r1, [r3, #0]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6123      	str	r3, [r4, #16]
 8004bd2:	4615      	mov	r5, r2
 8004bd4:	e7bc      	b.n	8004b50 <_printf_i+0x14c>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	1d1a      	adds	r2, r3, #4
 8004bda:	602a      	str	r2, [r5, #0]
 8004bdc:	681d      	ldr	r5, [r3, #0]
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4628      	mov	r0, r5
 8004be4:	f7fb fb04 	bl	80001f0 <memchr>
 8004be8:	b108      	cbz	r0, 8004bee <_printf_i+0x1ea>
 8004bea:	1b40      	subs	r0, r0, r5
 8004bec:	6060      	str	r0, [r4, #4]
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf8:	e7aa      	b.n	8004b50 <_printf_i+0x14c>
 8004bfa:	6923      	ldr	r3, [r4, #16]
 8004bfc:	462a      	mov	r2, r5
 8004bfe:	4649      	mov	r1, r9
 8004c00:	4640      	mov	r0, r8
 8004c02:	47d0      	blx	sl
 8004c04:	3001      	adds	r0, #1
 8004c06:	d0ad      	beq.n	8004b64 <_printf_i+0x160>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	079b      	lsls	r3, r3, #30
 8004c0c:	d413      	bmi.n	8004c36 <_printf_i+0x232>
 8004c0e:	68e0      	ldr	r0, [r4, #12]
 8004c10:	9b03      	ldr	r3, [sp, #12]
 8004c12:	4298      	cmp	r0, r3
 8004c14:	bfb8      	it	lt
 8004c16:	4618      	movlt	r0, r3
 8004c18:	e7a6      	b.n	8004b68 <_printf_i+0x164>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4632      	mov	r2, r6
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4640      	mov	r0, r8
 8004c22:	47d0      	blx	sl
 8004c24:	3001      	adds	r0, #1
 8004c26:	d09d      	beq.n	8004b64 <_printf_i+0x160>
 8004c28:	3501      	adds	r5, #1
 8004c2a:	68e3      	ldr	r3, [r4, #12]
 8004c2c:	9903      	ldr	r1, [sp, #12]
 8004c2e:	1a5b      	subs	r3, r3, r1
 8004c30:	42ab      	cmp	r3, r5
 8004c32:	dcf2      	bgt.n	8004c1a <_printf_i+0x216>
 8004c34:	e7eb      	b.n	8004c0e <_printf_i+0x20a>
 8004c36:	2500      	movs	r5, #0
 8004c38:	f104 0619 	add.w	r6, r4, #25
 8004c3c:	e7f5      	b.n	8004c2a <_printf_i+0x226>
 8004c3e:	bf00      	nop
 8004c40:	08004f56 	.word	0x08004f56
 8004c44:	08004f67 	.word	0x08004f67

08004c48 <memmove>:
 8004c48:	4288      	cmp	r0, r1
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	eb01 0402 	add.w	r4, r1, r2
 8004c50:	d902      	bls.n	8004c58 <memmove+0x10>
 8004c52:	4284      	cmp	r4, r0
 8004c54:	4623      	mov	r3, r4
 8004c56:	d807      	bhi.n	8004c68 <memmove+0x20>
 8004c58:	1e43      	subs	r3, r0, #1
 8004c5a:	42a1      	cmp	r1, r4
 8004c5c:	d008      	beq.n	8004c70 <memmove+0x28>
 8004c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c66:	e7f8      	b.n	8004c5a <memmove+0x12>
 8004c68:	4402      	add	r2, r0
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	428a      	cmp	r2, r1
 8004c6e:	d100      	bne.n	8004c72 <memmove+0x2a>
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c7a:	e7f7      	b.n	8004c6c <memmove+0x24>

08004c7c <_sbrk_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d06      	ldr	r5, [pc, #24]	; (8004c98 <_sbrk_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fc fa02 	bl	8001090 <_sbrk>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_sbrk_r+0x1a>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_sbrk_r+0x1a>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	20000280 	.word	0x20000280

08004c9c <memcpy>:
 8004c9c:	440a      	add	r2, r1
 8004c9e:	4291      	cmp	r1, r2
 8004ca0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004ca4:	d100      	bne.n	8004ca8 <memcpy+0xc>
 8004ca6:	4770      	bx	lr
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	d1f9      	bne.n	8004caa <memcpy+0xe>
 8004cb6:	bd10      	pop	{r4, pc}

08004cb8 <_realloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	b921      	cbnz	r1, 8004cce <_realloc_r+0x16>
 8004cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	4611      	mov	r1, r2
 8004cca:	f7ff bc49 	b.w	8004560 <_malloc_r>
 8004cce:	b92a      	cbnz	r2, 8004cdc <_realloc_r+0x24>
 8004cd0:	f7ff fbda 	bl	8004488 <_free_r>
 8004cd4:	4625      	mov	r5, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	f000 f81b 	bl	8004d16 <_malloc_usable_size_r>
 8004ce0:	4284      	cmp	r4, r0
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	d802      	bhi.n	8004cec <_realloc_r+0x34>
 8004ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cea:	d812      	bhi.n	8004d12 <_realloc_r+0x5a>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7ff fc36 	bl	8004560 <_malloc_r>
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d0ed      	beq.n	8004cd6 <_realloc_r+0x1e>
 8004cfa:	42bc      	cmp	r4, r7
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	4631      	mov	r1, r6
 8004d00:	bf28      	it	cs
 8004d02:	463a      	movcs	r2, r7
 8004d04:	f7ff ffca 	bl	8004c9c <memcpy>
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	f7ff fbbc 	bl	8004488 <_free_r>
 8004d10:	e7e1      	b.n	8004cd6 <_realloc_r+0x1e>
 8004d12:	4635      	mov	r5, r6
 8004d14:	e7df      	b.n	8004cd6 <_realloc_r+0x1e>

08004d16 <_malloc_usable_size_r>:
 8004d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1a:	1f18      	subs	r0, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bfbc      	itt	lt
 8004d20:	580b      	ldrlt	r3, [r1, r0]
 8004d22:	18c0      	addlt	r0, r0, r3
 8004d24:	4770      	bx	lr
	...

08004d28 <_init>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr

08004d34 <_fini>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr
