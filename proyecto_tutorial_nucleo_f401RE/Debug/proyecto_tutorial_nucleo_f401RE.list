
proyecto_tutorial_nucleo_f401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009378  08009378  00019378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d8  080097d8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097e0  080097e0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e4  080097e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080097e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001d8  080099c0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080099c0  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd9c  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e61  00000000  00000000  0002cfe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0002ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a05  00000000  00000000  0002fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000172ca  00000000  00000000  0003051d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e385  00000000  00000000  000477e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ef41  00000000  00000000  00055b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b18  00000000  00000000  000e4ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e95c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800935c 	.word	0x0800935c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800935c 	.word	0x0800935c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fmul>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d06f      	beq.n	8000fac <__aeabi_fmul+0xf8>
 8000ecc:	441a      	add	r2, r3
 8000ece:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	bf18      	it	ne
 8000ed6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eda:	d01e      	beq.n	8000f1a <__aeabi_fmul+0x66>
 8000edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ee0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ee4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ee8:	fba0 3101 	umull	r3, r1, r0, r1
 8000eec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ef4:	bf3e      	ittt	cc
 8000ef6:	0049      	lslcc	r1, r1, #1
 8000ef8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	ea40 0001 	orr.w	r0, r0, r1
 8000f02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f06:	2afd      	cmp	r2, #253	; 0xfd
 8000f08:	d81d      	bhi.n	8000f46 <__aeabi_fmul+0x92>
 8000f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f12:	bf08      	it	eq
 8000f14:	f020 0001 	biceq.w	r0, r0, #1
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	0249      	lsleq	r1, r1, #9
 8000f26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f2e:	3a7f      	subs	r2, #127	; 0x7f
 8000f30:	bfc2      	ittt	gt
 8000f32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f3a:	4770      	bxgt	lr
 8000f3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	3a01      	subs	r2, #1
 8000f46:	dc5d      	bgt.n	8001004 <__aeabi_fmul+0x150>
 8000f48:	f112 0f19 	cmn.w	r2, #25
 8000f4c:	bfdc      	itt	le
 8000f4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f52:	4770      	bxle	lr
 8000f54:	f1c2 0200 	rsb	r2, r2, #0
 8000f58:	0041      	lsls	r1, r0, #1
 8000f5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f5e:	f1c2 0220 	rsb	r2, r2, #32
 8000f62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f6a:	f140 0000 	adc.w	r0, r0, #0
 8000f6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f72:	bf08      	it	eq
 8000f74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f78:	4770      	bx	lr
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fmul+0xce>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fmul+0xe6>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e78f      	b.n	8000ecc <__aeabi_fmul+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	bf18      	it	ne
 8000fb6:	ea93 0f0c 	teqne	r3, ip
 8000fba:	d00a      	beq.n	8000fd2 <__aeabi_fmul+0x11e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1d8      	bne.n	8000f7a <__aeabi_fmul+0xc6>
 8000fc8:	ea80 0001 	eor.w	r0, r0, r1
 8000fcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fd0:	4770      	bx	lr
 8000fd2:	f090 0f00 	teq	r0, #0
 8000fd6:	bf17      	itett	ne
 8000fd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fdc:	4608      	moveq	r0, r1
 8000fde:	f091 0f00 	teqne	r1, #0
 8000fe2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000fe6:	d014      	beq.n	8001012 <__aeabi_fmul+0x15e>
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_fmul+0x13e>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d10f      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8000ff2:	ea93 0f0c 	teq	r3, ip
 8000ff6:	d103      	bne.n	8001000 <__aeabi_fmul+0x14c>
 8000ff8:	024b      	lsls	r3, r1, #9
 8000ffa:	bf18      	it	ne
 8000ffc:	4608      	movne	r0, r1
 8000ffe:	d108      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8001000:	ea80 0001 	eor.w	r0, r0, r1
 8001004:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001008:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800100c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001010:	4770      	bx	lr
 8001012:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001016:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800101a:	4770      	bx	lr

0800101c <__aeabi_fdiv>:
 800101c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001020:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001024:	bf1e      	ittt	ne
 8001026:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800102a:	ea92 0f0c 	teqne	r2, ip
 800102e:	ea93 0f0c 	teqne	r3, ip
 8001032:	d069      	beq.n	8001108 <__aeabi_fdiv+0xec>
 8001034:	eba2 0203 	sub.w	r2, r2, r3
 8001038:	ea80 0c01 	eor.w	ip, r0, r1
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001042:	d037      	beq.n	80010b4 <__aeabi_fdiv+0x98>
 8001044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001048:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800104c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001050:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001054:	428b      	cmp	r3, r1
 8001056:	bf38      	it	cc
 8001058:	005b      	lslcc	r3, r3, #1
 800105a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800105e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001062:	428b      	cmp	r3, r1
 8001064:	bf24      	itt	cs
 8001066:	1a5b      	subcs	r3, r3, r1
 8001068:	ea40 000c 	orrcs.w	r0, r0, ip
 800106c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001070:	bf24      	itt	cs
 8001072:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001076:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800107a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800107e:	bf24      	itt	cs
 8001080:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001084:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001088:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800108c:	bf24      	itt	cs
 800108e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001092:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	bf18      	it	ne
 800109a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800109e:	d1e0      	bne.n	8001062 <__aeabi_fdiv+0x46>
 80010a0:	2afd      	cmp	r2, #253	; 0xfd
 80010a2:	f63f af50 	bhi.w	8000f46 <__aeabi_fmul+0x92>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010ac:	bf08      	it	eq
 80010ae:	f020 0001 	biceq.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010bc:	327f      	adds	r2, #127	; 0x7f
 80010be:	bfc2      	ittt	gt
 80010c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010c8:	4770      	bxgt	lr
 80010ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	3a01      	subs	r2, #1
 80010d4:	e737      	b.n	8000f46 <__aeabi_fmul+0x92>
 80010d6:	f092 0f00 	teq	r2, #0
 80010da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010de:	bf02      	ittt	eq
 80010e0:	0040      	lsleq	r0, r0, #1
 80010e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010e6:	3a01      	subeq	r2, #1
 80010e8:	d0f9      	beq.n	80010de <__aeabi_fdiv+0xc2>
 80010ea:	ea40 000c 	orr.w	r0, r0, ip
 80010ee:	f093 0f00 	teq	r3, #0
 80010f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010f6:	bf02      	ittt	eq
 80010f8:	0049      	lsleq	r1, r1, #1
 80010fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010fe:	3b01      	subeq	r3, #1
 8001100:	d0f9      	beq.n	80010f6 <__aeabi_fdiv+0xda>
 8001102:	ea41 010c 	orr.w	r1, r1, ip
 8001106:	e795      	b.n	8001034 <__aeabi_fdiv+0x18>
 8001108:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800110c:	ea92 0f0c 	teq	r2, ip
 8001110:	d108      	bne.n	8001124 <__aeabi_fdiv+0x108>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	f47f af7d 	bne.w	8001012 <__aeabi_fmul+0x15e>
 8001118:	ea93 0f0c 	teq	r3, ip
 800111c:	f47f af70 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001120:	4608      	mov	r0, r1
 8001122:	e776      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001124:	ea93 0f0c 	teq	r3, ip
 8001128:	d104      	bne.n	8001134 <__aeabi_fdiv+0x118>
 800112a:	024b      	lsls	r3, r1, #9
 800112c:	f43f af4c 	beq.w	8000fc8 <__aeabi_fmul+0x114>
 8001130:	4608      	mov	r0, r1
 8001132:	e76e      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001134:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001138:	bf18      	it	ne
 800113a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800113e:	d1ca      	bne.n	80010d6 <__aeabi_fdiv+0xba>
 8001140:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001144:	f47f af5c 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001148:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800114c:	f47f af3c 	bne.w	8000fc8 <__aeabi_fmul+0x114>
 8001150:	e75f      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001152:	bf00      	nop

08001154 <__aeabi_uldivmod>:
 8001154:	b953      	cbnz	r3, 800116c <__aeabi_uldivmod+0x18>
 8001156:	b94a      	cbnz	r2, 800116c <__aeabi_uldivmod+0x18>
 8001158:	2900      	cmp	r1, #0
 800115a:	bf08      	it	eq
 800115c:	2800      	cmpeq	r0, #0
 800115e:	bf1c      	itt	ne
 8001160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001168:	f000 b9a8 	b.w	80014bc <__aeabi_idiv0>
 800116c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001174:	f000 f83e 	bl	80011f4 <__udivmoddi4>
 8001178:	f8dd e004 	ldr.w	lr, [sp, #4]
 800117c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <__aeabi_d2lz>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4605      	mov	r5, r0
 8001188:	460c      	mov	r4, r1
 800118a:	4628      	mov	r0, r5
 800118c:	4621      	mov	r1, r4
 800118e:	2200      	movs	r2, #0
 8001190:	2300      	movs	r3, #0
 8001192:	f7ff fcab 	bl	8000aec <__aeabi_dcmplt>
 8001196:	b928      	cbnz	r0, 80011a4 <__aeabi_d2lz+0x20>
 8001198:	4628      	mov	r0, r5
 800119a:	4621      	mov	r1, r4
 800119c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a0:	f000 b80a 	b.w	80011b8 <__aeabi_d2ulz>
 80011a4:	4628      	mov	r0, r5
 80011a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011aa:	f000 f805 	bl	80011b8 <__aeabi_d2ulz>
 80011ae:	4240      	negs	r0, r0
 80011b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
 80011b6:	bf00      	nop

080011b8 <__aeabi_d2ulz>:
 80011b8:	b5d0      	push	{r4, r6, r7, lr}
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__aeabi_d2ulz+0x34>)
 80011bc:	2200      	movs	r2, #0
 80011be:	4606      	mov	r6, r0
 80011c0:	460f      	mov	r7, r1
 80011c2:	f7ff fa21 	bl	8000608 <__aeabi_dmul>
 80011c6:	f7ff fcf7 	bl	8000bb8 <__aeabi_d2uiz>
 80011ca:	4604      	mov	r4, r0
 80011cc:	f7ff f9a2 	bl	8000514 <__aeabi_ui2d>
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <__aeabi_d2ulz+0x38>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f7ff fa18 	bl	8000608 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4630      	mov	r0, r6
 80011de:	4639      	mov	r1, r7
 80011e0:	f7ff f85a 	bl	8000298 <__aeabi_dsub>
 80011e4:	f7ff fce8 	bl	8000bb8 <__aeabi_d2uiz>
 80011e8:	4621      	mov	r1, r4
 80011ea:	bdd0      	pop	{r4, r6, r7, pc}
 80011ec:	3df00000 	.word	0x3df00000
 80011f0:	41f00000 	.word	0x41f00000

080011f4 <__udivmoddi4>:
 80011f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f8:	9e08      	ldr	r6, [sp, #32]
 80011fa:	460d      	mov	r5, r1
 80011fc:	4604      	mov	r4, r0
 80011fe:	460f      	mov	r7, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d14a      	bne.n	800129a <__udivmoddi4+0xa6>
 8001204:	428a      	cmp	r2, r1
 8001206:	4694      	mov	ip, r2
 8001208:	d965      	bls.n	80012d6 <__udivmoddi4+0xe2>
 800120a:	fab2 f382 	clz	r3, r2
 800120e:	b143      	cbz	r3, 8001222 <__udivmoddi4+0x2e>
 8001210:	fa02 fc03 	lsl.w	ip, r2, r3
 8001214:	f1c3 0220 	rsb	r2, r3, #32
 8001218:	409f      	lsls	r7, r3
 800121a:	fa20 f202 	lsr.w	r2, r0, r2
 800121e:	4317      	orrs	r7, r2
 8001220:	409c      	lsls	r4, r3
 8001222:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001226:	fa1f f58c 	uxth.w	r5, ip
 800122a:	fbb7 f1fe 	udiv	r1, r7, lr
 800122e:	0c22      	lsrs	r2, r4, #16
 8001230:	fb0e 7711 	mls	r7, lr, r1, r7
 8001234:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001238:	fb01 f005 	mul.w	r0, r1, r5
 800123c:	4290      	cmp	r0, r2
 800123e:	d90a      	bls.n	8001256 <__udivmoddi4+0x62>
 8001240:	eb1c 0202 	adds.w	r2, ip, r2
 8001244:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001248:	f080 811b 	bcs.w	8001482 <__udivmoddi4+0x28e>
 800124c:	4290      	cmp	r0, r2
 800124e:	f240 8118 	bls.w	8001482 <__udivmoddi4+0x28e>
 8001252:	3902      	subs	r1, #2
 8001254:	4462      	add	r2, ip
 8001256:	1a12      	subs	r2, r2, r0
 8001258:	b2a4      	uxth	r4, r4
 800125a:	fbb2 f0fe 	udiv	r0, r2, lr
 800125e:	fb0e 2210 	mls	r2, lr, r0, r2
 8001262:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001266:	fb00 f505 	mul.w	r5, r0, r5
 800126a:	42a5      	cmp	r5, r4
 800126c:	d90a      	bls.n	8001284 <__udivmoddi4+0x90>
 800126e:	eb1c 0404 	adds.w	r4, ip, r4
 8001272:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001276:	f080 8106 	bcs.w	8001486 <__udivmoddi4+0x292>
 800127a:	42a5      	cmp	r5, r4
 800127c:	f240 8103 	bls.w	8001486 <__udivmoddi4+0x292>
 8001280:	4464      	add	r4, ip
 8001282:	3802      	subs	r0, #2
 8001284:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001288:	1b64      	subs	r4, r4, r5
 800128a:	2100      	movs	r1, #0
 800128c:	b11e      	cbz	r6, 8001296 <__udivmoddi4+0xa2>
 800128e:	40dc      	lsrs	r4, r3
 8001290:	2300      	movs	r3, #0
 8001292:	e9c6 4300 	strd	r4, r3, [r6]
 8001296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129a:	428b      	cmp	r3, r1
 800129c:	d908      	bls.n	80012b0 <__udivmoddi4+0xbc>
 800129e:	2e00      	cmp	r6, #0
 80012a0:	f000 80ec 	beq.w	800147c <__udivmoddi4+0x288>
 80012a4:	2100      	movs	r1, #0
 80012a6:	e9c6 0500 	strd	r0, r5, [r6]
 80012aa:	4608      	mov	r0, r1
 80012ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b0:	fab3 f183 	clz	r1, r3
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d149      	bne.n	800134c <__udivmoddi4+0x158>
 80012b8:	42ab      	cmp	r3, r5
 80012ba:	d302      	bcc.n	80012c2 <__udivmoddi4+0xce>
 80012bc:	4282      	cmp	r2, r0
 80012be:	f200 80f7 	bhi.w	80014b0 <__udivmoddi4+0x2bc>
 80012c2:	1a84      	subs	r4, r0, r2
 80012c4:	eb65 0203 	sbc.w	r2, r5, r3
 80012c8:	2001      	movs	r0, #1
 80012ca:	4617      	mov	r7, r2
 80012cc:	2e00      	cmp	r6, #0
 80012ce:	d0e2      	beq.n	8001296 <__udivmoddi4+0xa2>
 80012d0:	e9c6 4700 	strd	r4, r7, [r6]
 80012d4:	e7df      	b.n	8001296 <__udivmoddi4+0xa2>
 80012d6:	b902      	cbnz	r2, 80012da <__udivmoddi4+0xe6>
 80012d8:	deff      	udf	#255	; 0xff
 80012da:	fab2 f382 	clz	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 808f 	bne.w	8001402 <__udivmoddi4+0x20e>
 80012e4:	1a8a      	subs	r2, r1, r2
 80012e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012ea:	fa1f fe8c 	uxth.w	lr, ip
 80012ee:	2101      	movs	r1, #1
 80012f0:	fbb2 f5f7 	udiv	r5, r2, r7
 80012f4:	fb07 2015 	mls	r0, r7, r5, r2
 80012f8:	0c22      	lsrs	r2, r4, #16
 80012fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80012fe:	fb0e f005 	mul.w	r0, lr, r5
 8001302:	4290      	cmp	r0, r2
 8001304:	d908      	bls.n	8001318 <__udivmoddi4+0x124>
 8001306:	eb1c 0202 	adds.w	r2, ip, r2
 800130a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800130e:	d202      	bcs.n	8001316 <__udivmoddi4+0x122>
 8001310:	4290      	cmp	r0, r2
 8001312:	f200 80ca 	bhi.w	80014aa <__udivmoddi4+0x2b6>
 8001316:	4645      	mov	r5, r8
 8001318:	1a12      	subs	r2, r2, r0
 800131a:	b2a4      	uxth	r4, r4
 800131c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001320:	fb07 2210 	mls	r2, r7, r0, r2
 8001324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001328:	fb0e fe00 	mul.w	lr, lr, r0
 800132c:	45a6      	cmp	lr, r4
 800132e:	d908      	bls.n	8001342 <__udivmoddi4+0x14e>
 8001330:	eb1c 0404 	adds.w	r4, ip, r4
 8001334:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001338:	d202      	bcs.n	8001340 <__udivmoddi4+0x14c>
 800133a:	45a6      	cmp	lr, r4
 800133c:	f200 80ba 	bhi.w	80014b4 <__udivmoddi4+0x2c0>
 8001340:	4610      	mov	r0, r2
 8001342:	eba4 040e 	sub.w	r4, r4, lr
 8001346:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800134a:	e79f      	b.n	800128c <__udivmoddi4+0x98>
 800134c:	f1c1 0720 	rsb	r7, r1, #32
 8001350:	408b      	lsls	r3, r1
 8001352:	fa22 fc07 	lsr.w	ip, r2, r7
 8001356:	ea4c 0c03 	orr.w	ip, ip, r3
 800135a:	fa05 f401 	lsl.w	r4, r5, r1
 800135e:	fa20 f307 	lsr.w	r3, r0, r7
 8001362:	40fd      	lsrs	r5, r7
 8001364:	4323      	orrs	r3, r4
 8001366:	fa00 f901 	lsl.w	r9, r0, r1
 800136a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800136e:	fa1f fe8c 	uxth.w	lr, ip
 8001372:	fbb5 f8f0 	udiv	r8, r5, r0
 8001376:	0c1c      	lsrs	r4, r3, #16
 8001378:	fb00 5518 	mls	r5, r0, r8, r5
 800137c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001380:	fb08 f50e 	mul.w	r5, r8, lr
 8001384:	42a5      	cmp	r5, r4
 8001386:	fa02 f201 	lsl.w	r2, r2, r1
 800138a:	d90b      	bls.n	80013a4 <__udivmoddi4+0x1b0>
 800138c:	eb1c 0404 	adds.w	r4, ip, r4
 8001390:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001394:	f080 8087 	bcs.w	80014a6 <__udivmoddi4+0x2b2>
 8001398:	42a5      	cmp	r5, r4
 800139a:	f240 8084 	bls.w	80014a6 <__udivmoddi4+0x2b2>
 800139e:	f1a8 0802 	sub.w	r8, r8, #2
 80013a2:	4464      	add	r4, ip
 80013a4:	1b64      	subs	r4, r4, r5
 80013a6:	b29d      	uxth	r5, r3
 80013a8:	fbb4 f3f0 	udiv	r3, r4, r0
 80013ac:	fb00 4413 	mls	r4, r0, r3, r4
 80013b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013b4:	fb03 fe0e 	mul.w	lr, r3, lr
 80013b8:	45a6      	cmp	lr, r4
 80013ba:	d908      	bls.n	80013ce <__udivmoddi4+0x1da>
 80013bc:	eb1c 0404 	adds.w	r4, ip, r4
 80013c0:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80013c4:	d26b      	bcs.n	800149e <__udivmoddi4+0x2aa>
 80013c6:	45a6      	cmp	lr, r4
 80013c8:	d969      	bls.n	800149e <__udivmoddi4+0x2aa>
 80013ca:	3b02      	subs	r3, #2
 80013cc:	4464      	add	r4, ip
 80013ce:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013d2:	fba0 8302 	umull	r8, r3, r0, r2
 80013d6:	eba4 040e 	sub.w	r4, r4, lr
 80013da:	429c      	cmp	r4, r3
 80013dc:	46c6      	mov	lr, r8
 80013de:	461d      	mov	r5, r3
 80013e0:	d355      	bcc.n	800148e <__udivmoddi4+0x29a>
 80013e2:	d052      	beq.n	800148a <__udivmoddi4+0x296>
 80013e4:	b156      	cbz	r6, 80013fc <__udivmoddi4+0x208>
 80013e6:	ebb9 030e 	subs.w	r3, r9, lr
 80013ea:	eb64 0405 	sbc.w	r4, r4, r5
 80013ee:	fa04 f707 	lsl.w	r7, r4, r7
 80013f2:	40cb      	lsrs	r3, r1
 80013f4:	40cc      	lsrs	r4, r1
 80013f6:	431f      	orrs	r7, r3
 80013f8:	e9c6 7400 	strd	r7, r4, [r6]
 80013fc:	2100      	movs	r1, #0
 80013fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001402:	f1c3 0120 	rsb	r1, r3, #32
 8001406:	fa02 fc03 	lsl.w	ip, r2, r3
 800140a:	fa20 f201 	lsr.w	r2, r0, r1
 800140e:	fa25 f101 	lsr.w	r1, r5, r1
 8001412:	409d      	lsls	r5, r3
 8001414:	432a      	orrs	r2, r5
 8001416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800141a:	fa1f fe8c 	uxth.w	lr, ip
 800141e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001422:	fb07 1510 	mls	r5, r7, r0, r1
 8001426:	0c11      	lsrs	r1, r2, #16
 8001428:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800142c:	fb00 f50e 	mul.w	r5, r0, lr
 8001430:	428d      	cmp	r5, r1
 8001432:	fa04 f403 	lsl.w	r4, r4, r3
 8001436:	d908      	bls.n	800144a <__udivmoddi4+0x256>
 8001438:	eb1c 0101 	adds.w	r1, ip, r1
 800143c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001440:	d22f      	bcs.n	80014a2 <__udivmoddi4+0x2ae>
 8001442:	428d      	cmp	r5, r1
 8001444:	d92d      	bls.n	80014a2 <__udivmoddi4+0x2ae>
 8001446:	3802      	subs	r0, #2
 8001448:	4461      	add	r1, ip
 800144a:	1b49      	subs	r1, r1, r5
 800144c:	b292      	uxth	r2, r2
 800144e:	fbb1 f5f7 	udiv	r5, r1, r7
 8001452:	fb07 1115 	mls	r1, r7, r5, r1
 8001456:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800145a:	fb05 f10e 	mul.w	r1, r5, lr
 800145e:	4291      	cmp	r1, r2
 8001460:	d908      	bls.n	8001474 <__udivmoddi4+0x280>
 8001462:	eb1c 0202 	adds.w	r2, ip, r2
 8001466:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800146a:	d216      	bcs.n	800149a <__udivmoddi4+0x2a6>
 800146c:	4291      	cmp	r1, r2
 800146e:	d914      	bls.n	800149a <__udivmoddi4+0x2a6>
 8001470:	3d02      	subs	r5, #2
 8001472:	4462      	add	r2, ip
 8001474:	1a52      	subs	r2, r2, r1
 8001476:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800147a:	e739      	b.n	80012f0 <__udivmoddi4+0xfc>
 800147c:	4631      	mov	r1, r6
 800147e:	4630      	mov	r0, r6
 8001480:	e709      	b.n	8001296 <__udivmoddi4+0xa2>
 8001482:	4639      	mov	r1, r7
 8001484:	e6e7      	b.n	8001256 <__udivmoddi4+0x62>
 8001486:	4610      	mov	r0, r2
 8001488:	e6fc      	b.n	8001284 <__udivmoddi4+0x90>
 800148a:	45c1      	cmp	r9, r8
 800148c:	d2aa      	bcs.n	80013e4 <__udivmoddi4+0x1f0>
 800148e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001492:	eb63 050c 	sbc.w	r5, r3, ip
 8001496:	3801      	subs	r0, #1
 8001498:	e7a4      	b.n	80013e4 <__udivmoddi4+0x1f0>
 800149a:	4645      	mov	r5, r8
 800149c:	e7ea      	b.n	8001474 <__udivmoddi4+0x280>
 800149e:	4603      	mov	r3, r0
 80014a0:	e795      	b.n	80013ce <__udivmoddi4+0x1da>
 80014a2:	4640      	mov	r0, r8
 80014a4:	e7d1      	b.n	800144a <__udivmoddi4+0x256>
 80014a6:	46d0      	mov	r8, sl
 80014a8:	e77c      	b.n	80013a4 <__udivmoddi4+0x1b0>
 80014aa:	3d02      	subs	r5, #2
 80014ac:	4462      	add	r2, ip
 80014ae:	e733      	b.n	8001318 <__udivmoddi4+0x124>
 80014b0:	4608      	mov	r0, r1
 80014b2:	e70b      	b.n	80012cc <__udivmoddi4+0xd8>
 80014b4:	4464      	add	r4, ip
 80014b6:	3802      	subs	r0, #2
 80014b8:	e743      	b.n	8001342 <__udivmoddi4+0x14e>
 80014ba:	bf00      	nop

080014bc <__aeabi_idiv0>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t diffCapture = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	83fb      	strh	r3, [r7, #30]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ca:	f000 fcf3 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ce:	f000 f889 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d2:	f000 fa0d 	bl	80018f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d6:	f000 f9dd 	bl	8001894 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014da:	f000 f9b1 	bl	8001840 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014de:	f000 f8ed 	bl	80016bc <MX_TIM1_Init>
  MX_TIM3_Init();
 80014e2:	f000 f93b 	bl	800175c <MX_TIM3_Init>
  */

  //prepara un donde entrego los dato al destino


  HAL_DMA_Start(&hdma_tim1_up, (uint32_t) odrVals, (uint32_t) &GPIOA->ODR, 2);
 80014e6:	4935      	ldr	r1, [pc, #212]	; (80015bc <main+0xfc>)
 80014e8:	2302      	movs	r3, #2
 80014ea:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <main+0x100>)
 80014ec:	4835      	ldr	r0, [pc, #212]	; (80015c4 <main+0x104>)
 80014ee:	f000 ff0b 	bl	8002308 <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim1,TIM_DMA_UPDATE);
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <main+0x108>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <main+0x108>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001500:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim1);
 8001502:	4831      	ldr	r0, [pc, #196]	; (80015c8 <main+0x108>)
 8001504:	f002 f880 	bl	8003608 <HAL_TIM_Base_Start>

  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 8001508:	2302      	movs	r3, #2
 800150a:	4a30      	ldr	r2, [pc, #192]	; (80015cc <main+0x10c>)
 800150c:	2100      	movs	r1, #0
 800150e:	4830      	ldr	r0, [pc, #192]	; (80015d0 <main+0x110>)
 8001510:	f002 f92a 	bl	8003768 <HAL_TIM_IC_Start_DMA>

  while (1)
  {
	  if (captureDone != 0) {
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <main+0x114>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0fa      	beq.n	8001514 <main+0x54>
		if (captures[1] >= captures[0])
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <main+0x10c>)
 8001520:	885a      	ldrh	r2, [r3, #2]
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <main+0x10c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d306      	bcc.n	8001538 <main+0x78>
		  diffCapture = captures[1] - captures[0];
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <main+0x10c>)
 800152c:	885a      	ldrh	r2, [r3, #2]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <main+0x10c>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	83fb      	strh	r3, [r7, #30]
 8001536:	e00b      	b.n	8001550 <main+0x90>
		else
		  diffCapture = (htim3.Instance->ARR - captures[0]) + captures[1];
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <main+0x110>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <main+0x10c>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <main+0x10c>)
 800154a:	885b      	ldrh	r3, [r3, #2]
 800154c:	4413      	add	r3, r2
 800154e:	83fb      	strh	r3, [r7, #30]

		frequency = HAL_RCC_GetHCLKFreq() / (htim3.Instance->PSC + 1);
 8001550:	f001 ffd8 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <main+0x110>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	3301      	adds	r3, #1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fc4e 	bl	8000e04 <__aeabi_ui2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <main+0x118>)
 800156c:	6013      	str	r3, [r2, #0]
		frequency = (float) frequency / diffCapture;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <main+0x118>)
 8001570:	681c      	ldr	r4, [r3, #0]
 8001572:	8bfb      	ldrh	r3, [r7, #30]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc49 	bl	8000e0c <__aeabi_i2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4619      	mov	r1, r3
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff fd4c 	bl	800101c <__aeabi_fdiv>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <main+0x118>)
 800158a:	601a      	str	r2, [r3, #0]

		sprintf(msg, "Input frequency: %.3f\r\n", frequency);
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <main+0x118>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffe1 	bl	8000558 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4638      	mov	r0, r7
 800159c:	490f      	ldr	r1, [pc, #60]	; (80015dc <main+0x11c>)
 800159e:	f004 fa73 	bl	8005a88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80015a2:	463b      	mov	r3, r7
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe6b 	bl	8000280 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4639      	mov	r1, r7
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <main+0x120>)
 80015b6:	f002 ffd4 	bl	8004562 <HAL_UART_Transmit>
		while (1);
 80015ba:	e7fe      	b.n	80015ba <main+0xfa>
 80015bc:	20000000 	.word	0x20000000
 80015c0:	40020014 	.word	0x40020014
 80015c4:	20000284 	.word	0x20000284
 80015c8:	200001f4 	.word	0x200001f4
 80015cc:	2000038c 	.word	0x2000038c
 80015d0:	2000023c 	.word	0x2000023c
 80015d4:	20000390 	.word	0x20000390
 80015d8:	20000388 	.word	0x20000388
 80015dc:	08009378 	.word	0x08009378
 80015e0:	20000344 	.word	0x20000344

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 faab 	bl	8005b4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <SystemClock_Config+0xd0>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <SystemClock_Config+0xd0>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <SystemClock_Config+0xd0>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <SystemClock_Config+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <SystemClock_Config+0xd4>)
 8001632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <SystemClock_Config+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	2310      	movs	r3, #16
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001650:	2302      	movs	r3, #2
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001658:	2310      	movs	r3, #16
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800165c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001662:	2304      	movs	r3, #4
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001666:	2307      	movs	r3, #7
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fade 	bl	8002c30 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800167a:	f000 f9b9 	bl	80019f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2102      	movs	r1, #2
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fd40 	bl	8003120 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016a6:	f000 f9a3 	bl	80019f0 <Error_Handler>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	; 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_TIM1_Init+0x98>)
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <MX_TIM1_Init+0x9c>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_TIM1_Init+0x98>)
 80016e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80016e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_TIM1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 209;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_TIM1_Init+0x98>)
 80016ee:	22d1      	movs	r2, #209	; 0xd1
 80016f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_TIM1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_TIM1_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_TIM1_Init+0x98>)
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <MX_TIM1_Init+0x98>)
 8001706:	f001 ff2f 	bl	8003568 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f96e 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <MX_TIM1_Init+0x98>)
 8001722:	f002 fa59 	bl	8003bd8 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800172c:	f000 f960 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_TIM1_Init+0x98>)
 800173e:	f002 fe57 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001748:	f000 f952 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001f4 	.word	0x200001f4
 8001758:	40010000 	.word	0x40010000

0800175c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800177a:	463b      	mov	r3, r7
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001786:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <MX_TIM3_Init+0xdc>)
 8001788:	4a2c      	ldr	r2, [pc, #176]	; (800183c <MX_TIM3_Init+0xe0>)
 800178a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_TIM3_Init+0xdc>)
 800178e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001792:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_TIM3_Init+0xdc>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_TIM3_Init+0xdc>)
 800179c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <MX_TIM3_Init+0xdc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b23      	ldr	r3, [pc, #140]	; (8001838 <MX_TIM3_Init+0xdc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ae:	4822      	ldr	r0, [pc, #136]	; (8001838 <MX_TIM3_Init+0xdc>)
 80017b0:	f001 feda 	bl	8003568 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80017ba:	f000 f919 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	4619      	mov	r1, r3
 80017ca:	481b      	ldr	r0, [pc, #108]	; (8001838 <MX_TIM3_Init+0xdc>)
 80017cc:	f002 fa04 	bl	8003bd8 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017d6:	f000 f90b 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80017da:	4817      	ldr	r0, [pc, #92]	; (8001838 <MX_TIM3_Init+0xdc>)
 80017dc:	f001 ff6c 	bl	80036b8 <HAL_TIM_IC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80017e6:	f000 f903 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	480f      	ldr	r0, [pc, #60]	; (8001838 <MX_TIM3_Init+0xdc>)
 80017fa:	f002 fdf9 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001804:	f000 f8f4 	bl	80019f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001808:	2300      	movs	r3, #0
 800180a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800180c:	2301      	movs	r3, #1
 800180e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <MX_TIM3_Init+0xdc>)
 8001820:	f002 f93e 	bl	8003aa0 <HAL_TIM_IC_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800182a:	f000 f8e1 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000023c 	.word	0x2000023c
 800183c:	40000400 	.word	0x40000400

08001840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART2_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART2_UART_Init+0x4c>)
 8001878:	f002 fe26 	bl	80044c8 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 f8b5 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000344 	.word	0x20000344
 8001890:	40004400 	.word	0x40004400

08001894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_DMA_Init+0x58>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <MX_DMA_Init+0x58>)
 80018a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_DMA_Init+0x58>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_DMA_Init+0x58>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <MX_DMA_Init+0x58>)
 80018c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_DMA_Init+0x58>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 fc31 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018dc:	200f      	movs	r0, #15
 80018de:	f000 fc4a 	bl	8002176 <HAL_NVIC_EnableIRQ>

}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <MX_GPIO_Init+0xd0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <MX_GPIO_Init+0xd0>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <MX_GPIO_Init+0xd0>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_GPIO_Init+0xd0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2120      	movs	r1, #32
 800197a:	4812      	ldr	r0, [pc, #72]	; (80019c4 <MX_GPIO_Init+0xd4>)
 800197c:	f001 f940 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001986:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <MX_GPIO_Init+0xd8>)
 8001998:	f000 ffb0 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800199c:	2320      	movs	r3, #32
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_GPIO_Init+0xd4>)
 80019b4:	f000 ffa2 	bl	80028fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020800 	.word	0x40020800

080019cc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7f1b      	ldrb	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d102      	bne.n	80019e2 <HAL_TIM_IC_CaptureCallback+0x16>
    captureDone = 1;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_TIM_IC_CaptureCallback+0x20>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000390 	.word	0x20000390

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <Error_Handler+0x8>
	...

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	f000 fb74 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a55      	ldr	r2, [pc, #340]	; (8001bc0 <HAL_TIM_Base_MspInit+0x174>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d13d      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_TIM_Base_MspInit+0x180>)
 8001a8e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001a90:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a92:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001a96:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a98:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001a9a:	2240      	movs	r2, #64	; 0x40
 8001a9c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001aa4:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aaa:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab2:	4b45      	ldr	r3, [pc, #276]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001ab8:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001ac0:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001acc:	483e      	ldr	r0, [pc, #248]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001ace:	f000 fb6d 	bl	80021ac <HAL_DMA_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_TIM_Base_MspInit+0x90>
    {
      Error_Handler();
 8001ad8:	f7ff ff8a 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001ae0:	621a      	str	r2, [r3, #32]
 8001ae2:	4a39      	ldr	r2, [pc, #228]	; (8001bc8 <HAL_TIM_Base_MspInit+0x17c>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ae8:	e066      	b.n	8001bb8 <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM3)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a38      	ldr	r2, [pc, #224]	; (8001bd0 <HAL_TIM_Base_MspInit+0x184>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d161      	bne.n	8001bb8 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	6413      	str	r3, [r2, #64]	; 0x40
 8001b04:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_TIM_Base_MspInit+0x178>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b2c:	2340      	movs	r3, #64	; 0x40
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <HAL_TIM_Base_MspInit+0x188>)
 8001b48:	f000 fed8 	bl	80028fc <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_TIM_Base_MspInit+0x190>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b54:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b58:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b74:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001b92:	f000 fb0b 	bl	80021ac <HAL_DMA_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_TIM_Base_MspInit+0x154>
      Error_Handler();
 8001b9c:	f7ff ff28 	bl	80019f0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_TIM_Base_MspInit+0x18c>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	20000284 	.word	0x20000284
 8001bcc:	40026488 	.word	0x40026488
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	200002e4 	.word	0x200002e4
 8001bdc:	40026070 	.word	0x40026070

08001be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_UART_MspInit+0x84>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12b      	bne.n	8001c5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_UART_MspInit+0x88>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_UART_MspInit+0x88>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_UART_MspInit+0x88>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_UART_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_UART_MspInit+0x88>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_UART_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_UART_MspInit+0x8c>)
 8001c56:	f000 fe51 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40004400 	.word	0x40004400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb6:	f000 f94f 	bl	8001f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA1_Stream4_IRQHandler+0x10>)
 8001cc6:	f000 fbb3 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200002e4 	.word	0x200002e4

08001cd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return 1;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <_kill>:

int _kill(int pid, int sig)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cec:	f003 ff82 	bl	8005bf4 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2216      	movs	r2, #22
 8001cf4:	601a      	str	r2, [r3, #0]
  return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_exit>:

void _exit (int status)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffe7 	bl	8001ce2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d14:	e7fe      	b.n	8001d14 <_exit+0x12>

08001d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e00a      	b.n	8001d3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d28:	f3af 8000 	nop.w
 8001d2c:	4601      	mov	r1, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	60ba      	str	r2, [r7, #8]
 8001d34:	b2ca      	uxtb	r2, r1
 8001d36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dbf0      	blt.n	8001d28 <_read+0x12>
  }

  return len;
 8001d46:	687b      	ldr	r3, [r7, #4]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e009      	b.n	8001d76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	60ba      	str	r2, [r7, #8]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	dbf1      	blt.n	8001d62 <_write+0x12>
  }
  return len;
 8001d7e:	687b      	ldr	r3, [r7, #4]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_close>:

int _close(int file)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dae:	605a      	str	r2, [r3, #4]
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <_isatty>:

int _isatty(int file)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f003 feec 	bl	8005bf4 <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20018000 	.word	0x20018000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	20000394 	.word	0x20000394
 8001e50:	200004e8 	.word	0x200004e8

08001e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e66:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e7c:	4c0b      	ldr	r4, [pc, #44]	; (8001eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8a:	f7ff ffe3 	bl	8001e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f003 feb7 	bl	8005c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7ff fb15 	bl	80014c0 <main>
  bx  lr    
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ea4:	080097e8 	.word	0x080097e8
  ldr r2, =_sbss
 8001ea8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001eac:	200004e8 	.word	0x200004e8

08001eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <HAL_Init+0x40>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_Init+0x40>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_Init+0x40>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001edc:	2003      	movs	r0, #3
 8001ede:	f000 f923 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f000 f808 	bl	8001ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fd88 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x54>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x58>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f93b 	bl	8002192 <HAL_SYSTICK_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00e      	b.n	8001f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d80a      	bhi.n	8001f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f34:	f000 f903 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <HAL_InitTick+0x5c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000004 	.word	0x20000004
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	20000008 	.word	0x20000008

08001f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_IncTick+0x1c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_IncTick+0x20>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <HAL_IncTick+0x20>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	20000398 	.word	0x20000398

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <HAL_GetTick+0x10>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000398 	.word	0x20000398

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4906      	ldr	r1, [pc, #24]	; (8002028 <__NVIC_EnableIRQ+0x34>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002108:	f7ff ff90 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff2d 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff42 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff90 	bl	8002080 <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5f 	bl	800202c <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff35 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff fee0 	bl	8001f7c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e099      	b.n	80022fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e8:	e00f      	b.n	800220a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ea:	f7ff fec7 	bl	8001f7c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d908      	bls.n	800220a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2203      	movs	r2, #3
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e078      	b.n	80022fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e8      	bne.n	80021ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_DMA_Init+0x158>)
 8002224:	4013      	ands	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b04      	cmp	r3, #4
 8002262:	d107      	bne.n	8002274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4313      	orrs	r3, r2
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f023 0307 	bic.w	r3, r3, #7
 800228a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	2b04      	cmp	r3, #4
 800229c:	d117      	bne.n	80022ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 faa9 	bl	8002808 <DMA_CheckFifoParam>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ca:	2301      	movs	r3, #1
 80022cc:	e016      	b.n	80022fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa62 	bl	80027a0 <DMA_CalcBaseAndBitshift>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	223f      	movs	r2, #63	; 0x3f
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	f010803f 	.word	0xf010803f

08002308 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_DMA_Start+0x20>
 8002324:	2302      	movs	r3, #2
 8002326:	e026      	b.n	8002376 <HAL_DMA_Start+0x6e>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d115      	bne.n	8002368 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9f7 	bl	8002744 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e005      	b.n	8002374 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002374:	7dfb      	ldrb	r3, [r7, #23]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Start_IT+0x26>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e040      	b.n	8002426 <HAL_DMA_Start_IT+0xa8>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d12f      	bne.n	8002418 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f9b9 	bl	8002744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	223f      	movs	r2, #63	; 0x3f
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0216 	orr.w	r2, r2, #22
 80023ec:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0208 	orr.w	r2, r2, #8
 8002404:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e005      	b.n	8002424 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002424:	7dfb      	ldrb	r3, [r7, #23]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800243c:	4b8e      	ldr	r3, [pc, #568]	; (8002678 <HAL_DMA_IRQHandler+0x248>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a8e      	ldr	r2, [pc, #568]	; (800267c <HAL_DMA_IRQHandler+0x24c>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2208      	movs	r2, #8
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01a      	beq.n	800249c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0204 	bic.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	2208      	movs	r2, #8
 800248a:	409a      	lsls	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2201      	movs	r2, #1
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2201      	movs	r2, #1
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2204      	movs	r2, #4
 80024d8:	409a      	lsls	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2204      	movs	r2, #4
 80024f6:	409a      	lsls	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	2210      	movs	r2, #16
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d043      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03c      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2210      	movs	r2, #16
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d018      	beq.n	8002572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d024      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
 800255e:	e01f      	b.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
 8002570:	e016      	b.n	80025a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0208 	bic.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2220      	movs	r2, #32
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 808f 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8087 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	2220      	movs	r2, #32
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d136      	bne.n	8002648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0216 	bic.w	r2, r2, #22
 80025e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_DMA_IRQHandler+0x1da>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0208 	bic.w	r2, r2, #8
 8002618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	223f      	movs	r2, #63	; 0x3f
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263a:	2b00      	cmp	r3, #0
 800263c:	d07e      	beq.n	800273c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
        }
        return;
 8002646:	e079      	b.n	800273c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	2b00      	cmp	r3, #0
 800266a:	d031      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
 8002674:	e02c      	b.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
 8002676:	bf00      	nop
 8002678:	20000004 	.word	0x20000004
 800267c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d023      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
 8002690:	e01e      	b.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0210 	bic.w	r2, r2, #16
 80026ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d032      	beq.n	800273e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d022      	beq.n	800272a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2205      	movs	r2, #5
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	d307      	bcc.n	8002718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f2      	bne.n	80026fc <HAL_DMA_IRQHandler+0x2cc>
 8002716:	e000      	b.n	800271a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e000      	b.n	800273e <HAL_DMA_IRQHandler+0x30e>
        return;
 800273c:	bf00      	nop
    }
  }
}
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b40      	cmp	r3, #64	; 0x40
 8002770:	d108      	bne.n	8002784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002782:	e007      	b.n	8002794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3b10      	subs	r3, #16
 80027b0:	4a13      	ldr	r2, [pc, #76]	; (8002800 <DMA_CalcBaseAndBitshift+0x60>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <DMA_CalcBaseAndBitshift+0x64>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d909      	bls.n	80027e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027d6:	f023 0303 	bic.w	r3, r3, #3
 80027da:	1d1a      	adds	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	659a      	str	r2, [r3, #88]	; 0x58
 80027e0:	e007      	b.n	80027f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	aaaaaaab 	.word	0xaaaaaaab
 8002804:	080093a8 	.word	0x080093a8

08002808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d856      	bhi.n	80028d6 <DMA_CheckFifoParam+0xce>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <DMA_CheckFifoParam+0x28>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002841 	.word	0x08002841
 8002834:	08002853 	.word	0x08002853
 8002838:	08002841 	.word	0x08002841
 800283c:	080028d7 	.word	0x080028d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d046      	beq.n	80028da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002850:	e043      	b.n	80028da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800285a:	d140      	bne.n	80028de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e03d      	b.n	80028de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d121      	bne.n	80028b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d837      	bhi.n	80028e2 <DMA_CheckFifoParam+0xda>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <DMA_CheckFifoParam+0x70>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	0800288f 	.word	0x0800288f
 8002880:	08002889 	.word	0x08002889
 8002884:	080028a1 	.word	0x080028a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e030      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d025      	beq.n	80028e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289e:	e022      	b.n	80028e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a8:	d11f      	bne.n	80028ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ae:	e01c      	b.n	80028ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d903      	bls.n	80028be <DMA_CheckFifoParam+0xb6>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d003      	beq.n	80028c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028bc:	e018      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
      break;
 80028c2:	e015      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;
 80028d4:	e00b      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028d6:	bf00      	nop
 80028d8:	e00a      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e008      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e006      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e004      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
    }
  } 
  
  return status; 
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e159      	b.n	8002bcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8148 	bne.w	8002bc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d005      	beq.n	800294e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	2b02      	cmp	r3, #2
 800294c:	d130      	bne.n	80029b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 0201 	and.w	r2, r3, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d017      	beq.n	80029ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d123      	bne.n	8002a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a2 	beq.w	8002bc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b56      	ldr	r3, [pc, #344]	; (8002be0 <HAL_GPIO_Init+0x2e4>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a55      	ldr	r2, [pc, #340]	; (8002be0 <HAL_GPIO_Init+0x2e4>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_GPIO_Init+0x2e4>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9e:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a48      	ldr	r2, [pc, #288]	; (8002be8 <HAL_GPIO_Init+0x2ec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_GPIO_Init+0x202>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a47      	ldr	r2, [pc, #284]	; (8002bec <HAL_GPIO_Init+0x2f0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0x1fe>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a46      	ldr	r2, [pc, #280]	; (8002bf0 <HAL_GPIO_Init+0x2f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a45      	ldr	r2, [pc, #276]	; (8002bf4 <HAL_GPIO_Init+0x2f8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x1f6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a44      	ldr	r2, [pc, #272]	; (8002bf8 <HAL_GPIO_Init+0x2fc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_GPIO_Init+0x1f2>
 8002aea:	2304      	movs	r3, #4
 8002aec:	e008      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002aee:	2307      	movs	r3, #7
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002af2:	2303      	movs	r3, #3
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002afe:	2300      	movs	r3, #0
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f002 0203 	and.w	r2, r2, #3
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b10:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a23      	ldr	r2, [pc, #140]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	f67f aea2 	bls.w	8002918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40013c00 	.word	0x40013c00

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c1c:	e003      	b.n	8002c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e267      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d075      	beq.n	8002d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4e:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d00c      	beq.n	8002c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5a:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d112      	bne.n	8002c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c66:	4b82      	ldr	r3, [pc, #520]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c72:	d10b      	bne.n	8002c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d05b      	beq.n	8002d38 <HAL_RCC_OscConfig+0x108>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d157      	bne.n	8002d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e242      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d106      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x74>
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a75      	ldr	r2, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e01d      	b.n	8002ce0 <HAL_RCC_OscConfig+0xb0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x98>
 8002cae:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6f      	ldr	r2, [pc, #444]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6c      	ldr	r2, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0xb0>
 8002cc8:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7ff f948 	bl	8001f7c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7ff f944 	bl	8001f7c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e207      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xc0>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff f934 	bl	8001f7c <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d18:	f7ff f930 	bl	8001f7c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1f3      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0xe8>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d063      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d11c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5e:	4b44      	ldr	r3, [pc, #272]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x152>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1c7      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	e03a      	b.n	8002e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da0:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7ff f8e9 	bl	8001f7c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dae:	f7ff f8e5 	bl	8001f7c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1a8      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4925      	ldr	r1, [pc, #148]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	e015      	b.n	8002e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7ff f8c8 	bl	8001f7c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df0:	f7ff f8c4 	bl	8001f7c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e187      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d036      	beq.n	8002e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_RCC_OscConfig+0x248>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7ff f8a8 	bl	8001f7c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e30:	f7ff f8a4 	bl	8001f7c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e167      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_OscConfig+0x240>)
 8002e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x200>
 8002e4e:	e01b      	b.n	8002e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_OscConfig+0x248>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7ff f891 	bl	8001f7c <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	e00e      	b.n	8002e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7ff f88d 	bl	8001f7c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d907      	bls.n	8002e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e150      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
 8002e70:	40023800 	.word	0x40023800
 8002e74:	42470000 	.word	0x42470000
 8002e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1ea      	bne.n	8002e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8097 	beq.w	8002fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9a:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	4b7d      	ldr	r3, [pc, #500]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	4a7c      	ldr	r2, [pc, #496]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b77      	ldr	r3, [pc, #476]	; (80030a4 <HAL_RCC_OscConfig+0x474>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d118      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b74      	ldr	r3, [pc, #464]	; (80030a4 <HAL_RCC_OscConfig+0x474>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <HAL_RCC_OscConfig+0x474>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7ff f84d 	bl	8001f7c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7ff f849 	bl	8001f7c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e10c      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b6a      	ldr	r3, [pc, #424]	; (80030a4 <HAL_RCC_OscConfig+0x474>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x2ea>
 8002f0c:	4b64      	ldr	r3, [pc, #400]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	e01c      	b.n	8002f54 <HAL_RCC_OscConfig+0x324>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x30c>
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a5e      	ldr	r2, [pc, #376]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2e:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0x324>
 8002f3c:	4b58      	ldr	r3, [pc, #352]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	4b55      	ldr	r3, [pc, #340]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a54      	ldr	r2, [pc, #336]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	f023 0304 	bic.w	r3, r3, #4
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d015      	beq.n	8002f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7ff f80e 	bl	8001f7c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7ff f80a 	bl	8001f7c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0cb      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7a:	4b49      	ldr	r3, [pc, #292]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0ee      	beq.n	8002f64 <HAL_RCC_OscConfig+0x334>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f88:	f7fe fff8 	bl	8001f7c <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f90:	f7fe fff4 	bl	8001f7c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0b5      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ee      	bne.n	8002f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb8:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	4a38      	ldr	r2, [pc, #224]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a1 	beq.w	8003110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fce:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d05c      	beq.n	8003094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d141      	bne.n	8003066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_OscConfig+0x478>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe ffc8 	bl	8001f7c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe ffc4 	bl	8001f7c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e087      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	019b      	lsls	r3, r3, #6
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	041b      	lsls	r3, r3, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	491b      	ldr	r1, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x478>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe ff9d 	bl	8001f7c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe ff99 	bl	8001f7c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e05c      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x416>
 8003064:	e054      	b.n	8003110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x478>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe ff86 	bl	8001f7c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe ff82 	bl	8001f7c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e045      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCC_OscConfig+0x470>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x444>
 8003092:	e03d      	b.n	8003110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e038      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x4ec>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d028      	beq.n	800310c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d121      	bne.n	800310c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d11a      	bne.n	800310c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d111      	bne.n	800310c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	3b01      	subs	r3, #1
 80030f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d107      	bne.n	800310c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800

08003120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0cc      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003134:	4b68      	ldr	r3, [pc, #416]	; (80032d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d90c      	bls.n	800315c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0b8      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003174:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a58      	ldr	r2, [pc, #352]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800317e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a52      	ldr	r2, [pc, #328]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b50      	ldr	r3, [pc, #320]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	494d      	ldr	r1, [pc, #308]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d044      	beq.n	8003240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d119      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e07f      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d003      	beq.n	80031de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031de:	4b3f      	ldr	r3, [pc, #252]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e06f      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e067      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fe:	4b37      	ldr	r3, [pc, #220]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4934      	ldr	r1, [pc, #208]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003210:	f7fe feb4 	bl	8001f7c <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	e00a      	b.n	800322e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003218:	f7fe feb0 	bl	8001f7c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e04f      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 020c 	and.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	429a      	cmp	r2, r3
 800323e:	d1eb      	bne.n	8003218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d20c      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e032      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4916      	ldr	r1, [pc, #88]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	490e      	ldr	r1, [pc, #56]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a6:	f000 f821 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80032aa:	4602      	mov	r2, r0
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	490a      	ldr	r1, [pc, #40]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	5ccb      	ldrb	r3, [r1, r3]
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fe16 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023c00 	.word	0x40023c00
 80032dc:	40023800 	.word	0x40023800
 80032e0:	08009390 	.word	0x08009390
 80032e4:	20000004 	.word	0x20000004
 80032e8:	20000008 	.word	0x20000008

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b094      	sub	sp, #80	; 0x50
 80032f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	647b      	str	r3, [r7, #68]	; 0x44
 80032f8:	2300      	movs	r3, #0
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fc:	2300      	movs	r3, #0
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003304:	4b7c      	ldr	r3, [pc, #496]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d00d      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x40>
 8003310:	2b08      	cmp	r3, #8
 8003312:	f200 80e7 	bhi.w	80034e4 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x34>
 800331a:	2b04      	cmp	r3, #4
 800331c:	d003      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x3a>
 800331e:	e0e1      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_GetSysClockFreq+0x210>)
 8003322:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003324:	e0e1      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_GetSysClockFreq+0x214>)
 8003328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800332a:	e0de      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800332c:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003336:	4b70      	ldr	r3, [pc, #448]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d065      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003342:	4b6d      	ldr	r3, [pc, #436]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	2200      	movs	r2, #0
 800334a:	63bb      	str	r3, [r7, #56]	; 0x38
 800334c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
 8003356:	2300      	movs	r3, #0
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
 800335a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800335e:	4622      	mov	r2, r4
 8003360:	462b      	mov	r3, r5
 8003362:	f04f 0000 	mov.w	r0, #0
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	0159      	lsls	r1, r3, #5
 800336c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003370:	0150      	lsls	r0, r2, #5
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4621      	mov	r1, r4
 8003378:	1a51      	subs	r1, r2, r1
 800337a:	6139      	str	r1, [r7, #16]
 800337c:	4629      	mov	r1, r5
 800337e:	eb63 0301 	sbc.w	r3, r3, r1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003390:	4659      	mov	r1, fp
 8003392:	018b      	lsls	r3, r1, #6
 8003394:	4651      	mov	r1, sl
 8003396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800339a:	4651      	mov	r1, sl
 800339c:	018a      	lsls	r2, r1, #6
 800339e:	46d4      	mov	ip, sl
 80033a0:	ebb2 080c 	subs.w	r8, r2, ip
 80033a4:	4659      	mov	r1, fp
 80033a6:	eb63 0901 	sbc.w	r9, r3, r1
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033be:	4690      	mov	r8, r2
 80033c0:	4699      	mov	r9, r3
 80033c2:	4623      	mov	r3, r4
 80033c4:	eb18 0303 	adds.w	r3, r8, r3
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	462b      	mov	r3, r5
 80033cc:	eb49 0303 	adc.w	r3, r9, r3
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033de:	4629      	mov	r1, r5
 80033e0:	024b      	lsls	r3, r1, #9
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	4604      	mov	r4, r0
 80033e8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80033ec:	4601      	mov	r1, r0
 80033ee:	024a      	lsls	r2, r1, #9
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	2200      	movs	r2, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003400:	f7fd fea8 	bl	8001154 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4613      	mov	r3, r2
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800340c:	e05c      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	4618      	mov	r0, r3
 8003418:	4611      	mov	r1, r2
 800341a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	f04f 0000 	mov.w	r0, #0
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	0159      	lsls	r1, r3, #5
 8003436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343a:	0150      	lsls	r0, r2, #5
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	46c4      	mov	ip, r8
 8003442:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003446:	4640      	mov	r0, r8
 8003448:	4649      	mov	r1, r9
 800344a:	468c      	mov	ip, r1
 800344c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800345c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003464:	ebb2 040a 	subs.w	r4, r2, sl
 8003468:	eb63 050b 	sbc.w	r5, r3, fp
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	00eb      	lsls	r3, r5, #3
 8003476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800347a:	00e2      	lsls	r2, r4, #3
 800347c:	4614      	mov	r4, r2
 800347e:	461d      	mov	r5, r3
 8003480:	4603      	mov	r3, r0
 8003482:	18e3      	adds	r3, r4, r3
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	460b      	mov	r3, r1
 8003488:	eb45 0303 	adc.w	r3, r5, r3
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800349a:	4629      	mov	r1, r5
 800349c:	028b      	lsls	r3, r1, #10
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	4604      	mov	r4, r0
 80034a4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80034a8:	4601      	mov	r1, r0
 80034aa:	028a      	lsls	r2, r1, #10
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	61fa      	str	r2, [r7, #28]
 80034b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034bc:	f7fd fe4a 	bl	8001154 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	3301      	adds	r3, #1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetSysClockFreq+0x210>)
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3750      	adds	r7, #80	; 0x50
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	007a1200 	.word	0x007a1200

08003504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b02      	ldr	r3, [pc, #8]	; (8003514 <HAL_RCC_GetHCLKFreq+0x10>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800351c:	f7ff fff2 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0a9b      	lsrs	r3, r3, #10
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4903      	ldr	r1, [pc, #12]	; (800353c <HAL_RCC_GetPCLK1Freq+0x24>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	080093a0 	.word	0x080093a0

08003540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003544:	f7ff ffde 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0b5b      	lsrs	r3, r3, #13
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	080093a0 	.word	0x080093a0

08003568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe fa5c 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 fcd0 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d001      	beq.n	8003620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e03c      	b.n	800369a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_TIM_Base_Start+0x9c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d013      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_TIM_Base_Start+0xa0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_TIM_Base_Start+0xa4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_TIM_Base_Start+0xa8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_TIM_Base_Start+0xac>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d010      	beq.n	8003698 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e007      	b.n	8003698 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40014000 	.word	0x40014000

080036b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e041      	b.n	800374e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f839 	bl	8003756 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 fc28 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d104      	bne.n	800378a <HAL_TIM_IC_Start_DMA+0x22>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e013      	b.n	80037b2 <HAL_TIM_IC_Start_DMA+0x4a>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d104      	bne.n	800379a <HAL_TIM_IC_Start_DMA+0x32>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003796:	b2db      	uxtb	r3, r3
 8003798:	e00b      	b.n	80037b2 <HAL_TIM_IC_Start_DMA+0x4a>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d104      	bne.n	80037aa <HAL_TIM_IC_Start_DMA+0x42>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e003      	b.n	80037b2 <HAL_TIM_IC_Start_DMA+0x4a>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_TIM_IC_Start_DMA+0x5c>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e013      	b.n	80037ec <HAL_TIM_IC_Start_DMA+0x84>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d104      	bne.n	80037d4 <HAL_TIM_IC_Start_DMA+0x6c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e00b      	b.n	80037ec <HAL_TIM_IC_Start_DMA+0x84>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d104      	bne.n	80037e4 <HAL_TIM_IC_Start_DMA+0x7c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e003      	b.n	80037ec <HAL_TIM_IC_Start_DMA+0x84>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80037ee:	7dbb      	ldrb	r3, [r7, #22]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d002      	beq.n	80037fa <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80037f4:	7d7b      	ldrb	r3, [r7, #21]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
 80037fc:	e13c      	b.n	8003a78 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80037fe:	7dbb      	ldrb	r3, [r7, #22]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d143      	bne.n	800388c <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003804:	7d7b      	ldrb	r3, [r7, #21]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d140      	bne.n	800388c <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_TIM_IC_Start_DMA+0xb2>
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e12e      	b.n	8003a78 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_TIM_IC_Start_DMA+0xc2>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	e013      	b.n	8003852 <HAL_TIM_IC_Start_DMA+0xea>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d104      	bne.n	800383a <HAL_TIM_IC_Start_DMA+0xd2>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003838:	e00b      	b.n	8003852 <HAL_TIM_IC_Start_DMA+0xea>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d104      	bne.n	800384a <HAL_TIM_IC_Start_DMA+0xe2>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003848:	e003      	b.n	8003852 <HAL_TIM_IC_Start_DMA+0xea>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2202      	movs	r2, #2
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IC_Start_DMA+0xfa>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8003860:	e016      	b.n	8003890 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d104      	bne.n	8003872 <HAL_TIM_IC_Start_DMA+0x10a>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8003870:	e00e      	b.n	8003890 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d104      	bne.n	8003882 <HAL_TIM_IC_Start_DMA+0x11a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8003880:	e006      	b.n	8003890 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800388a:	e001      	b.n	8003890 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0f3      	b.n	8003a78 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fd84 	bl	80043a6 <TIM_CCxChannelCmd>

  switch (Channel)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	f200 80ad 	bhi.w	8003a00 <HAL_TIM_IC_Start_DMA+0x298>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <HAL_TIM_IC_Start_DMA+0x144>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	08003a01 	.word	0x08003a01
 80038b4:	08003a01 	.word	0x08003a01
 80038b8:	08003a01 	.word	0x08003a01
 80038bc:	08003929 	.word	0x08003929
 80038c0:	08003a01 	.word	0x08003a01
 80038c4:	08003a01 	.word	0x08003a01
 80038c8:	08003a01 	.word	0x08003a01
 80038cc:	08003971 	.word	0x08003971
 80038d0:	08003a01 	.word	0x08003a01
 80038d4:	08003a01 	.word	0x08003a01
 80038d8:	08003a01 	.word	0x08003a01
 80038dc:	080039b9 	.word	0x080039b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	4a66      	ldr	r2, [pc, #408]	; (8003a80 <HAL_TIM_IC_Start_DMA+0x318>)
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	4a65      	ldr	r2, [pc, #404]	; (8003a84 <HAL_TIM_IC_Start_DMA+0x31c>)
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	4a64      	ldr	r2, [pc, #400]	; (8003a88 <HAL_TIM_IC_Start_DMA+0x320>)
 80038f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3334      	adds	r3, #52	; 0x34
 8003902:	4619      	mov	r1, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	887b      	ldrh	r3, [r7, #2]
 8003908:	f7fe fd39 	bl	800237e <HAL_DMA_Start_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0b0      	b.n	8003a78 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003924:	60da      	str	r2, [r3, #12]
      break;
 8003926:	e06e      	b.n	8003a06 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	4a54      	ldr	r2, [pc, #336]	; (8003a80 <HAL_TIM_IC_Start_DMA+0x318>)
 800392e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	4a53      	ldr	r2, [pc, #332]	; (8003a84 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	4a52      	ldr	r2, [pc, #328]	; (8003a88 <HAL_TIM_IC_Start_DMA+0x320>)
 800393e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3338      	adds	r3, #56	; 0x38
 800394a:	4619      	mov	r1, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	887b      	ldrh	r3, [r7, #2]
 8003950:	f7fe fd15 	bl	800237e <HAL_DMA_Start_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e08c      	b.n	8003a78 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800396c:	60da      	str	r2, [r3, #12]
      break;
 800396e:	e04a      	b.n	8003a06 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_TIM_IC_Start_DMA+0x318>)
 8003976:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4a41      	ldr	r2, [pc, #260]	; (8003a84 <HAL_TIM_IC_Start_DMA+0x31c>)
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <HAL_TIM_IC_Start_DMA+0x320>)
 8003986:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	333c      	adds	r3, #60	; 0x3c
 8003992:	4619      	mov	r1, r3
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	887b      	ldrh	r3, [r7, #2]
 8003998:	f7fe fcf1 	bl	800237e <HAL_DMA_Start_IT>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e068      	b.n	8003a78 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b4:	60da      	str	r2, [r3, #12]
      break;
 80039b6:	e026      	b.n	8003a06 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_TIM_IC_Start_DMA+0x318>)
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <HAL_TIM_IC_Start_DMA+0x31c>)
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4a2e      	ldr	r2, [pc, #184]	; (8003a88 <HAL_TIM_IC_Start_DMA+0x320>)
 80039ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3340      	adds	r3, #64	; 0x40
 80039da:	4619      	mov	r1, r3
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	f7fe fccd 	bl	800237e <HAL_DMA_Start_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e044      	b.n	8003a78 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039fc:	60da      	str	r2, [r3, #12]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_TIM_IC_Start_DMA+0x324>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_TIM_IC_Start_DMA+0x2da>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d013      	beq.n	8003a42 <HAL_TIM_IC_Start_DMA+0x2da>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_TIM_IC_Start_DMA+0x328>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIM_IC_Start_DMA+0x2da>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_TIM_IC_Start_DMA+0x32c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIM_IC_Start_DMA+0x2da>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_TIM_IC_Start_DMA+0x330>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIM_IC_Start_DMA+0x2da>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_TIM_IC_Start_DMA+0x334>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d111      	bne.n	8003a66 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d010      	beq.n	8003a76 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	e007      	b.n	8003a76 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	08003e1d 	.word	0x08003e1d
 8003a84:	08003ee5 	.word	0x08003ee5
 8003a88:	08003d8b 	.word	0x08003d8b
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_IC_ConfigChannel+0x1e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e088      	b.n	8003bd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f000 fab4 	bl	8004048 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 020c 	bic.w	r2, r2, #12
 8003aee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6999      	ldr	r1, [r3, #24]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	619a      	str	r2, [r3, #24]
 8003b02:	e060      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d11c      	bne.n	8003b44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 fb29 	bl	8004170 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6999      	ldr	r1, [r3, #24]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	021a      	lsls	r2, r3, #8
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	619a      	str	r2, [r3, #24]
 8003b42:	e040      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11b      	bne.n	8003b82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f000 fb74 	bl	8004246 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 020c 	bic.w	r2, r2, #12
 8003b6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
 8003b80:	e021      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d11c      	bne.n	8003bc2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f000 fb90 	bl	80042bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003baa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69d9      	ldr	r1, [r3, #28]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
 8003bc0:	e001      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0b4      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x186>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2c:	d03e      	beq.n	8003cac <HAL_TIM_ConfigClockSource+0xd4>
 8003c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c32:	f200 8087 	bhi.w	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	f000 8086 	beq.w	8003d4a <HAL_TIM_ConfigClockSource+0x172>
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d87f      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c44:	2b70      	cmp	r3, #112	; 0x70
 8003c46:	d01a      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0xa6>
 8003c48:	2b70      	cmp	r3, #112	; 0x70
 8003c4a:	d87b      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4c:	2b60      	cmp	r3, #96	; 0x60
 8003c4e:	d050      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d877      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c54:	2b50      	cmp	r3, #80	; 0x50
 8003c56:	d03c      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c58:	2b50      	cmp	r3, #80	; 0x50
 8003c5a:	d873      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d058      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x13a>
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d86f      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b30      	cmp	r3, #48	; 0x30
 8003c66:	d064      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d86b      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d060      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d867      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d05a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	e062      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f000 fb6b 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	609a      	str	r2, [r3, #8]
      break;
 8003caa:	e04f      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f000 fb54 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cce:	609a      	str	r2, [r3, #8]
      break;
 8003cd0:	e03c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f000 fa18 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2150      	movs	r1, #80	; 0x50
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fb22 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e02c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f000 fa72 	bl	80041e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2160      	movs	r1, #96	; 0x60
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fb12 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 8003d10:	e01c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f000 f9f8 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fb02 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 8003d30:	e00c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 faf9 	bl	8004334 <TIM_ITRx_SetConfig>
      break;
 8003d42:	e003      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e000      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d107      	bne.n	8003db2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db0:	e02a      	b.n	8003e08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d107      	bne.n	8003dcc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dca:	e01d      	b.n	8003e08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d107      	bne.n	8003de6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	e010      	b.n	8003e08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2208      	movs	r2, #8
 8003df4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dfe:	e003      	b.n	8003e08 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff ffb5 	bl	8003d78 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d10f      	bne.n	8003e54 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d146      	bne.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e52:	e03d      	b.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d10f      	bne.n	8003e7e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2202      	movs	r2, #2
 8003e62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d131      	bne.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e7c:	e028      	b.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d10f      	bne.n	8003ea8 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d11c      	bne.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea6:	e013      	b.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10e      	bne.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d107      	bne.n	8003ed0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7fd fd7b 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d103      	bne.n	8003f04 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	771a      	strb	r2, [r3, #28]
 8003f02:	e019      	b.n	8003f38 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d103      	bne.n	8003f16 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2202      	movs	r2, #2
 8003f12:	771a      	strb	r2, [r3, #28]
 8003f14:	e010      	b.n	8003f38 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d103      	bne.n	8003f28 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2204      	movs	r2, #4
 8003f24:	771a      	strb	r2, [r3, #28]
 8003f26:	e007      	b.n	8003f38 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d102      	bne.n	8003f38 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2208      	movs	r2, #8
 8003f36:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff ff14 	bl	8003d66 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a33      	ldr	r2, [pc, #204]	; (800402c <TIM_Base_SetConfig+0xe0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00f      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d00b      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a30      	ldr	r2, [pc, #192]	; (8004030 <TIM_Base_SetConfig+0xe4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <TIM_Base_SetConfig+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <TIM_Base_SetConfig+0xec>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d108      	bne.n	8003f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a24      	ldr	r2, [pc, #144]	; (800402c <TIM_Base_SetConfig+0xe0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01b      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa4:	d017      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <TIM_Base_SetConfig+0xe4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a20      	ldr	r2, [pc, #128]	; (8004034 <TIM_Base_SetConfig+0xe8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <TIM_Base_SetConfig+0xec>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	; (800403c <TIM_Base_SetConfig+0xf0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <TIM_Base_SetConfig+0xf4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <TIM_Base_SetConfig+0xf8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a07      	ldr	r2, [pc, #28]	; (800402c <TIM_Base_SetConfig+0xe0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d103      	bne.n	800401c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	615a      	str	r2, [r3, #20]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800

08004048 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <TIM_TI1_SetConfig+0xb8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <TIM_TI1_SetConfig+0x56>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407c:	d00f      	beq.n	800409e <TIM_TI1_SetConfig+0x56>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <TIM_TI1_SetConfig+0xbc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_TI1_SetConfig+0x56>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <TIM_TI1_SetConfig+0xc0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_TI1_SetConfig+0x56>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a1e      	ldr	r2, [pc, #120]	; (800410c <TIM_TI1_SetConfig+0xc4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_TI1_SetConfig+0x56>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <TIM_TI1_SetConfig+0xc8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <TIM_TI1_SetConfig+0x5a>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <TIM_TI1_SetConfig+0x5c>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e003      	b.n	80040c2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f023 030a 	bic.w	r3, r3, #10
 80040dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 030a 	and.w	r3, r3, #10
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40010000 	.word	0x40010000
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40014000 	.word	0x40014000

08004114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 030a 	bic.w	r3, r3, #10
 8004150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	031b      	lsls	r3, r3, #12
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f023 0210 	bic.w	r2, r3, #16
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004212:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	031b      	lsls	r3, r3, #12
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004224:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004282:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	b2db      	uxtb	r3, r3
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004296:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	031b      	lsls	r3, r3, #12
 8004300:	b29b      	uxth	r3, r3
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800430e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	031b      	lsls	r3, r3, #12
 8004314:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	f043 0307 	orr.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	609a      	str	r2, [r3, #8]
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b087      	sub	sp, #28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2201      	movs	r2, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	401a      	ands	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1a      	ldr	r2, [r3, #32]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	431a      	orrs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004404:	2302      	movs	r3, #2
 8004406:	e050      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004454:	d013      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40000c00 	.word	0x40000c00
 80044c4:	40014000 	.word	0x40014000

080044c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e03f      	b.n	800455a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd fb76 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	; 0x24
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800450a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f929 	bl	8004764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08a      	sub	sp, #40	; 0x28
 8004566:	af02      	add	r7, sp, #8
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b20      	cmp	r3, #32
 8004580:	d17c      	bne.n	800467c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_UART_Transmit+0x2c>
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e075      	b.n	800467e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Transmit+0x3e>
 800459c:	2302      	movs	r3, #2
 800459e:	e06e      	b.n	800467e <HAL_UART_Transmit+0x11c>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2221      	movs	r2, #33	; 0x21
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045b6:	f7fd fce1 	bl	8001f7c <HAL_GetTick>
 80045ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d0:	d108      	bne.n	80045e4 <HAL_UART_Transmit+0x82>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e003      	b.n	80045ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045f4:	e02a      	b.n	800464c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f840 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e036      	b.n	800467e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	3302      	adds	r3, #2
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e007      	b.n	800463e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	3301      	adds	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1cf      	bne.n	80045f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	2140      	movs	r1, #64	; 0x40
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f810 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e006      	b.n	800467e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b090      	sub	sp, #64	; 0x40
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	e050      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469e:	d04c      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a6:	f7fd fc69 	bl	8001f7c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d241      	bcs.n	800473a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046d6:	637a      	str	r2, [r7, #52]	; 0x34
 80046d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3314      	adds	r3, #20
 80046f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	613b      	str	r3, [r7, #16]
   return(result);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3314      	adds	r3, #20
 8004708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800470a:	623a      	str	r2, [r7, #32]
 800470c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	69f9      	ldr	r1, [r7, #28]
 8004710:	6a3a      	ldr	r2, [r7, #32]
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	61bb      	str	r3, [r7, #24]
   return(result);
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e5      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e00f      	b.n	800475a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	429a      	cmp	r2, r3
 8004756:	d09f      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3740      	adds	r7, #64	; 0x40
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004768:	b0c0      	sub	sp, #256	; 0x100
 800476a:	af00      	add	r7, sp, #0
 800476c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	68d9      	ldr	r1, [r3, #12]
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	ea40 0301 	orr.w	r3, r0, r1
 800478c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	431a      	orrs	r2, r3
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047bc:	f021 010c 	bic.w	r1, r1, #12
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ca:	430b      	orrs	r3, r1
 80047cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	6999      	ldr	r1, [r3, #24]
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	ea40 0301 	orr.w	r3, r0, r1
 80047ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b91      	ldr	r3, [pc, #580]	; (8004a38 <UART_SetConfig+0x2d4>)
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d005      	beq.n	8004804 <UART_SetConfig+0xa0>
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b8f      	ldr	r3, [pc, #572]	; (8004a3c <UART_SetConfig+0x2d8>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d104      	bne.n	800480e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7fe fe9c 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 8004808:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800480c:	e003      	b.n	8004816 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800480e:	f7fe fe83 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8004812:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004820:	f040 8110 	bne.w	8004a44 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800482e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004832:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	1891      	adds	r1, r2, r2
 800483c:	65b9      	str	r1, [r7, #88]	; 0x58
 800483e:	415b      	adcs	r3, r3
 8004840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	4604      	mov	r4, r0
 800484c:	eb12 0804 	adds.w	r8, r2, r4
 8004850:	460c      	mov	r4, r1
 8004852:	eb43 0904 	adc.w	r9, r3, r4
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	4603      	mov	r3, r0
 8004870:	eb18 0303 	adds.w	r3, r8, r3
 8004874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004878:	460b      	mov	r3, r1
 800487a:	eb49 0303 	adc.w	r3, r9, r3
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800488e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004896:	460b      	mov	r3, r1
 8004898:	18db      	adds	r3, r3, r3
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
 800489c:	4613      	mov	r3, r2
 800489e:	eb42 0303 	adc.w	r3, r2, r3
 80048a2:	657b      	str	r3, [r7, #84]	; 0x54
 80048a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048ac:	f7fc fc52 	bl	8001154 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4b62      	ldr	r3, [pc, #392]	; (8004a40 <UART_SetConfig+0x2dc>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	011c      	lsls	r4, r3, #4
 80048be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	1891      	adds	r1, r2, r2
 80048d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048d8:	415b      	adcs	r3, r3
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048e0:	4645      	mov	r5, r8
 80048e2:	eb12 0a05 	adds.w	sl, r2, r5
 80048e6:	4640      	mov	r0, r8
 80048e8:	4649      	mov	r1, r9
 80048ea:	460d      	mov	r5, r1
 80048ec:	eb43 0b05 	adc.w	fp, r3, r5
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004904:	4692      	mov	sl, r2
 8004906:	469b      	mov	fp, r3
 8004908:	4603      	mov	r3, r0
 800490a:	eb1a 0303 	adds.w	r3, sl, r3
 800490e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004912:	460b      	mov	r3, r1
 8004914:	eb4b 0303 	adc.w	r3, fp, r3
 8004918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004928:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800492c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004930:	460b      	mov	r3, r1
 8004932:	18db      	adds	r3, r3, r3
 8004934:	643b      	str	r3, [r7, #64]	; 0x40
 8004936:	4613      	mov	r3, r2
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	647b      	str	r3, [r7, #68]	; 0x44
 800493e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004946:	f7fc fc05 	bl	8001154 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4611      	mov	r1, r2
 8004950:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <UART_SetConfig+0x2dc>)
 8004952:	fba3 2301 	umull	r2, r3, r3, r1
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2264      	movs	r2, #100	; 0x64
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	1acb      	subs	r3, r1, r3
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004966:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <UART_SetConfig+0x2dc>)
 8004968:	fba3 2302 	umull	r2, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004974:	441c      	add	r4, r3
 8004976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004980:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	1891      	adds	r1, r2, r2
 800498e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004990:	415b      	adcs	r3, r3
 8004992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004998:	4641      	mov	r1, r8
 800499a:	1851      	adds	r1, r2, r1
 800499c:	6339      	str	r1, [r7, #48]	; 0x30
 800499e:	4649      	mov	r1, r9
 80049a0:	414b      	adcs	r3, r1
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049b0:	4659      	mov	r1, fp
 80049b2:	00cb      	lsls	r3, r1, #3
 80049b4:	4655      	mov	r5, sl
 80049b6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80049ba:	4651      	mov	r1, sl
 80049bc:	00ca      	lsls	r2, r1, #3
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	4642      	mov	r2, r8
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049cc:	464b      	mov	r3, r9
 80049ce:	460a      	mov	r2, r1
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049ec:	460b      	mov	r3, r1
 80049ee:	18db      	adds	r3, r3, r3
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049f2:	4613      	mov	r3, r2
 80049f4:	eb42 0303 	adc.w	r3, r2, r3
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a02:	f7fc fba7 	bl	8001154 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <UART_SetConfig+0x2dc>)
 8004a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	2164      	movs	r1, #100	; 0x64
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	3332      	adds	r3, #50	; 0x32
 8004a1e:	4a08      	ldr	r2, [pc, #32]	; (8004a40 <UART_SetConfig+0x2dc>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 0207 	and.w	r2, r3, #7
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4422      	add	r2, r4
 8004a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a34:	e10a      	b.n	8004c4c <UART_SetConfig+0x4e8>
 8004a36:	bf00      	nop
 8004a38:	40011000 	.word	0x40011000
 8004a3c:	40011400 	.word	0x40011400
 8004a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a56:	4642      	mov	r2, r8
 8004a58:	464b      	mov	r3, r9
 8004a5a:	1891      	adds	r1, r2, r2
 8004a5c:	6239      	str	r1, [r7, #32]
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
 8004a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a66:	4641      	mov	r1, r8
 8004a68:	1854      	adds	r4, r2, r1
 8004a6a:	46cc      	mov	ip, r9
 8004a6c:	eb43 050c 	adc.w	r5, r3, ip
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	00eb      	lsls	r3, r5, #3
 8004a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7e:	00e2      	lsls	r2, r4, #3
 8004a80:	4614      	mov	r4, r2
 8004a82:	461d      	mov	r5, r3
 8004a84:	4640      	mov	r0, r8
 8004a86:	4649      	mov	r1, r9
 8004a88:	4603      	mov	r3, r0
 8004a8a:	18e3      	adds	r3, r4, r3
 8004a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a90:	460b      	mov	r3, r1
 8004a92:	eb45 0303 	adc.w	r3, r5, r3
 8004a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	008b      	lsls	r3, r1, #2
 8004aba:	4620      	mov	r0, r4
 8004abc:	4629      	mov	r1, r5
 8004abe:	4604      	mov	r4, r0
 8004ac0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	008a      	lsls	r2, r1, #2
 8004ac8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004acc:	f7fc fb42 	bl	8001154 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <UART_SetConfig+0x4f4>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	011c      	lsls	r4, r3, #4
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004aec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	61b9      	str	r1, [r7, #24]
 8004af8:	415b      	adcs	r3, r3
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b00:	4641      	mov	r1, r8
 8004b02:	1851      	adds	r1, r2, r1
 8004b04:	6139      	str	r1, [r7, #16]
 8004b06:	4649      	mov	r1, r9
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b18:	4659      	mov	r1, fp
 8004b1a:	00cb      	lsls	r3, r1, #3
 8004b1c:	4655      	mov	r5, sl
 8004b1e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004b22:	4651      	mov	r1, sl
 8004b24:	00ca      	lsls	r2, r1, #3
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b34:	464b      	mov	r3, r9
 8004b36:	460a      	mov	r2, r1
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b58:	4649      	mov	r1, r9
 8004b5a:	008b      	lsls	r3, r1, #2
 8004b5c:	4645      	mov	r5, r8
 8004b5e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004b62:	4641      	mov	r1, r8
 8004b64:	008a      	lsls	r2, r1, #2
 8004b66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b6a:	f7fc faf3 	bl	8001154 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <UART_SetConfig+0x4f4>)
 8004b76:	fba3 2301 	umull	r2, r3, r3, r1
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	2264      	movs	r2, #100	; 0x64
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	1acb      	subs	r3, r1, r3
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	3332      	adds	r3, #50	; 0x32
 8004b88:	4a33      	ldr	r2, [pc, #204]	; (8004c58 <UART_SetConfig+0x4f4>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b94:	441c      	add	r4, r3
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b9e:	677a      	str	r2, [r7, #116]	; 0x74
 8004ba0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	415b      	adcs	r3, r3
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	1851      	adds	r1, r2, r1
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	4649      	mov	r1, r9
 8004bbc:	414b      	adcs	r3, r1
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bcc:	4659      	mov	r1, fp
 8004bce:	00cb      	lsls	r3, r1, #3
 8004bd0:	4655      	mov	r5, sl
 8004bd2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	00ca      	lsls	r2, r1, #3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	4642      	mov	r2, r8
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be6:	464b      	mov	r3, r9
 8004be8:	460a      	mov	r2, r1
 8004bea:	eb42 0303 	adc.w	r3, r2, r3
 8004bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bfa:	667a      	str	r2, [r7, #100]	; 0x64
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c08:	4649      	mov	r1, r9
 8004c0a:	008b      	lsls	r3, r1, #2
 8004c0c:	4645      	mov	r5, r8
 8004c0e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004c12:	4641      	mov	r1, r8
 8004c14:	008a      	lsls	r2, r1, #2
 8004c16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c1a:	f7fc fa9b 	bl	8001154 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <UART_SetConfig+0x4f4>)
 8004c24:	fba3 1302 	umull	r1, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2164      	movs	r1, #100	; 0x64
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	3332      	adds	r3, #50	; 0x32
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <UART_SetConfig+0x4f4>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4422      	add	r2, r4
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c52:	46bd      	mov	sp, r7
 8004c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <__cvt>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	461f      	mov	r7, r3
 8004c66:	4614      	mov	r4, r2
 8004c68:	bfb8      	it	lt
 8004c6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c70:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c72:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004c76:	bfb6      	itet	lt
 8004c78:	461f      	movlt	r7, r3
 8004c7a:	2300      	movge	r3, #0
 8004c7c:	232d      	movlt	r3, #45	; 0x2d
 8004c7e:	7013      	strb	r3, [r2, #0]
 8004c80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c82:	f023 0820 	bic.w	r8, r3, #32
 8004c86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c8a:	d005      	beq.n	8004c98 <__cvt+0x3c>
 8004c8c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c90:	d100      	bne.n	8004c94 <__cvt+0x38>
 8004c92:	3501      	adds	r5, #1
 8004c94:	2302      	movs	r3, #2
 8004c96:	e000      	b.n	8004c9a <__cvt+0x3e>
 8004c98:	2303      	movs	r3, #3
 8004c9a:	aa07      	add	r2, sp, #28
 8004c9c:	9204      	str	r2, [sp, #16]
 8004c9e:	aa06      	add	r2, sp, #24
 8004ca0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ca4:	e9cd 3500 	strd	r3, r5, [sp]
 8004ca8:	4622      	mov	r2, r4
 8004caa:	463b      	mov	r3, r7
 8004cac:	f001 f858 	bl	8005d60 <_dtoa_r>
 8004cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	d102      	bne.n	8004cbe <__cvt+0x62>
 8004cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cba:	07db      	lsls	r3, r3, #31
 8004cbc:	d522      	bpl.n	8004d04 <__cvt+0xa8>
 8004cbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cc2:	eb06 0905 	add.w	r9, r6, r5
 8004cc6:	d110      	bne.n	8004cea <__cvt+0x8e>
 8004cc8:	7833      	ldrb	r3, [r6, #0]
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d10a      	bne.n	8004ce4 <__cvt+0x88>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	f7fb feff 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cda:	b918      	cbnz	r0, 8004ce4 <__cvt+0x88>
 8004cdc:	f1c5 0501 	rsb	r5, r5, #1
 8004ce0:	f8ca 5000 	str.w	r5, [sl]
 8004ce4:	f8da 3000 	ldr.w	r3, [sl]
 8004ce8:	4499      	add	r9, r3
 8004cea:	2200      	movs	r2, #0
 8004cec:	2300      	movs	r3, #0
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	f7fb fef1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cf6:	b108      	cbz	r0, 8004cfc <__cvt+0xa0>
 8004cf8:	f8cd 901c 	str.w	r9, [sp, #28]
 8004cfc:	2230      	movs	r2, #48	; 0x30
 8004cfe:	9b07      	ldr	r3, [sp, #28]
 8004d00:	454b      	cmp	r3, r9
 8004d02:	d307      	bcc.n	8004d14 <__cvt+0xb8>
 8004d04:	9b07      	ldr	r3, [sp, #28]
 8004d06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d08:	1b9b      	subs	r3, r3, r6
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	b008      	add	sp, #32
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	9107      	str	r1, [sp, #28]
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e7f0      	b.n	8004cfe <__cvt+0xa2>

08004d1c <__exponent>:
 8004d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2900      	cmp	r1, #0
 8004d22:	bfb8      	it	lt
 8004d24:	4249      	neglt	r1, r1
 8004d26:	f803 2b02 	strb.w	r2, [r3], #2
 8004d2a:	bfb4      	ite	lt
 8004d2c:	222d      	movlt	r2, #45	; 0x2d
 8004d2e:	222b      	movge	r2, #43	; 0x2b
 8004d30:	2909      	cmp	r1, #9
 8004d32:	7042      	strb	r2, [r0, #1]
 8004d34:	dd2a      	ble.n	8004d8c <__exponent+0x70>
 8004d36:	f10d 0207 	add.w	r2, sp, #7
 8004d3a:	4617      	mov	r7, r2
 8004d3c:	260a      	movs	r6, #10
 8004d3e:	4694      	mov	ip, r2
 8004d40:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d44:	fb06 1415 	mls	r4, r6, r5, r1
 8004d48:	3430      	adds	r4, #48	; 0x30
 8004d4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004d4e:	460c      	mov	r4, r1
 8004d50:	2c63      	cmp	r4, #99	; 0x63
 8004d52:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004d56:	4629      	mov	r1, r5
 8004d58:	dcf1      	bgt.n	8004d3e <__exponent+0x22>
 8004d5a:	3130      	adds	r1, #48	; 0x30
 8004d5c:	f1ac 0402 	sub.w	r4, ip, #2
 8004d60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d64:	1c41      	adds	r1, r0, #1
 8004d66:	4622      	mov	r2, r4
 8004d68:	42ba      	cmp	r2, r7
 8004d6a:	d30a      	bcc.n	8004d82 <__exponent+0x66>
 8004d6c:	f10d 0209 	add.w	r2, sp, #9
 8004d70:	eba2 020c 	sub.w	r2, r2, ip
 8004d74:	42bc      	cmp	r4, r7
 8004d76:	bf88      	it	hi
 8004d78:	2200      	movhi	r2, #0
 8004d7a:	4413      	add	r3, r2
 8004d7c:	1a18      	subs	r0, r3, r0
 8004d7e:	b003      	add	sp, #12
 8004d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004d86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004d8a:	e7ed      	b.n	8004d68 <__exponent+0x4c>
 8004d8c:	2330      	movs	r3, #48	; 0x30
 8004d8e:	3130      	adds	r1, #48	; 0x30
 8004d90:	7083      	strb	r3, [r0, #2]
 8004d92:	70c1      	strb	r1, [r0, #3]
 8004d94:	1d03      	adds	r3, r0, #4
 8004d96:	e7f1      	b.n	8004d7c <__exponent+0x60>

08004d98 <_printf_float>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	b091      	sub	sp, #68	; 0x44
 8004d9e:	460c      	mov	r4, r1
 8004da0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004da4:	4616      	mov	r6, r2
 8004da6:	461f      	mov	r7, r3
 8004da8:	4605      	mov	r5, r0
 8004daa:	f000 fed9 	bl	8005b60 <_localeconv_r>
 8004dae:	6803      	ldr	r3, [r0, #0]
 8004db0:	9309      	str	r3, [sp, #36]	; 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fb fa64 	bl	8000280 <strlen>
 8004db8:	2300      	movs	r3, #0
 8004dba:	930e      	str	r3, [sp, #56]	; 0x38
 8004dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc0:	900a      	str	r0, [sp, #40]	; 0x28
 8004dc2:	3307      	adds	r3, #7
 8004dc4:	f023 0307 	bic.w	r3, r3, #7
 8004dc8:	f103 0208 	add.w	r2, r3, #8
 8004dcc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004dd0:	f8d4 b000 	ldr.w	fp, [r4]
 8004dd4:	f8c8 2000 	str.w	r2, [r8]
 8004dd8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004ddc:	4652      	mov	r2, sl
 8004dde:	4643      	mov	r3, r8
 8004de0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004de4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dec:	4b9c      	ldr	r3, [pc, #624]	; (8005060 <_printf_float+0x2c8>)
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df2:	4650      	mov	r0, sl
 8004df4:	f7fb fea2 	bl	8000b3c <__aeabi_dcmpun>
 8004df8:	bb70      	cbnz	r0, 8004e58 <_printf_float+0xc0>
 8004dfa:	4b99      	ldr	r3, [pc, #612]	; (8005060 <_printf_float+0x2c8>)
 8004dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e02:	4650      	mov	r0, sl
 8004e04:	f7fb fe7c 	bl	8000b00 <__aeabi_dcmple>
 8004e08:	bb30      	cbnz	r0, 8004e58 <_printf_float+0xc0>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4650      	mov	r0, sl
 8004e10:	4641      	mov	r1, r8
 8004e12:	f7fb fe6b 	bl	8000aec <__aeabi_dcmplt>
 8004e16:	b110      	cbz	r0, 8004e1e <_printf_float+0x86>
 8004e18:	232d      	movs	r3, #45	; 0x2d
 8004e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e1e:	4a91      	ldr	r2, [pc, #580]	; (8005064 <_printf_float+0x2cc>)
 8004e20:	4b91      	ldr	r3, [pc, #580]	; (8005068 <_printf_float+0x2d0>)
 8004e22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e26:	bf94      	ite	ls
 8004e28:	4690      	movls	r8, r2
 8004e2a:	4698      	movhi	r8, r3
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	f02b 0304 	bic.w	r3, fp, #4
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	f04f 0a00 	mov.w	sl, #0
 8004e3a:	9700      	str	r7, [sp, #0]
 8004e3c:	4633      	mov	r3, r6
 8004e3e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e40:	4621      	mov	r1, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 f9d4 	bl	80051f0 <_printf_common>
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f040 808f 	bne.w	8004f6c <_printf_float+0x1d4>
 8004e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e52:	b011      	add	sp, #68	; 0x44
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	4652      	mov	r2, sl
 8004e5a:	4643      	mov	r3, r8
 8004e5c:	4650      	mov	r0, sl
 8004e5e:	4641      	mov	r1, r8
 8004e60:	f7fb fe6c 	bl	8000b3c <__aeabi_dcmpun>
 8004e64:	b140      	cbz	r0, 8004e78 <_printf_float+0xe0>
 8004e66:	f1b8 0f00 	cmp.w	r8, #0
 8004e6a:	bfbc      	itt	lt
 8004e6c:	232d      	movlt	r3, #45	; 0x2d
 8004e6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e72:	4a7e      	ldr	r2, [pc, #504]	; (800506c <_printf_float+0x2d4>)
 8004e74:	4b7e      	ldr	r3, [pc, #504]	; (8005070 <_printf_float+0x2d8>)
 8004e76:	e7d4      	b.n	8004e22 <_printf_float+0x8a>
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004e80:	d142      	bne.n	8004f08 <_printf_float+0x170>
 8004e82:	2306      	movs	r3, #6
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	9206      	str	r2, [sp, #24]
 8004e8a:	aa0e      	add	r2, sp, #56	; 0x38
 8004e8c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004e90:	aa0d      	add	r2, sp, #52	; 0x34
 8004e92:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004e96:	9203      	str	r2, [sp, #12]
 8004e98:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004e9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	6863      	ldr	r3, [r4, #4]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4652      	mov	r2, sl
 8004ea8:	4643      	mov	r3, r8
 8004eaa:	4628      	mov	r0, r5
 8004eac:	910b      	str	r1, [sp, #44]	; 0x2c
 8004eae:	f7ff fed5 	bl	8004c5c <__cvt>
 8004eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eb4:	2947      	cmp	r1, #71	; 0x47
 8004eb6:	4680      	mov	r8, r0
 8004eb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eba:	d108      	bne.n	8004ece <_printf_float+0x136>
 8004ebc:	1cc8      	adds	r0, r1, #3
 8004ebe:	db02      	blt.n	8004ec6 <_printf_float+0x12e>
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	4299      	cmp	r1, r3
 8004ec4:	dd40      	ble.n	8004f48 <_printf_float+0x1b0>
 8004ec6:	f1a9 0902 	sub.w	r9, r9, #2
 8004eca:	fa5f f989 	uxtb.w	r9, r9
 8004ece:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ed2:	d81f      	bhi.n	8004f14 <_printf_float+0x17c>
 8004ed4:	3901      	subs	r1, #1
 8004ed6:	464a      	mov	r2, r9
 8004ed8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004edc:	910d      	str	r1, [sp, #52]	; 0x34
 8004ede:	f7ff ff1d 	bl	8004d1c <__exponent>
 8004ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ee4:	1813      	adds	r3, r2, r0
 8004ee6:	2a01      	cmp	r2, #1
 8004ee8:	4682      	mov	sl, r0
 8004eea:	6123      	str	r3, [r4, #16]
 8004eec:	dc02      	bgt.n	8004ef4 <_printf_float+0x15c>
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	07d2      	lsls	r2, r2, #31
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_float+0x160>
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d09c      	beq.n	8004e3a <_printf_float+0xa2>
 8004f00:	232d      	movs	r3, #45	; 0x2d
 8004f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f06:	e798      	b.n	8004e3a <_printf_float+0xa2>
 8004f08:	2947      	cmp	r1, #71	; 0x47
 8004f0a:	d1bc      	bne.n	8004e86 <_printf_float+0xee>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ba      	bne.n	8004e86 <_printf_float+0xee>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e7b7      	b.n	8004e84 <_printf_float+0xec>
 8004f14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f18:	d118      	bne.n	8004f4c <_printf_float+0x1b4>
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	dd0b      	ble.n	8004f38 <_printf_float+0x1a0>
 8004f20:	6121      	str	r1, [r4, #16]
 8004f22:	b913      	cbnz	r3, 8004f2a <_printf_float+0x192>
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	07d0      	lsls	r0, r2, #31
 8004f28:	d502      	bpl.n	8004f30 <_printf_float+0x198>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	440b      	add	r3, r1
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f32:	f04f 0a00 	mov.w	sl, #0
 8004f36:	e7df      	b.n	8004ef8 <_printf_float+0x160>
 8004f38:	b913      	cbnz	r3, 8004f40 <_printf_float+0x1a8>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	07d2      	lsls	r2, r2, #31
 8004f3e:	d501      	bpl.n	8004f44 <_printf_float+0x1ac>
 8004f40:	3302      	adds	r3, #2
 8004f42:	e7f4      	b.n	8004f2e <_printf_float+0x196>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e7f2      	b.n	8004f2e <_printf_float+0x196>
 8004f48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	db05      	blt.n	8004f5e <_printf_float+0x1c6>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	6121      	str	r1, [r4, #16]
 8004f56:	07d8      	lsls	r0, r3, #31
 8004f58:	d5ea      	bpl.n	8004f30 <_printf_float+0x198>
 8004f5a:	1c4b      	adds	r3, r1, #1
 8004f5c:	e7e7      	b.n	8004f2e <_printf_float+0x196>
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	bfd4      	ite	le
 8004f62:	f1c1 0202 	rsble	r2, r1, #2
 8004f66:	2201      	movgt	r2, #1
 8004f68:	4413      	add	r3, r2
 8004f6a:	e7e0      	b.n	8004f2e <_printf_float+0x196>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	055a      	lsls	r2, r3, #21
 8004f70:	d407      	bmi.n	8004f82 <_printf_float+0x1ea>
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	4642      	mov	r2, r8
 8004f76:	4631      	mov	r1, r6
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b8      	blx	r7
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d12b      	bne.n	8004fd8 <_printf_float+0x240>
 8004f80:	e765      	b.n	8004e4e <_printf_float+0xb6>
 8004f82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f86:	f240 80dc 	bls.w	8005142 <_printf_float+0x3aa>
 8004f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	f7fb fda1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d033      	beq.n	8005002 <_printf_float+0x26a>
 8004f9a:	4a36      	ldr	r2, [pc, #216]	; (8005074 <_printf_float+0x2dc>)
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	f43f af52 	beq.w	8004e4e <_printf_float+0xb6>
 8004faa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	db02      	blt.n	8004fb8 <_printf_float+0x220>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	07d8      	lsls	r0, r3, #31
 8004fb6:	d50f      	bpl.n	8004fd8 <_printf_float+0x240>
 8004fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b8      	blx	r7
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f43f af43 	beq.w	8004e4e <_printf_float+0xb6>
 8004fc8:	f04f 0800 	mov.w	r8, #0
 8004fcc:	f104 091a 	add.w	r9, r4, #26
 8004fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	4543      	cmp	r3, r8
 8004fd6:	dc09      	bgt.n	8004fec <_printf_float+0x254>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	079b      	lsls	r3, r3, #30
 8004fdc:	f100 8103 	bmi.w	80051e6 <_printf_float+0x44e>
 8004fe0:	68e0      	ldr	r0, [r4, #12]
 8004fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fe4:	4298      	cmp	r0, r3
 8004fe6:	bfb8      	it	lt
 8004fe8:	4618      	movlt	r0, r3
 8004fea:	e732      	b.n	8004e52 <_printf_float+0xba>
 8004fec:	2301      	movs	r3, #1
 8004fee:	464a      	mov	r2, r9
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f af29 	beq.w	8004e4e <_printf_float+0xb6>
 8004ffc:	f108 0801 	add.w	r8, r8, #1
 8005000:	e7e6      	b.n	8004fd0 <_printf_float+0x238>
 8005002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005004:	2b00      	cmp	r3, #0
 8005006:	dc37      	bgt.n	8005078 <_printf_float+0x2e0>
 8005008:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <_printf_float+0x2dc>)
 800500a:	2301      	movs	r3, #1
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af1b 	beq.w	8004e4e <_printf_float+0xb6>
 8005018:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800501c:	4313      	orrs	r3, r2
 800501e:	d102      	bne.n	8005026 <_printf_float+0x28e>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d5d8      	bpl.n	8004fd8 <_printf_float+0x240>
 8005026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	f43f af0c 	beq.w	8004e4e <_printf_float+0xb6>
 8005036:	f04f 0900 	mov.w	r9, #0
 800503a:	f104 0a1a 	add.w	sl, r4, #26
 800503e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005040:	425b      	negs	r3, r3
 8005042:	454b      	cmp	r3, r9
 8005044:	dc01      	bgt.n	800504a <_printf_float+0x2b2>
 8005046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005048:	e794      	b.n	8004f74 <_printf_float+0x1dc>
 800504a:	2301      	movs	r3, #1
 800504c:	4652      	mov	r2, sl
 800504e:	4631      	mov	r1, r6
 8005050:	4628      	mov	r0, r5
 8005052:	47b8      	blx	r7
 8005054:	3001      	adds	r0, #1
 8005056:	f43f aefa 	beq.w	8004e4e <_printf_float+0xb6>
 800505a:	f109 0901 	add.w	r9, r9, #1
 800505e:	e7ee      	b.n	800503e <_printf_float+0x2a6>
 8005060:	7fefffff 	.word	0x7fefffff
 8005064:	080093b0 	.word	0x080093b0
 8005068:	080093b4 	.word	0x080093b4
 800506c:	080093b8 	.word	0x080093b8
 8005070:	080093bc 	.word	0x080093bc
 8005074:	080093c0 	.word	0x080093c0
 8005078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800507a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800507c:	429a      	cmp	r2, r3
 800507e:	bfa8      	it	ge
 8005080:	461a      	movge	r2, r3
 8005082:	2a00      	cmp	r2, #0
 8005084:	4691      	mov	r9, r2
 8005086:	dc37      	bgt.n	80050f8 <_printf_float+0x360>
 8005088:	f04f 0b00 	mov.w	fp, #0
 800508c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005090:	f104 021a 	add.w	r2, r4, #26
 8005094:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005098:	ebaa 0309 	sub.w	r3, sl, r9
 800509c:	455b      	cmp	r3, fp
 800509e:	dc33      	bgt.n	8005108 <_printf_float+0x370>
 80050a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050a4:	429a      	cmp	r2, r3
 80050a6:	db3b      	blt.n	8005120 <_printf_float+0x388>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	07da      	lsls	r2, r3, #31
 80050ac:	d438      	bmi.n	8005120 <_printf_float+0x388>
 80050ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80050b2:	eba2 0903 	sub.w	r9, r2, r3
 80050b6:	eba2 020a 	sub.w	r2, r2, sl
 80050ba:	4591      	cmp	r9, r2
 80050bc:	bfa8      	it	ge
 80050be:	4691      	movge	r9, r2
 80050c0:	f1b9 0f00 	cmp.w	r9, #0
 80050c4:	dc34      	bgt.n	8005130 <_printf_float+0x398>
 80050c6:	f04f 0800 	mov.w	r8, #0
 80050ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050ce:	f104 0a1a 	add.w	sl, r4, #26
 80050d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	eba3 0309 	sub.w	r3, r3, r9
 80050dc:	4543      	cmp	r3, r8
 80050de:	f77f af7b 	ble.w	8004fd8 <_printf_float+0x240>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4652      	mov	r2, sl
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	f43f aeae 	beq.w	8004e4e <_printf_float+0xb6>
 80050f2:	f108 0801 	add.w	r8, r8, #1
 80050f6:	e7ec      	b.n	80050d2 <_printf_float+0x33a>
 80050f8:	4613      	mov	r3, r2
 80050fa:	4631      	mov	r1, r6
 80050fc:	4642      	mov	r2, r8
 80050fe:	4628      	mov	r0, r5
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	d1c0      	bne.n	8005088 <_printf_float+0x2f0>
 8005106:	e6a2      	b.n	8004e4e <_printf_float+0xb6>
 8005108:	2301      	movs	r3, #1
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005110:	47b8      	blx	r7
 8005112:	3001      	adds	r0, #1
 8005114:	f43f ae9b 	beq.w	8004e4e <_printf_float+0xb6>
 8005118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800511a:	f10b 0b01 	add.w	fp, fp, #1
 800511e:	e7b9      	b.n	8005094 <_printf_float+0x2fc>
 8005120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	d1bf      	bne.n	80050ae <_printf_float+0x316>
 800512e:	e68e      	b.n	8004e4e <_printf_float+0xb6>
 8005130:	464b      	mov	r3, r9
 8005132:	eb08 020a 	add.w	r2, r8, sl
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	d1c2      	bne.n	80050c6 <_printf_float+0x32e>
 8005140:	e685      	b.n	8004e4e <_printf_float+0xb6>
 8005142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005144:	2a01      	cmp	r2, #1
 8005146:	dc01      	bgt.n	800514c <_printf_float+0x3b4>
 8005148:	07db      	lsls	r3, r3, #31
 800514a:	d539      	bpl.n	80051c0 <_printf_float+0x428>
 800514c:	2301      	movs	r3, #1
 800514e:	4642      	mov	r2, r8
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f ae79 	beq.w	8004e4e <_printf_float+0xb6>
 800515c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005160:	4631      	mov	r1, r6
 8005162:	4628      	mov	r0, r5
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f ae71 	beq.w	8004e4e <_printf_float+0xb6>
 800516c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005170:	2200      	movs	r2, #0
 8005172:	2300      	movs	r3, #0
 8005174:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005178:	f7fb fcae 	bl	8000ad8 <__aeabi_dcmpeq>
 800517c:	b9d8      	cbnz	r0, 80051b6 <_printf_float+0x41e>
 800517e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8005182:	f108 0201 	add.w	r2, r8, #1
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	d10e      	bne.n	80051ae <_printf_float+0x416>
 8005190:	e65d      	b.n	8004e4e <_printf_float+0xb6>
 8005192:	2301      	movs	r3, #1
 8005194:	464a      	mov	r2, r9
 8005196:	4631      	mov	r1, r6
 8005198:	4628      	mov	r0, r5
 800519a:	47b8      	blx	r7
 800519c:	3001      	adds	r0, #1
 800519e:	f43f ae56 	beq.w	8004e4e <_printf_float+0xb6>
 80051a2:	f108 0801 	add.w	r8, r8, #1
 80051a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051a8:	3b01      	subs	r3, #1
 80051aa:	4543      	cmp	r3, r8
 80051ac:	dcf1      	bgt.n	8005192 <_printf_float+0x3fa>
 80051ae:	4653      	mov	r3, sl
 80051b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051b4:	e6df      	b.n	8004f76 <_printf_float+0x1de>
 80051b6:	f04f 0800 	mov.w	r8, #0
 80051ba:	f104 091a 	add.w	r9, r4, #26
 80051be:	e7f2      	b.n	80051a6 <_printf_float+0x40e>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4642      	mov	r2, r8
 80051c4:	e7df      	b.n	8005186 <_printf_float+0x3ee>
 80051c6:	2301      	movs	r3, #1
 80051c8:	464a      	mov	r2, r9
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	f43f ae3c 	beq.w	8004e4e <_printf_float+0xb6>
 80051d6:	f108 0801 	add.w	r8, r8, #1
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051de:	1a5b      	subs	r3, r3, r1
 80051e0:	4543      	cmp	r3, r8
 80051e2:	dcf0      	bgt.n	80051c6 <_printf_float+0x42e>
 80051e4:	e6fc      	b.n	8004fe0 <_printf_float+0x248>
 80051e6:	f04f 0800 	mov.w	r8, #0
 80051ea:	f104 0919 	add.w	r9, r4, #25
 80051ee:	e7f4      	b.n	80051da <_printf_float+0x442>

080051f0 <_printf_common>:
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	4616      	mov	r6, r2
 80051f6:	4699      	mov	r9, r3
 80051f8:	688a      	ldr	r2, [r1, #8]
 80051fa:	690b      	ldr	r3, [r1, #16]
 80051fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005200:	4293      	cmp	r3, r2
 8005202:	bfb8      	it	lt
 8005204:	4613      	movlt	r3, r2
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800520c:	4607      	mov	r7, r0
 800520e:	460c      	mov	r4, r1
 8005210:	b10a      	cbz	r2, 8005216 <_printf_common+0x26>
 8005212:	3301      	adds	r3, #1
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	0699      	lsls	r1, r3, #26
 800521a:	bf42      	ittt	mi
 800521c:	6833      	ldrmi	r3, [r6, #0]
 800521e:	3302      	addmi	r3, #2
 8005220:	6033      	strmi	r3, [r6, #0]
 8005222:	6825      	ldr	r5, [r4, #0]
 8005224:	f015 0506 	ands.w	r5, r5, #6
 8005228:	d106      	bne.n	8005238 <_printf_common+0x48>
 800522a:	f104 0a19 	add.w	sl, r4, #25
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	6832      	ldr	r2, [r6, #0]
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	42ab      	cmp	r3, r5
 8005236:	dc26      	bgt.n	8005286 <_printf_common+0x96>
 8005238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800523c:	1e13      	subs	r3, r2, #0
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	bf18      	it	ne
 8005242:	2301      	movne	r3, #1
 8005244:	0692      	lsls	r2, r2, #26
 8005246:	d42b      	bmi.n	80052a0 <_printf_common+0xb0>
 8005248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800524c:	4649      	mov	r1, r9
 800524e:	4638      	mov	r0, r7
 8005250:	47c0      	blx	r8
 8005252:	3001      	adds	r0, #1
 8005254:	d01e      	beq.n	8005294 <_printf_common+0xa4>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	6922      	ldr	r2, [r4, #16]
 800525a:	f003 0306 	and.w	r3, r3, #6
 800525e:	2b04      	cmp	r3, #4
 8005260:	bf02      	ittt	eq
 8005262:	68e5      	ldreq	r5, [r4, #12]
 8005264:	6833      	ldreq	r3, [r6, #0]
 8005266:	1aed      	subeq	r5, r5, r3
 8005268:	68a3      	ldr	r3, [r4, #8]
 800526a:	bf0c      	ite	eq
 800526c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005270:	2500      	movne	r5, #0
 8005272:	4293      	cmp	r3, r2
 8005274:	bfc4      	itt	gt
 8005276:	1a9b      	subgt	r3, r3, r2
 8005278:	18ed      	addgt	r5, r5, r3
 800527a:	2600      	movs	r6, #0
 800527c:	341a      	adds	r4, #26
 800527e:	42b5      	cmp	r5, r6
 8005280:	d11a      	bne.n	80052b8 <_printf_common+0xc8>
 8005282:	2000      	movs	r0, #0
 8005284:	e008      	b.n	8005298 <_printf_common+0xa8>
 8005286:	2301      	movs	r3, #1
 8005288:	4652      	mov	r2, sl
 800528a:	4649      	mov	r1, r9
 800528c:	4638      	mov	r0, r7
 800528e:	47c0      	blx	r8
 8005290:	3001      	adds	r0, #1
 8005292:	d103      	bne.n	800529c <_printf_common+0xac>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	3501      	adds	r5, #1
 800529e:	e7c6      	b.n	800522e <_printf_common+0x3e>
 80052a0:	18e1      	adds	r1, r4, r3
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	2030      	movs	r0, #48	; 0x30
 80052a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052aa:	4422      	add	r2, r4
 80052ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052b4:	3302      	adds	r3, #2
 80052b6:	e7c7      	b.n	8005248 <_printf_common+0x58>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4622      	mov	r2, r4
 80052bc:	4649      	mov	r1, r9
 80052be:	4638      	mov	r0, r7
 80052c0:	47c0      	blx	r8
 80052c2:	3001      	adds	r0, #1
 80052c4:	d0e6      	beq.n	8005294 <_printf_common+0xa4>
 80052c6:	3601      	adds	r6, #1
 80052c8:	e7d9      	b.n	800527e <_printf_common+0x8e>
	...

080052cc <_printf_i>:
 80052cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	7e0f      	ldrb	r7, [r1, #24]
 80052d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052d4:	2f78      	cmp	r7, #120	; 0x78
 80052d6:	4691      	mov	r9, r2
 80052d8:	4680      	mov	r8, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	469a      	mov	sl, r3
 80052de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052e2:	d807      	bhi.n	80052f4 <_printf_i+0x28>
 80052e4:	2f62      	cmp	r7, #98	; 0x62
 80052e6:	d80a      	bhi.n	80052fe <_printf_i+0x32>
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	f000 80d4 	beq.w	8005496 <_printf_i+0x1ca>
 80052ee:	2f58      	cmp	r7, #88	; 0x58
 80052f0:	f000 80c0 	beq.w	8005474 <_printf_i+0x1a8>
 80052f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052fc:	e03a      	b.n	8005374 <_printf_i+0xa8>
 80052fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005302:	2b15      	cmp	r3, #21
 8005304:	d8f6      	bhi.n	80052f4 <_printf_i+0x28>
 8005306:	a101      	add	r1, pc, #4	; (adr r1, 800530c <_printf_i+0x40>)
 8005308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800530c:	08005365 	.word	0x08005365
 8005310:	08005379 	.word	0x08005379
 8005314:	080052f5 	.word	0x080052f5
 8005318:	080052f5 	.word	0x080052f5
 800531c:	080052f5 	.word	0x080052f5
 8005320:	080052f5 	.word	0x080052f5
 8005324:	08005379 	.word	0x08005379
 8005328:	080052f5 	.word	0x080052f5
 800532c:	080052f5 	.word	0x080052f5
 8005330:	080052f5 	.word	0x080052f5
 8005334:	080052f5 	.word	0x080052f5
 8005338:	0800547d 	.word	0x0800547d
 800533c:	080053a5 	.word	0x080053a5
 8005340:	08005437 	.word	0x08005437
 8005344:	080052f5 	.word	0x080052f5
 8005348:	080052f5 	.word	0x080052f5
 800534c:	0800549f 	.word	0x0800549f
 8005350:	080052f5 	.word	0x080052f5
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080052f5 	.word	0x080052f5
 800535c:	080052f5 	.word	0x080052f5
 8005360:	0800543f 	.word	0x0800543f
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	602a      	str	r2, [r5, #0]
 800536c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005374:	2301      	movs	r3, #1
 8005376:	e09f      	b.n	80054b8 <_printf_i+0x1ec>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	0607      	lsls	r7, r0, #24
 800537e:	f103 0104 	add.w	r1, r3, #4
 8005382:	6029      	str	r1, [r5, #0]
 8005384:	d501      	bpl.n	800538a <_printf_i+0xbe>
 8005386:	681e      	ldr	r6, [r3, #0]
 8005388:	e003      	b.n	8005392 <_printf_i+0xc6>
 800538a:	0646      	lsls	r6, r0, #25
 800538c:	d5fb      	bpl.n	8005386 <_printf_i+0xba>
 800538e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005392:	2e00      	cmp	r6, #0
 8005394:	da03      	bge.n	800539e <_printf_i+0xd2>
 8005396:	232d      	movs	r3, #45	; 0x2d
 8005398:	4276      	negs	r6, r6
 800539a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539e:	485a      	ldr	r0, [pc, #360]	; (8005508 <_printf_i+0x23c>)
 80053a0:	230a      	movs	r3, #10
 80053a2:	e012      	b.n	80053ca <_printf_i+0xfe>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	1d19      	adds	r1, r3, #4
 80053aa:	6029      	str	r1, [r5, #0]
 80053ac:	0605      	lsls	r5, r0, #24
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0xe8>
 80053b0:	681e      	ldr	r6, [r3, #0]
 80053b2:	e002      	b.n	80053ba <_printf_i+0xee>
 80053b4:	0641      	lsls	r1, r0, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0xe4>
 80053b8:	881e      	ldrh	r6, [r3, #0]
 80053ba:	4853      	ldr	r0, [pc, #332]	; (8005508 <_printf_i+0x23c>)
 80053bc:	2f6f      	cmp	r7, #111	; 0x6f
 80053be:	bf0c      	ite	eq
 80053c0:	2308      	moveq	r3, #8
 80053c2:	230a      	movne	r3, #10
 80053c4:	2100      	movs	r1, #0
 80053c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ca:	6865      	ldr	r5, [r4, #4]
 80053cc:	60a5      	str	r5, [r4, #8]
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	bfa2      	ittt	ge
 80053d2:	6821      	ldrge	r1, [r4, #0]
 80053d4:	f021 0104 	bicge.w	r1, r1, #4
 80053d8:	6021      	strge	r1, [r4, #0]
 80053da:	b90e      	cbnz	r6, 80053e0 <_printf_i+0x114>
 80053dc:	2d00      	cmp	r5, #0
 80053de:	d04b      	beq.n	8005478 <_printf_i+0x1ac>
 80053e0:	4615      	mov	r5, r2
 80053e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053e6:	fb03 6711 	mls	r7, r3, r1, r6
 80053ea:	5dc7      	ldrb	r7, [r0, r7]
 80053ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053f0:	4637      	mov	r7, r6
 80053f2:	42bb      	cmp	r3, r7
 80053f4:	460e      	mov	r6, r1
 80053f6:	d9f4      	bls.n	80053e2 <_printf_i+0x116>
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d10b      	bne.n	8005414 <_printf_i+0x148>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	07de      	lsls	r6, r3, #31
 8005400:	d508      	bpl.n	8005414 <_printf_i+0x148>
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	6861      	ldr	r1, [r4, #4]
 8005406:	4299      	cmp	r1, r3
 8005408:	bfde      	ittt	le
 800540a:	2330      	movle	r3, #48	; 0x30
 800540c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005410:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005414:	1b52      	subs	r2, r2, r5
 8005416:	6122      	str	r2, [r4, #16]
 8005418:	f8cd a000 	str.w	sl, [sp]
 800541c:	464b      	mov	r3, r9
 800541e:	aa03      	add	r2, sp, #12
 8005420:	4621      	mov	r1, r4
 8005422:	4640      	mov	r0, r8
 8005424:	f7ff fee4 	bl	80051f0 <_printf_common>
 8005428:	3001      	adds	r0, #1
 800542a:	d14a      	bne.n	80054c2 <_printf_i+0x1f6>
 800542c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005430:	b004      	add	sp, #16
 8005432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f043 0320 	orr.w	r3, r3, #32
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	4833      	ldr	r0, [pc, #204]	; (800550c <_printf_i+0x240>)
 8005440:	2778      	movs	r7, #120	; 0x78
 8005442:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	6829      	ldr	r1, [r5, #0]
 800544a:	061f      	lsls	r7, r3, #24
 800544c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005450:	d402      	bmi.n	8005458 <_printf_i+0x18c>
 8005452:	065f      	lsls	r7, r3, #25
 8005454:	bf48      	it	mi
 8005456:	b2b6      	uxthmi	r6, r6
 8005458:	07df      	lsls	r7, r3, #31
 800545a:	bf48      	it	mi
 800545c:	f043 0320 	orrmi.w	r3, r3, #32
 8005460:	6029      	str	r1, [r5, #0]
 8005462:	bf48      	it	mi
 8005464:	6023      	strmi	r3, [r4, #0]
 8005466:	b91e      	cbnz	r6, 8005470 <_printf_i+0x1a4>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	f023 0320 	bic.w	r3, r3, #32
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	2310      	movs	r3, #16
 8005472:	e7a7      	b.n	80053c4 <_printf_i+0xf8>
 8005474:	4824      	ldr	r0, [pc, #144]	; (8005508 <_printf_i+0x23c>)
 8005476:	e7e4      	b.n	8005442 <_printf_i+0x176>
 8005478:	4615      	mov	r5, r2
 800547a:	e7bd      	b.n	80053f8 <_printf_i+0x12c>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6826      	ldr	r6, [r4, #0]
 8005480:	6961      	ldr	r1, [r4, #20]
 8005482:	1d18      	adds	r0, r3, #4
 8005484:	6028      	str	r0, [r5, #0]
 8005486:	0635      	lsls	r5, r6, #24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	d501      	bpl.n	8005490 <_printf_i+0x1c4>
 800548c:	6019      	str	r1, [r3, #0]
 800548e:	e002      	b.n	8005496 <_printf_i+0x1ca>
 8005490:	0670      	lsls	r0, r6, #25
 8005492:	d5fb      	bpl.n	800548c <_printf_i+0x1c0>
 8005494:	8019      	strh	r1, [r3, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	6123      	str	r3, [r4, #16]
 800549a:	4615      	mov	r5, r2
 800549c:	e7bc      	b.n	8005418 <_printf_i+0x14c>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	602a      	str	r2, [r5, #0]
 80054a4:	681d      	ldr	r5, [r3, #0]
 80054a6:	6862      	ldr	r2, [r4, #4]
 80054a8:	2100      	movs	r1, #0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7fa fe98 	bl	80001e0 <memchr>
 80054b0:	b108      	cbz	r0, 80054b6 <_printf_i+0x1ea>
 80054b2:	1b40      	subs	r0, r0, r5
 80054b4:	6060      	str	r0, [r4, #4]
 80054b6:	6863      	ldr	r3, [r4, #4]
 80054b8:	6123      	str	r3, [r4, #16]
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c0:	e7aa      	b.n	8005418 <_printf_i+0x14c>
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	462a      	mov	r2, r5
 80054c6:	4649      	mov	r1, r9
 80054c8:	4640      	mov	r0, r8
 80054ca:	47d0      	blx	sl
 80054cc:	3001      	adds	r0, #1
 80054ce:	d0ad      	beq.n	800542c <_printf_i+0x160>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	079b      	lsls	r3, r3, #30
 80054d4:	d413      	bmi.n	80054fe <_printf_i+0x232>
 80054d6:	68e0      	ldr	r0, [r4, #12]
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	4298      	cmp	r0, r3
 80054dc:	bfb8      	it	lt
 80054de:	4618      	movlt	r0, r3
 80054e0:	e7a6      	b.n	8005430 <_printf_i+0x164>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4632      	mov	r2, r6
 80054e6:	4649      	mov	r1, r9
 80054e8:	4640      	mov	r0, r8
 80054ea:	47d0      	blx	sl
 80054ec:	3001      	adds	r0, #1
 80054ee:	d09d      	beq.n	800542c <_printf_i+0x160>
 80054f0:	3501      	adds	r5, #1
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	9903      	ldr	r1, [sp, #12]
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dcf2      	bgt.n	80054e2 <_printf_i+0x216>
 80054fc:	e7eb      	b.n	80054d6 <_printf_i+0x20a>
 80054fe:	2500      	movs	r5, #0
 8005500:	f104 0619 	add.w	r6, r4, #25
 8005504:	e7f5      	b.n	80054f2 <_printf_i+0x226>
 8005506:	bf00      	nop
 8005508:	080093c2 	.word	0x080093c2
 800550c:	080093d3 	.word	0x080093d3

08005510 <_scanf_float>:
 8005510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005514:	b087      	sub	sp, #28
 8005516:	4617      	mov	r7, r2
 8005518:	9303      	str	r3, [sp, #12]
 800551a:	688b      	ldr	r3, [r1, #8]
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005522:	bf83      	ittte	hi
 8005524:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005528:	195b      	addhi	r3, r3, r5
 800552a:	9302      	strhi	r3, [sp, #8]
 800552c:	2300      	movls	r3, #0
 800552e:	bf86      	itte	hi
 8005530:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005534:	608b      	strhi	r3, [r1, #8]
 8005536:	9302      	strls	r3, [sp, #8]
 8005538:	680b      	ldr	r3, [r1, #0]
 800553a:	468b      	mov	fp, r1
 800553c:	2500      	movs	r5, #0
 800553e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005542:	f84b 3b1c 	str.w	r3, [fp], #28
 8005546:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800554a:	4680      	mov	r8, r0
 800554c:	460c      	mov	r4, r1
 800554e:	465e      	mov	r6, fp
 8005550:	46aa      	mov	sl, r5
 8005552:	46a9      	mov	r9, r5
 8005554:	9501      	str	r5, [sp, #4]
 8005556:	68a2      	ldr	r2, [r4, #8]
 8005558:	b152      	cbz	r2, 8005570 <_scanf_float+0x60>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b4e      	cmp	r3, #78	; 0x4e
 8005560:	d864      	bhi.n	800562c <_scanf_float+0x11c>
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d83c      	bhi.n	80055e0 <_scanf_float+0xd0>
 8005566:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800556a:	b2c8      	uxtb	r0, r1
 800556c:	280e      	cmp	r0, #14
 800556e:	d93a      	bls.n	80055e6 <_scanf_float+0xd6>
 8005570:	f1b9 0f00 	cmp.w	r9, #0
 8005574:	d003      	beq.n	800557e <_scanf_float+0x6e>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005582:	f1ba 0f01 	cmp.w	sl, #1
 8005586:	f200 8113 	bhi.w	80057b0 <_scanf_float+0x2a0>
 800558a:	455e      	cmp	r6, fp
 800558c:	f200 8105 	bhi.w	800579a <_scanf_float+0x28a>
 8005590:	2501      	movs	r5, #1
 8005592:	4628      	mov	r0, r5
 8005594:	b007      	add	sp, #28
 8005596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800559e:	2a0d      	cmp	r2, #13
 80055a0:	d8e6      	bhi.n	8005570 <_scanf_float+0x60>
 80055a2:	a101      	add	r1, pc, #4	; (adr r1, 80055a8 <_scanf_float+0x98>)
 80055a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055a8:	080056e7 	.word	0x080056e7
 80055ac:	08005571 	.word	0x08005571
 80055b0:	08005571 	.word	0x08005571
 80055b4:	08005571 	.word	0x08005571
 80055b8:	08005747 	.word	0x08005747
 80055bc:	0800571f 	.word	0x0800571f
 80055c0:	08005571 	.word	0x08005571
 80055c4:	08005571 	.word	0x08005571
 80055c8:	080056f5 	.word	0x080056f5
 80055cc:	08005571 	.word	0x08005571
 80055d0:	08005571 	.word	0x08005571
 80055d4:	08005571 	.word	0x08005571
 80055d8:	08005571 	.word	0x08005571
 80055dc:	080056ad 	.word	0x080056ad
 80055e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80055e4:	e7db      	b.n	800559e <_scanf_float+0x8e>
 80055e6:	290e      	cmp	r1, #14
 80055e8:	d8c2      	bhi.n	8005570 <_scanf_float+0x60>
 80055ea:	a001      	add	r0, pc, #4	; (adr r0, 80055f0 <_scanf_float+0xe0>)
 80055ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80055f0:	0800569f 	.word	0x0800569f
 80055f4:	08005571 	.word	0x08005571
 80055f8:	0800569f 	.word	0x0800569f
 80055fc:	08005733 	.word	0x08005733
 8005600:	08005571 	.word	0x08005571
 8005604:	0800564d 	.word	0x0800564d
 8005608:	08005689 	.word	0x08005689
 800560c:	08005689 	.word	0x08005689
 8005610:	08005689 	.word	0x08005689
 8005614:	08005689 	.word	0x08005689
 8005618:	08005689 	.word	0x08005689
 800561c:	08005689 	.word	0x08005689
 8005620:	08005689 	.word	0x08005689
 8005624:	08005689 	.word	0x08005689
 8005628:	08005689 	.word	0x08005689
 800562c:	2b6e      	cmp	r3, #110	; 0x6e
 800562e:	d809      	bhi.n	8005644 <_scanf_float+0x134>
 8005630:	2b60      	cmp	r3, #96	; 0x60
 8005632:	d8b2      	bhi.n	800559a <_scanf_float+0x8a>
 8005634:	2b54      	cmp	r3, #84	; 0x54
 8005636:	d077      	beq.n	8005728 <_scanf_float+0x218>
 8005638:	2b59      	cmp	r3, #89	; 0x59
 800563a:	d199      	bne.n	8005570 <_scanf_float+0x60>
 800563c:	2d07      	cmp	r5, #7
 800563e:	d197      	bne.n	8005570 <_scanf_float+0x60>
 8005640:	2508      	movs	r5, #8
 8005642:	e029      	b.n	8005698 <_scanf_float+0x188>
 8005644:	2b74      	cmp	r3, #116	; 0x74
 8005646:	d06f      	beq.n	8005728 <_scanf_float+0x218>
 8005648:	2b79      	cmp	r3, #121	; 0x79
 800564a:	e7f6      	b.n	800563a <_scanf_float+0x12a>
 800564c:	6821      	ldr	r1, [r4, #0]
 800564e:	05c8      	lsls	r0, r1, #23
 8005650:	d51a      	bpl.n	8005688 <_scanf_float+0x178>
 8005652:	9b02      	ldr	r3, [sp, #8]
 8005654:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005658:	6021      	str	r1, [r4, #0]
 800565a:	f109 0901 	add.w	r9, r9, #1
 800565e:	b11b      	cbz	r3, 8005668 <_scanf_float+0x158>
 8005660:	3b01      	subs	r3, #1
 8005662:	3201      	adds	r2, #1
 8005664:	9302      	str	r3, [sp, #8]
 8005666:	60a2      	str	r2, [r4, #8]
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	3b01      	subs	r3, #1
 800566c:	60a3      	str	r3, [r4, #8]
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	3301      	adds	r3, #1
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3b01      	subs	r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	f340 8084 	ble.w	8005788 <_scanf_float+0x278>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	603b      	str	r3, [r7, #0]
 8005686:	e766      	b.n	8005556 <_scanf_float+0x46>
 8005688:	eb1a 0f05 	cmn.w	sl, r5
 800568c:	f47f af70 	bne.w	8005570 <_scanf_float+0x60>
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	f806 3b01 	strb.w	r3, [r6], #1
 800569c:	e7e4      	b.n	8005668 <_scanf_float+0x158>
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	0610      	lsls	r0, r2, #24
 80056a2:	f57f af65 	bpl.w	8005570 <_scanf_float+0x60>
 80056a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056aa:	e7f4      	b.n	8005696 <_scanf_float+0x186>
 80056ac:	f1ba 0f00 	cmp.w	sl, #0
 80056b0:	d10e      	bne.n	80056d0 <_scanf_float+0x1c0>
 80056b2:	f1b9 0f00 	cmp.w	r9, #0
 80056b6:	d10e      	bne.n	80056d6 <_scanf_float+0x1c6>
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056c2:	d108      	bne.n	80056d6 <_scanf_float+0x1c6>
 80056c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056c8:	6022      	str	r2, [r4, #0]
 80056ca:	f04f 0a01 	mov.w	sl, #1
 80056ce:	e7e3      	b.n	8005698 <_scanf_float+0x188>
 80056d0:	f1ba 0f02 	cmp.w	sl, #2
 80056d4:	d055      	beq.n	8005782 <_scanf_float+0x272>
 80056d6:	2d01      	cmp	r5, #1
 80056d8:	d002      	beq.n	80056e0 <_scanf_float+0x1d0>
 80056da:	2d04      	cmp	r5, #4
 80056dc:	f47f af48 	bne.w	8005570 <_scanf_float+0x60>
 80056e0:	3501      	adds	r5, #1
 80056e2:	b2ed      	uxtb	r5, r5
 80056e4:	e7d8      	b.n	8005698 <_scanf_float+0x188>
 80056e6:	f1ba 0f01 	cmp.w	sl, #1
 80056ea:	f47f af41 	bne.w	8005570 <_scanf_float+0x60>
 80056ee:	f04f 0a02 	mov.w	sl, #2
 80056f2:	e7d1      	b.n	8005698 <_scanf_float+0x188>
 80056f4:	b97d      	cbnz	r5, 8005716 <_scanf_float+0x206>
 80056f6:	f1b9 0f00 	cmp.w	r9, #0
 80056fa:	f47f af3c 	bne.w	8005576 <_scanf_float+0x66>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005704:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005708:	f47f af39 	bne.w	800557e <_scanf_float+0x6e>
 800570c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005710:	6022      	str	r2, [r4, #0]
 8005712:	2501      	movs	r5, #1
 8005714:	e7c0      	b.n	8005698 <_scanf_float+0x188>
 8005716:	2d03      	cmp	r5, #3
 8005718:	d0e2      	beq.n	80056e0 <_scanf_float+0x1d0>
 800571a:	2d05      	cmp	r5, #5
 800571c:	e7de      	b.n	80056dc <_scanf_float+0x1cc>
 800571e:	2d02      	cmp	r5, #2
 8005720:	f47f af26 	bne.w	8005570 <_scanf_float+0x60>
 8005724:	2503      	movs	r5, #3
 8005726:	e7b7      	b.n	8005698 <_scanf_float+0x188>
 8005728:	2d06      	cmp	r5, #6
 800572a:	f47f af21 	bne.w	8005570 <_scanf_float+0x60>
 800572e:	2507      	movs	r5, #7
 8005730:	e7b2      	b.n	8005698 <_scanf_float+0x188>
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	0591      	lsls	r1, r2, #22
 8005736:	f57f af1b 	bpl.w	8005570 <_scanf_float+0x60>
 800573a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800573e:	6022      	str	r2, [r4, #0]
 8005740:	f8cd 9004 	str.w	r9, [sp, #4]
 8005744:	e7a8      	b.n	8005698 <_scanf_float+0x188>
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800574c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005750:	d006      	beq.n	8005760 <_scanf_float+0x250>
 8005752:	0550      	lsls	r0, r2, #21
 8005754:	f57f af0c 	bpl.w	8005570 <_scanf_float+0x60>
 8005758:	f1b9 0f00 	cmp.w	r9, #0
 800575c:	f43f af0f 	beq.w	800557e <_scanf_float+0x6e>
 8005760:	0591      	lsls	r1, r2, #22
 8005762:	bf58      	it	pl
 8005764:	9901      	ldrpl	r1, [sp, #4]
 8005766:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800576a:	bf58      	it	pl
 800576c:	eba9 0101 	subpl.w	r1, r9, r1
 8005770:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005774:	bf58      	it	pl
 8005776:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800577a:	6022      	str	r2, [r4, #0]
 800577c:	f04f 0900 	mov.w	r9, #0
 8005780:	e78a      	b.n	8005698 <_scanf_float+0x188>
 8005782:	f04f 0a03 	mov.w	sl, #3
 8005786:	e787      	b.n	8005698 <_scanf_float+0x188>
 8005788:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800578c:	4639      	mov	r1, r7
 800578e:	4640      	mov	r0, r8
 8005790:	4798      	blx	r3
 8005792:	2800      	cmp	r0, #0
 8005794:	f43f aedf 	beq.w	8005556 <_scanf_float+0x46>
 8005798:	e6ea      	b.n	8005570 <_scanf_float+0x60>
 800579a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800579e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057a2:	463a      	mov	r2, r7
 80057a4:	4640      	mov	r0, r8
 80057a6:	4798      	blx	r3
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	e6ec      	b.n	800558a <_scanf_float+0x7a>
 80057b0:	1e6b      	subs	r3, r5, #1
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d825      	bhi.n	8005802 <_scanf_float+0x2f2>
 80057b6:	2d02      	cmp	r5, #2
 80057b8:	d836      	bhi.n	8005828 <_scanf_float+0x318>
 80057ba:	455e      	cmp	r6, fp
 80057bc:	f67f aee8 	bls.w	8005590 <_scanf_float+0x80>
 80057c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057c8:	463a      	mov	r2, r7
 80057ca:	4640      	mov	r0, r8
 80057cc:	4798      	blx	r3
 80057ce:	6923      	ldr	r3, [r4, #16]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	6123      	str	r3, [r4, #16]
 80057d4:	e7f1      	b.n	80057ba <_scanf_float+0x2aa>
 80057d6:	9802      	ldr	r0, [sp, #8]
 80057d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	463a      	mov	r2, r7
 80057e4:	4640      	mov	r0, r8
 80057e6:	4798      	blx	r3
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80057f2:	fa5f fa8a 	uxtb.w	sl, sl
 80057f6:	f1ba 0f02 	cmp.w	sl, #2
 80057fa:	d1ec      	bne.n	80057d6 <_scanf_float+0x2c6>
 80057fc:	3d03      	subs	r5, #3
 80057fe:	b2ed      	uxtb	r5, r5
 8005800:	1b76      	subs	r6, r6, r5
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	05da      	lsls	r2, r3, #23
 8005806:	d52f      	bpl.n	8005868 <_scanf_float+0x358>
 8005808:	055b      	lsls	r3, r3, #21
 800580a:	d510      	bpl.n	800582e <_scanf_float+0x31e>
 800580c:	455e      	cmp	r6, fp
 800580e:	f67f aebf 	bls.w	8005590 <_scanf_float+0x80>
 8005812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800581a:	463a      	mov	r2, r7
 800581c:	4640      	mov	r0, r8
 800581e:	4798      	blx	r3
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	3b01      	subs	r3, #1
 8005824:	6123      	str	r3, [r4, #16]
 8005826:	e7f1      	b.n	800580c <_scanf_float+0x2fc>
 8005828:	46aa      	mov	sl, r5
 800582a:	9602      	str	r6, [sp, #8]
 800582c:	e7df      	b.n	80057ee <_scanf_float+0x2de>
 800582e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	2965      	cmp	r1, #101	; 0x65
 8005836:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800583a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	d00c      	beq.n	800585c <_scanf_float+0x34c>
 8005842:	2945      	cmp	r1, #69	; 0x45
 8005844:	d00a      	beq.n	800585c <_scanf_float+0x34c>
 8005846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800584a:	463a      	mov	r2, r7
 800584c:	4640      	mov	r0, r8
 800584e:	4798      	blx	r3
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005856:	3b01      	subs	r3, #1
 8005858:	1eb5      	subs	r5, r6, #2
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005860:	463a      	mov	r2, r7
 8005862:	4640      	mov	r0, r8
 8005864:	4798      	blx	r3
 8005866:	462e      	mov	r6, r5
 8005868:	6825      	ldr	r5, [r4, #0]
 800586a:	f015 0510 	ands.w	r5, r5, #16
 800586e:	d155      	bne.n	800591c <_scanf_float+0x40c>
 8005870:	7035      	strb	r5, [r6, #0]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587c:	d11d      	bne.n	80058ba <_scanf_float+0x3aa>
 800587e:	9b01      	ldr	r3, [sp, #4]
 8005880:	454b      	cmp	r3, r9
 8005882:	eba3 0209 	sub.w	r2, r3, r9
 8005886:	d125      	bne.n	80058d4 <_scanf_float+0x3c4>
 8005888:	2200      	movs	r2, #0
 800588a:	4659      	mov	r1, fp
 800588c:	4640      	mov	r0, r8
 800588e:	f002 fbf3 	bl	8008078 <_strtod_r>
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	f8d4 c000 	ldr.w	ip, [r4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f01c 0f02 	tst.w	ip, #2
 800589e:	4606      	mov	r6, r0
 80058a0:	460f      	mov	r7, r1
 80058a2:	f103 0204 	add.w	r2, r3, #4
 80058a6:	d020      	beq.n	80058ea <_scanf_float+0x3da>
 80058a8:	9903      	ldr	r1, [sp, #12]
 80058aa:	600a      	str	r2, [r1, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	e9c3 6700 	strd	r6, r7, [r3]
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60e3      	str	r3, [r4, #12]
 80058b8:	e66b      	b.n	8005592 <_scanf_float+0x82>
 80058ba:	9b04      	ldr	r3, [sp, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0e3      	beq.n	8005888 <_scanf_float+0x378>
 80058c0:	9905      	ldr	r1, [sp, #20]
 80058c2:	230a      	movs	r3, #10
 80058c4:	462a      	mov	r2, r5
 80058c6:	3101      	adds	r1, #1
 80058c8:	4640      	mov	r0, r8
 80058ca:	f002 fc59 	bl	8008180 <_strtol_r>
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	9e05      	ldr	r6, [sp, #20]
 80058d2:	1ac2      	subs	r2, r0, r3
 80058d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80058d8:	429e      	cmp	r6, r3
 80058da:	bf28      	it	cs
 80058dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80058e0:	490f      	ldr	r1, [pc, #60]	; (8005920 <_scanf_float+0x410>)
 80058e2:	4630      	mov	r0, r6
 80058e4:	f000 f8d0 	bl	8005a88 <siprintf>
 80058e8:	e7ce      	b.n	8005888 <_scanf_float+0x378>
 80058ea:	f01c 0f04 	tst.w	ip, #4
 80058ee:	d1db      	bne.n	80058a8 <_scanf_float+0x398>
 80058f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80058f4:	f8cc 2000 	str.w	r2, [ip]
 80058f8:	f8d3 8000 	ldr.w	r8, [r3]
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	f7fb f91c 	bl	8000b3c <__aeabi_dcmpun>
 8005904:	b128      	cbz	r0, 8005912 <_scanf_float+0x402>
 8005906:	4807      	ldr	r0, [pc, #28]	; (8005924 <_scanf_float+0x414>)
 8005908:	f000 f9a0 	bl	8005c4c <nanf>
 800590c:	f8c8 0000 	str.w	r0, [r8]
 8005910:	e7cf      	b.n	80058b2 <_scanf_float+0x3a2>
 8005912:	4630      	mov	r0, r6
 8005914:	4639      	mov	r1, r7
 8005916:	f7fb f96f 	bl	8000bf8 <__aeabi_d2f>
 800591a:	e7f7      	b.n	800590c <_scanf_float+0x3fc>
 800591c:	2500      	movs	r5, #0
 800591e:	e638      	b.n	8005592 <_scanf_float+0x82>
 8005920:	080093e4 	.word	0x080093e4
 8005924:	08009775 	.word	0x08009775

08005928 <std>:
 8005928:	2300      	movs	r3, #0
 800592a:	b510      	push	{r4, lr}
 800592c:	4604      	mov	r4, r0
 800592e:	e9c0 3300 	strd	r3, r3, [r0]
 8005932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005936:	6083      	str	r3, [r0, #8]
 8005938:	8181      	strh	r1, [r0, #12]
 800593a:	6643      	str	r3, [r0, #100]	; 0x64
 800593c:	81c2      	strh	r2, [r0, #14]
 800593e:	6183      	str	r3, [r0, #24]
 8005940:	4619      	mov	r1, r3
 8005942:	2208      	movs	r2, #8
 8005944:	305c      	adds	r0, #92	; 0x5c
 8005946:	f000 f902 	bl	8005b4e <memset>
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <std+0x38>)
 800594c:	6263      	str	r3, [r4, #36]	; 0x24
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <std+0x3c>)
 8005950:	62a3      	str	r3, [r4, #40]	; 0x28
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <std+0x40>)
 8005954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <std+0x44>)
 8005958:	6224      	str	r4, [r4, #32]
 800595a:	6323      	str	r3, [r4, #48]	; 0x30
 800595c:	bd10      	pop	{r4, pc}
 800595e:	bf00      	nop
 8005960:	08005ac9 	.word	0x08005ac9
 8005964:	08005aeb 	.word	0x08005aeb
 8005968:	08005b23 	.word	0x08005b23
 800596c:	08005b47 	.word	0x08005b47

08005970 <stdio_exit_handler>:
 8005970:	4a02      	ldr	r2, [pc, #8]	; (800597c <stdio_exit_handler+0xc>)
 8005972:	4903      	ldr	r1, [pc, #12]	; (8005980 <stdio_exit_handler+0x10>)
 8005974:	4803      	ldr	r0, [pc, #12]	; (8005984 <stdio_exit_handler+0x14>)
 8005976:	f000 b869 	b.w	8005a4c <_fwalk_sglue>
 800597a:	bf00      	nop
 800597c:	20000010 	.word	0x20000010
 8005980:	08008539 	.word	0x08008539
 8005984:	2000001c 	.word	0x2000001c

08005988 <cleanup_stdio>:
 8005988:	6841      	ldr	r1, [r0, #4]
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <cleanup_stdio+0x34>)
 800598c:	4299      	cmp	r1, r3
 800598e:	b510      	push	{r4, lr}
 8005990:	4604      	mov	r4, r0
 8005992:	d001      	beq.n	8005998 <cleanup_stdio+0x10>
 8005994:	f002 fdd0 	bl	8008538 <_fflush_r>
 8005998:	68a1      	ldr	r1, [r4, #8]
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <cleanup_stdio+0x38>)
 800599c:	4299      	cmp	r1, r3
 800599e:	d002      	beq.n	80059a6 <cleanup_stdio+0x1e>
 80059a0:	4620      	mov	r0, r4
 80059a2:	f002 fdc9 	bl	8008538 <_fflush_r>
 80059a6:	68e1      	ldr	r1, [r4, #12]
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <cleanup_stdio+0x3c>)
 80059aa:	4299      	cmp	r1, r3
 80059ac:	d004      	beq.n	80059b8 <cleanup_stdio+0x30>
 80059ae:	4620      	mov	r0, r4
 80059b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b4:	f002 bdc0 	b.w	8008538 <_fflush_r>
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	bf00      	nop
 80059bc:	2000039c 	.word	0x2000039c
 80059c0:	20000404 	.word	0x20000404
 80059c4:	2000046c 	.word	0x2000046c

080059c8 <global_stdio_init.part.0>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <global_stdio_init.part.0+0x30>)
 80059cc:	4c0b      	ldr	r4, [pc, #44]	; (80059fc <global_stdio_init.part.0+0x34>)
 80059ce:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <global_stdio_init.part.0+0x38>)
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	4620      	mov	r0, r4
 80059d4:	2200      	movs	r2, #0
 80059d6:	2104      	movs	r1, #4
 80059d8:	f7ff ffa6 	bl	8005928 <std>
 80059dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80059e0:	2201      	movs	r2, #1
 80059e2:	2109      	movs	r1, #9
 80059e4:	f7ff ffa0 	bl	8005928 <std>
 80059e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80059ec:	2202      	movs	r2, #2
 80059ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f2:	2112      	movs	r1, #18
 80059f4:	f7ff bf98 	b.w	8005928 <std>
 80059f8:	200004d4 	.word	0x200004d4
 80059fc:	2000039c 	.word	0x2000039c
 8005a00:	08005971 	.word	0x08005971

08005a04 <__sfp_lock_acquire>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__sfp_lock_acquire+0x8>)
 8005a06:	f000 b91f 	b.w	8005c48 <__retarget_lock_acquire_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	200004dd 	.word	0x200004dd

08005a10 <__sfp_lock_release>:
 8005a10:	4801      	ldr	r0, [pc, #4]	; (8005a18 <__sfp_lock_release+0x8>)
 8005a12:	f000 b91a 	b.w	8005c4a <__retarget_lock_release_recursive>
 8005a16:	bf00      	nop
 8005a18:	200004dd 	.word	0x200004dd

08005a1c <__sinit>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	4604      	mov	r4, r0
 8005a20:	f7ff fff0 	bl	8005a04 <__sfp_lock_acquire>
 8005a24:	6a23      	ldr	r3, [r4, #32]
 8005a26:	b11b      	cbz	r3, 8005a30 <__sinit+0x14>
 8005a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a2c:	f7ff bff0 	b.w	8005a10 <__sfp_lock_release>
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <__sinit+0x28>)
 8005a32:	6223      	str	r3, [r4, #32]
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <__sinit+0x2c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f5      	bne.n	8005a28 <__sinit+0xc>
 8005a3c:	f7ff ffc4 	bl	80059c8 <global_stdio_init.part.0>
 8005a40:	e7f2      	b.n	8005a28 <__sinit+0xc>
 8005a42:	bf00      	nop
 8005a44:	08005989 	.word	0x08005989
 8005a48:	200004d4 	.word	0x200004d4

08005a4c <_fwalk_sglue>:
 8005a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a50:	4607      	mov	r7, r0
 8005a52:	4688      	mov	r8, r1
 8005a54:	4614      	mov	r4, r2
 8005a56:	2600      	movs	r6, #0
 8005a58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a60:	d505      	bpl.n	8005a6e <_fwalk_sglue+0x22>
 8005a62:	6824      	ldr	r4, [r4, #0]
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	d1f7      	bne.n	8005a58 <_fwalk_sglue+0xc>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d907      	bls.n	8005a84 <_fwalk_sglue+0x38>
 8005a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	d003      	beq.n	8005a84 <_fwalk_sglue+0x38>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c0      	blx	r8
 8005a82:	4306      	orrs	r6, r0
 8005a84:	3568      	adds	r5, #104	; 0x68
 8005a86:	e7e9      	b.n	8005a5c <_fwalk_sglue+0x10>

08005a88 <siprintf>:
 8005a88:	b40e      	push	{r1, r2, r3}
 8005a8a:	b500      	push	{lr}
 8005a8c:	b09c      	sub	sp, #112	; 0x70
 8005a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a90:	9002      	str	r0, [sp, #8]
 8005a92:	9006      	str	r0, [sp, #24]
 8005a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a98:	4809      	ldr	r0, [pc, #36]	; (8005ac0 <siprintf+0x38>)
 8005a9a:	9107      	str	r1, [sp, #28]
 8005a9c:	9104      	str	r1, [sp, #16]
 8005a9e:	4909      	ldr	r1, [pc, #36]	; (8005ac4 <siprintf+0x3c>)
 8005aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa4:	9105      	str	r1, [sp, #20]
 8005aa6:	6800      	ldr	r0, [r0, #0]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	a902      	add	r1, sp, #8
 8005aac:	f002 fbc4 	bl	8008238 <_svfiprintf_r>
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	b01c      	add	sp, #112	; 0x70
 8005ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005abc:	b003      	add	sp, #12
 8005abe:	4770      	bx	lr
 8005ac0:	20000068 	.word	0x20000068
 8005ac4:	ffff0208 	.word	0xffff0208

08005ac8 <__sread>:
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	460c      	mov	r4, r1
 8005acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad0:	f000 f86c 	bl	8005bac <_read_r>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	bfab      	itete	ge
 8005ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ada:	89a3      	ldrhlt	r3, [r4, #12]
 8005adc:	181b      	addge	r3, r3, r0
 8005ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ae2:	bfac      	ite	ge
 8005ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ae6:	81a3      	strhlt	r3, [r4, #12]
 8005ae8:	bd10      	pop	{r4, pc}

08005aea <__swrite>:
 8005aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aee:	461f      	mov	r7, r3
 8005af0:	898b      	ldrh	r3, [r1, #12]
 8005af2:	05db      	lsls	r3, r3, #23
 8005af4:	4605      	mov	r5, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	4616      	mov	r6, r2
 8005afa:	d505      	bpl.n	8005b08 <__swrite+0x1e>
 8005afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b00:	2302      	movs	r3, #2
 8005b02:	2200      	movs	r2, #0
 8005b04:	f000 f840 	bl	8005b88 <_lseek_r>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b12:	81a3      	strh	r3, [r4, #12]
 8005b14:	4632      	mov	r2, r6
 8005b16:	463b      	mov	r3, r7
 8005b18:	4628      	mov	r0, r5
 8005b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1e:	f000 b857 	b.w	8005bd0 <_write_r>

08005b22 <__sseek>:
 8005b22:	b510      	push	{r4, lr}
 8005b24:	460c      	mov	r4, r1
 8005b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2a:	f000 f82d 	bl	8005b88 <_lseek_r>
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	bf15      	itete	ne
 8005b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b3e:	81a3      	strheq	r3, [r4, #12]
 8005b40:	bf18      	it	ne
 8005b42:	81a3      	strhne	r3, [r4, #12]
 8005b44:	bd10      	pop	{r4, pc}

08005b46 <__sclose>:
 8005b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4a:	f000 b80d 	b.w	8005b68 <_close_r>

08005b4e <memset>:
 8005b4e:	4402      	add	r2, r0
 8005b50:	4603      	mov	r3, r0
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d100      	bne.n	8005b58 <memset+0xa>
 8005b56:	4770      	bx	lr
 8005b58:	f803 1b01 	strb.w	r1, [r3], #1
 8005b5c:	e7f9      	b.n	8005b52 <memset+0x4>
	...

08005b60 <_localeconv_r>:
 8005b60:	4800      	ldr	r0, [pc, #0]	; (8005b64 <_localeconv_r+0x4>)
 8005b62:	4770      	bx	lr
 8005b64:	2000015c 	.word	0x2000015c

08005b68 <_close_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d06      	ldr	r5, [pc, #24]	; (8005b84 <_close_r+0x1c>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fc f908 	bl	8001d88 <_close>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_close_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_close_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	200004d8 	.word	0x200004d8

08005b88 <_lseek_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d07      	ldr	r5, [pc, #28]	; (8005ba8 <_lseek_r+0x20>)
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	4608      	mov	r0, r1
 8005b90:	4611      	mov	r1, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	602a      	str	r2, [r5, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f7fc f91a 	bl	8001dd0 <_lseek>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_lseek_r+0x1e>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_lseek_r+0x1e>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	200004d8 	.word	0x200004d8

08005bac <_read_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d07      	ldr	r5, [pc, #28]	; (8005bcc <_read_r+0x20>)
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	602a      	str	r2, [r5, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f7fc f8ab 	bl	8001d16 <_read>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_read_r+0x1e>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_read_r+0x1e>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	200004d8 	.word	0x200004d8

08005bd0 <_write_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d07      	ldr	r5, [pc, #28]	; (8005bf0 <_write_r+0x20>)
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	4611      	mov	r1, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f7fc f8b6 	bl	8001d50 <_write>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_write_r+0x1e>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_write_r+0x1e>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	200004d8 	.word	0x200004d8

08005bf4 <__errno>:
 8005bf4:	4b01      	ldr	r3, [pc, #4]	; (8005bfc <__errno+0x8>)
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20000068 	.word	0x20000068

08005c00 <__libc_init_array>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	4d0d      	ldr	r5, [pc, #52]	; (8005c38 <__libc_init_array+0x38>)
 8005c04:	4c0d      	ldr	r4, [pc, #52]	; (8005c3c <__libc_init_array+0x3c>)
 8005c06:	1b64      	subs	r4, r4, r5
 8005c08:	10a4      	asrs	r4, r4, #2
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	42a6      	cmp	r6, r4
 8005c0e:	d109      	bne.n	8005c24 <__libc_init_array+0x24>
 8005c10:	4d0b      	ldr	r5, [pc, #44]	; (8005c40 <__libc_init_array+0x40>)
 8005c12:	4c0c      	ldr	r4, [pc, #48]	; (8005c44 <__libc_init_array+0x44>)
 8005c14:	f003 fba2 	bl	800935c <_init>
 8005c18:	1b64      	subs	r4, r4, r5
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	42a6      	cmp	r6, r4
 8005c20:	d105      	bne.n	8005c2e <__libc_init_array+0x2e>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
 8005c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c28:	4798      	blx	r3
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	e7ee      	b.n	8005c0c <__libc_init_array+0xc>
 8005c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c32:	4798      	blx	r3
 8005c34:	3601      	adds	r6, #1
 8005c36:	e7f2      	b.n	8005c1e <__libc_init_array+0x1e>
 8005c38:	080097e0 	.word	0x080097e0
 8005c3c:	080097e0 	.word	0x080097e0
 8005c40:	080097e0 	.word	0x080097e0
 8005c44:	080097e4 	.word	0x080097e4

08005c48 <__retarget_lock_acquire_recursive>:
 8005c48:	4770      	bx	lr

08005c4a <__retarget_lock_release_recursive>:
 8005c4a:	4770      	bx	lr

08005c4c <nanf>:
 8005c4c:	4800      	ldr	r0, [pc, #0]	; (8005c50 <nanf+0x4>)
 8005c4e:	4770      	bx	lr
 8005c50:	7fc00000 	.word	0x7fc00000

08005c54 <quorem>:
 8005c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	6903      	ldr	r3, [r0, #16]
 8005c5a:	690c      	ldr	r4, [r1, #16]
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	4607      	mov	r7, r0
 8005c60:	db7b      	blt.n	8005d5a <quorem+0x106>
 8005c62:	3c01      	subs	r4, #1
 8005c64:	f101 0814 	add.w	r8, r1, #20
 8005c68:	f100 0514 	add.w	r5, r0, #20
 8005c6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c86:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c8a:	d32e      	bcc.n	8005cea <quorem+0x96>
 8005c8c:	f04f 0e00 	mov.w	lr, #0
 8005c90:	4640      	mov	r0, r8
 8005c92:	46ac      	mov	ip, r5
 8005c94:	46f2      	mov	sl, lr
 8005c96:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c9a:	b293      	uxth	r3, r2
 8005c9c:	fb06 e303 	mla	r3, r6, r3, lr
 8005ca0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ca4:	0c1a      	lsrs	r2, r3, #16
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	fb06 220e 	mla	r2, r6, lr, r2
 8005cac:	ebaa 0303 	sub.w	r3, sl, r3
 8005cb0:	f8dc a000 	ldr.w	sl, [ip]
 8005cb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cb8:	b292      	uxth	r2, r2
 8005cba:	fa13 f38a 	uxtah	r3, r3, sl
 8005cbe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ccc:	4581      	cmp	r9, r0
 8005cce:	f84c 3b04 	str.w	r3, [ip], #4
 8005cd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cd6:	d2de      	bcs.n	8005c96 <quorem+0x42>
 8005cd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005cdc:	b92b      	cbnz	r3, 8005cea <quorem+0x96>
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	429d      	cmp	r5, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	d32c      	bcc.n	8005d42 <quorem+0xee>
 8005ce8:	613c      	str	r4, [r7, #16]
 8005cea:	4638      	mov	r0, r7
 8005cec:	f001 f9dc 	bl	80070a8 <__mcmp>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	db22      	blt.n	8005d3a <quorem+0xe6>
 8005cf4:	3601      	adds	r6, #1
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cfe:	f8d1 c000 	ldr.w	ip, [r1]
 8005d02:	b293      	uxth	r3, r2
 8005d04:	1ac3      	subs	r3, r0, r3
 8005d06:	0c12      	lsrs	r2, r2, #16
 8005d08:	fa13 f38c 	uxtah	r3, r3, ip
 8005d0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d1a:	45c1      	cmp	r9, r8
 8005d1c:	f841 3b04 	str.w	r3, [r1], #4
 8005d20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d24:	d2e9      	bcs.n	8005cfa <quorem+0xa6>
 8005d26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d2e:	b922      	cbnz	r2, 8005d3a <quorem+0xe6>
 8005d30:	3b04      	subs	r3, #4
 8005d32:	429d      	cmp	r5, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	d30a      	bcc.n	8005d4e <quorem+0xfa>
 8005d38:	613c      	str	r4, [r7, #16]
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	b003      	add	sp, #12
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d1ce      	bne.n	8005ce8 <quorem+0x94>
 8005d4a:	3c01      	subs	r4, #1
 8005d4c:	e7c9      	b.n	8005ce2 <quorem+0x8e>
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	3b04      	subs	r3, #4
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	d1f0      	bne.n	8005d38 <quorem+0xe4>
 8005d56:	3c01      	subs	r4, #1
 8005d58:	e7eb      	b.n	8005d32 <quorem+0xde>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e7ee      	b.n	8005d3c <quorem+0xe8>
	...

08005d60 <_dtoa_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	69c4      	ldr	r4, [r0, #28]
 8005d66:	b099      	sub	sp, #100	; 0x64
 8005d68:	4616      	mov	r6, r2
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d70:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d74:	4605      	mov	r5, r0
 8005d76:	b974      	cbnz	r4, 8005d96 <_dtoa_r+0x36>
 8005d78:	2010      	movs	r0, #16
 8005d7a:	f000 fe1b 	bl	80069b4 <malloc>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	61e8      	str	r0, [r5, #28]
 8005d82:	b920      	cbnz	r0, 8005d8e <_dtoa_r+0x2e>
 8005d84:	4baa      	ldr	r3, [pc, #680]	; (8006030 <_dtoa_r+0x2d0>)
 8005d86:	21ef      	movs	r1, #239	; 0xef
 8005d88:	48aa      	ldr	r0, [pc, #680]	; (8006034 <_dtoa_r+0x2d4>)
 8005d8a:	f002 fc4d 	bl	8008628 <__assert_func>
 8005d8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d92:	6004      	str	r4, [r0, #0]
 8005d94:	60c4      	str	r4, [r0, #12]
 8005d96:	69eb      	ldr	r3, [r5, #28]
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	b151      	cbz	r1, 8005db2 <_dtoa_r+0x52>
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	604a      	str	r2, [r1, #4]
 8005da0:	2301      	movs	r3, #1
 8005da2:	4093      	lsls	r3, r2
 8005da4:	608b      	str	r3, [r1, #8]
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 fef8 	bl	8006b9c <_Bfree>
 8005dac:	69eb      	ldr	r3, [r5, #28]
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	1e3b      	subs	r3, r7, #0
 8005db4:	bfb9      	ittee	lt
 8005db6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dba:	9305      	strlt	r3, [sp, #20]
 8005dbc:	2300      	movge	r3, #0
 8005dbe:	f8c8 3000 	strge.w	r3, [r8]
 8005dc2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005dc6:	4b9c      	ldr	r3, [pc, #624]	; (8006038 <_dtoa_r+0x2d8>)
 8005dc8:	bfbc      	itt	lt
 8005dca:	2201      	movlt	r2, #1
 8005dcc:	f8c8 2000 	strlt.w	r2, [r8]
 8005dd0:	ea33 0309 	bics.w	r3, r3, r9
 8005dd4:	d119      	bne.n	8005e0a <_dtoa_r+0xaa>
 8005dd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005dd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005de2:	4333      	orrs	r3, r6
 8005de4:	f000 8587 	beq.w	80068f6 <_dtoa_r+0xb96>
 8005de8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dea:	b953      	cbnz	r3, 8005e02 <_dtoa_r+0xa2>
 8005dec:	4b93      	ldr	r3, [pc, #588]	; (800603c <_dtoa_r+0x2dc>)
 8005dee:	e023      	b.n	8005e38 <_dtoa_r+0xd8>
 8005df0:	4b93      	ldr	r3, [pc, #588]	; (8006040 <_dtoa_r+0x2e0>)
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	3308      	adds	r3, #8
 8005df6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	9803      	ldr	r0, [sp, #12]
 8005dfc:	b019      	add	sp, #100	; 0x64
 8005dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e02:	4b8e      	ldr	r3, [pc, #568]	; (800603c <_dtoa_r+0x2dc>)
 8005e04:	9303      	str	r3, [sp, #12]
 8005e06:	3303      	adds	r3, #3
 8005e08:	e7f5      	b.n	8005df6 <_dtoa_r+0x96>
 8005e0a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e0e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e16:	2200      	movs	r2, #0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f7fa fe5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e1e:	4680      	mov	r8, r0
 8005e20:	b160      	cbz	r0, 8005e3c <_dtoa_r+0xdc>
 8005e22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e24:	2301      	movs	r3, #1
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8560 	beq.w	80068f0 <_dtoa_r+0xb90>
 8005e30:	4b84      	ldr	r3, [pc, #528]	; (8006044 <_dtoa_r+0x2e4>)
 8005e32:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	9303      	str	r3, [sp, #12]
 8005e3a:	e7de      	b.n	8005dfa <_dtoa_r+0x9a>
 8005e3c:	ab16      	add	r3, sp, #88	; 0x58
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	ab17      	add	r3, sp, #92	; 0x5c
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	4628      	mov	r0, r5
 8005e46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e4a:	f001 fa39 	bl	80072c0 <__d2b>
 8005e4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e52:	4682      	mov	sl, r0
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d07d      	beq.n	8005f54 <_dtoa_r+0x1f4>
 8005e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e66:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e72:	4619      	mov	r1, r3
 8005e74:	2200      	movs	r2, #0
 8005e76:	4b74      	ldr	r3, [pc, #464]	; (8006048 <_dtoa_r+0x2e8>)
 8005e78:	f7fa fa0e 	bl	8000298 <__aeabi_dsub>
 8005e7c:	a366      	add	r3, pc, #408	; (adr r3, 8006018 <_dtoa_r+0x2b8>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa fbc1 	bl	8000608 <__aeabi_dmul>
 8005e86:	a366      	add	r3, pc, #408	; (adr r3, 8006020 <_dtoa_r+0x2c0>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa fa06 	bl	800029c <__adddf3>
 8005e90:	4606      	mov	r6, r0
 8005e92:	4620      	mov	r0, r4
 8005e94:	460f      	mov	r7, r1
 8005e96:	f7fa fb4d 	bl	8000534 <__aeabi_i2d>
 8005e9a:	a363      	add	r3, pc, #396	; (adr r3, 8006028 <_dtoa_r+0x2c8>)
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f7fa fbb2 	bl	8000608 <__aeabi_dmul>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	4639      	mov	r1, r7
 8005eac:	f7fa f9f6 	bl	800029c <__adddf3>
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	f7fa fe58 	bl	8000b68 <__aeabi_d2iz>
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4683      	mov	fp, r0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	f7fa fe13 	bl	8000aec <__aeabi_dcmplt>
 8005ec6:	b148      	cbz	r0, 8005edc <_dtoa_r+0x17c>
 8005ec8:	4658      	mov	r0, fp
 8005eca:	f7fa fb33 	bl	8000534 <__aeabi_i2d>
 8005ece:	4632      	mov	r2, r6
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	f7fa fe01 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ed6:	b908      	cbnz	r0, 8005edc <_dtoa_r+0x17c>
 8005ed8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005edc:	f1bb 0f16 	cmp.w	fp, #22
 8005ee0:	d856      	bhi.n	8005f90 <_dtoa_r+0x230>
 8005ee2:	4b5a      	ldr	r3, [pc, #360]	; (800604c <_dtoa_r+0x2ec>)
 8005ee4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ef0:	f7fa fdfc 	bl	8000aec <__aeabi_dcmplt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d04d      	beq.n	8005f94 <_dtoa_r+0x234>
 8005ef8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005efc:	2300      	movs	r3, #0
 8005efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f02:	1b1b      	subs	r3, r3, r4
 8005f04:	1e5a      	subs	r2, r3, #1
 8005f06:	bf44      	itt	mi
 8005f08:	f1c3 0901 	rsbmi	r9, r3, #1
 8005f0c:	2300      	movmi	r3, #0
 8005f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f10:	bf54      	ite	pl
 8005f12:	f04f 0900 	movpl.w	r9, #0
 8005f16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f18:	f1bb 0f00 	cmp.w	fp, #0
 8005f1c:	db3c      	blt.n	8005f98 <_dtoa_r+0x238>
 8005f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f20:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005f24:	445b      	add	r3, fp
 8005f26:	9309      	str	r3, [sp, #36]	; 0x24
 8005f28:	2300      	movs	r3, #0
 8005f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d866      	bhi.n	8006000 <_dtoa_r+0x2a0>
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	bfc4      	itt	gt
 8005f36:	3b04      	subgt	r3, #4
 8005f38:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8005f40:	bfcc      	ite	gt
 8005f42:	2400      	movgt	r4, #0
 8005f44:	2401      	movle	r4, #1
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	f200 8084 	bhi.w	8006054 <_dtoa_r+0x2f4>
 8005f4c:	e8df f003 	tbb	[pc, r3]
 8005f50:	5637392c 	.word	0x5637392c
 8005f54:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f58:	441c      	add	r4, r3
 8005f5a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	bfc1      	itttt	gt
 8005f62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f66:	fa09 f903 	lslgt.w	r9, r9, r3
 8005f6a:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005f6e:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f72:	bfd6      	itet	le
 8005f74:	f1c3 0320 	rsble	r3, r3, #32
 8005f78:	ea49 0003 	orrgt.w	r0, r9, r3
 8005f7c:	fa06 f003 	lslle.w	r0, r6, r3
 8005f80:	f7fa fac8 	bl	8000514 <__aeabi_ui2d>
 8005f84:	2201      	movs	r2, #1
 8005f86:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005f8a:	3c01      	subs	r4, #1
 8005f8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f8e:	e770      	b.n	8005e72 <_dtoa_r+0x112>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e7b4      	b.n	8005efe <_dtoa_r+0x19e>
 8005f94:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f96:	e7b3      	b.n	8005f00 <_dtoa_r+0x1a0>
 8005f98:	f1cb 0300 	rsb	r3, fp, #0
 8005f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	eba9 090b 	sub.w	r9, r9, fp
 8005fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8005fa6:	e7c1      	b.n	8005f2c <_dtoa_r+0x1cc>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dc53      	bgt.n	800605a <_dtoa_r+0x2fa>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	9306      	str	r3, [sp, #24]
 8005fb6:	9308      	str	r3, [sp, #32]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fbc:	e00b      	b.n	8005fd6 <_dtoa_r+0x276>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e7f3      	b.n	8005faa <_dtoa_r+0x24a>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fc8:	445b      	add	r3, fp
 8005fca:	9306      	str	r3, [sp, #24]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	9308      	str	r3, [sp, #32]
 8005fd2:	bfb8      	it	lt
 8005fd4:	2301      	movlt	r3, #1
 8005fd6:	69e8      	ldr	r0, [r5, #28]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	2204      	movs	r2, #4
 8005fdc:	f102 0614 	add.w	r6, r2, #20
 8005fe0:	429e      	cmp	r6, r3
 8005fe2:	d93e      	bls.n	8006062 <_dtoa_r+0x302>
 8005fe4:	6041      	str	r1, [r0, #4]
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f000 fd98 	bl	8006b1c <_Balloc>
 8005fec:	9003      	str	r0, [sp, #12]
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d13a      	bne.n	8006068 <_dtoa_r+0x308>
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <_dtoa_r+0x2f0>)
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	f240 11af 	movw	r1, #431	; 0x1af
 8005ffa:	e6c5      	b.n	8005d88 <_dtoa_r+0x28>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e7e1      	b.n	8005fc4 <_dtoa_r+0x264>
 8006000:	2401      	movs	r4, #1
 8006002:	2300      	movs	r3, #0
 8006004:	9322      	str	r3, [sp, #136]	; 0x88
 8006006:	940b      	str	r4, [sp, #44]	; 0x2c
 8006008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800600c:	9306      	str	r3, [sp, #24]
 800600e:	9308      	str	r3, [sp, #32]
 8006010:	2200      	movs	r2, #0
 8006012:	2312      	movs	r3, #18
 8006014:	e7d1      	b.n	8005fba <_dtoa_r+0x25a>
 8006016:	bf00      	nop
 8006018:	636f4361 	.word	0x636f4361
 800601c:	3fd287a7 	.word	0x3fd287a7
 8006020:	8b60c8b3 	.word	0x8b60c8b3
 8006024:	3fc68a28 	.word	0x3fc68a28
 8006028:	509f79fb 	.word	0x509f79fb
 800602c:	3fd34413 	.word	0x3fd34413
 8006030:	080093f6 	.word	0x080093f6
 8006034:	0800940d 	.word	0x0800940d
 8006038:	7ff00000 	.word	0x7ff00000
 800603c:	080093f2 	.word	0x080093f2
 8006040:	080093e9 	.word	0x080093e9
 8006044:	080093c1 	.word	0x080093c1
 8006048:	3ff80000 	.word	0x3ff80000
 800604c:	080094f8 	.word	0x080094f8
 8006050:	08009465 	.word	0x08009465
 8006054:	2301      	movs	r3, #1
 8006056:	930b      	str	r3, [sp, #44]	; 0x2c
 8006058:	e7d6      	b.n	8006008 <_dtoa_r+0x2a8>
 800605a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800605c:	9306      	str	r3, [sp, #24]
 800605e:	9308      	str	r3, [sp, #32]
 8006060:	e7b9      	b.n	8005fd6 <_dtoa_r+0x276>
 8006062:	3101      	adds	r1, #1
 8006064:	0052      	lsls	r2, r2, #1
 8006066:	e7b9      	b.n	8005fdc <_dtoa_r+0x27c>
 8006068:	69eb      	ldr	r3, [r5, #28]
 800606a:	9a03      	ldr	r2, [sp, #12]
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	9b08      	ldr	r3, [sp, #32]
 8006070:	2b0e      	cmp	r3, #14
 8006072:	f200 80a8 	bhi.w	80061c6 <_dtoa_r+0x466>
 8006076:	2c00      	cmp	r4, #0
 8006078:	f000 80a5 	beq.w	80061c6 <_dtoa_r+0x466>
 800607c:	f1bb 0f00 	cmp.w	fp, #0
 8006080:	dd34      	ble.n	80060ec <_dtoa_r+0x38c>
 8006082:	4b9a      	ldr	r3, [pc, #616]	; (80062ec <_dtoa_r+0x58c>)
 8006084:	f00b 020f 	and.w	r2, fp, #15
 8006088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800608c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006090:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006094:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006098:	ea4f 142b 	mov.w	r4, fp, asr #4
 800609c:	d016      	beq.n	80060cc <_dtoa_r+0x36c>
 800609e:	4b94      	ldr	r3, [pc, #592]	; (80062f0 <_dtoa_r+0x590>)
 80060a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060a8:	f7fa fbd8 	bl	800085c <__aeabi_ddiv>
 80060ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060b0:	f004 040f 	and.w	r4, r4, #15
 80060b4:	2703      	movs	r7, #3
 80060b6:	4e8e      	ldr	r6, [pc, #568]	; (80062f0 <_dtoa_r+0x590>)
 80060b8:	b954      	cbnz	r4, 80060d0 <_dtoa_r+0x370>
 80060ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060c2:	f7fa fbcb 	bl	800085c <__aeabi_ddiv>
 80060c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060ca:	e029      	b.n	8006120 <_dtoa_r+0x3c0>
 80060cc:	2702      	movs	r7, #2
 80060ce:	e7f2      	b.n	80060b6 <_dtoa_r+0x356>
 80060d0:	07e1      	lsls	r1, r4, #31
 80060d2:	d508      	bpl.n	80060e6 <_dtoa_r+0x386>
 80060d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060dc:	f7fa fa94 	bl	8000608 <__aeabi_dmul>
 80060e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060e4:	3701      	adds	r7, #1
 80060e6:	1064      	asrs	r4, r4, #1
 80060e8:	3608      	adds	r6, #8
 80060ea:	e7e5      	b.n	80060b8 <_dtoa_r+0x358>
 80060ec:	f000 80a5 	beq.w	800623a <_dtoa_r+0x4da>
 80060f0:	f1cb 0400 	rsb	r4, fp, #0
 80060f4:	4b7d      	ldr	r3, [pc, #500]	; (80062ec <_dtoa_r+0x58c>)
 80060f6:	4e7e      	ldr	r6, [pc, #504]	; (80062f0 <_dtoa_r+0x590>)
 80060f8:	f004 020f 	and.w	r2, r4, #15
 80060fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006108:	f7fa fa7e 	bl	8000608 <__aeabi_dmul>
 800610c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006110:	1124      	asrs	r4, r4, #4
 8006112:	2300      	movs	r3, #0
 8006114:	2702      	movs	r7, #2
 8006116:	2c00      	cmp	r4, #0
 8006118:	f040 8084 	bne.w	8006224 <_dtoa_r+0x4c4>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1d2      	bne.n	80060c6 <_dtoa_r+0x366>
 8006120:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006124:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8087 	beq.w	800623e <_dtoa_r+0x4de>
 8006130:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006134:	4b6f      	ldr	r3, [pc, #444]	; (80062f4 <_dtoa_r+0x594>)
 8006136:	2200      	movs	r2, #0
 8006138:	f7fa fcd8 	bl	8000aec <__aeabi_dcmplt>
 800613c:	2800      	cmp	r0, #0
 800613e:	d07e      	beq.n	800623e <_dtoa_r+0x4de>
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d07b      	beq.n	800623e <_dtoa_r+0x4de>
 8006146:	9b06      	ldr	r3, [sp, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	dd38      	ble.n	80061be <_dtoa_r+0x45e>
 800614c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006150:	4b69      	ldr	r3, [pc, #420]	; (80062f8 <_dtoa_r+0x598>)
 8006152:	2200      	movs	r2, #0
 8006154:	f7fa fa58 	bl	8000608 <__aeabi_dmul>
 8006158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800615c:	9c06      	ldr	r4, [sp, #24]
 800615e:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8006162:	3701      	adds	r7, #1
 8006164:	4638      	mov	r0, r7
 8006166:	f7fa f9e5 	bl	8000534 <__aeabi_i2d>
 800616a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616e:	f7fa fa4b 	bl	8000608 <__aeabi_dmul>
 8006172:	4b62      	ldr	r3, [pc, #392]	; (80062fc <_dtoa_r+0x59c>)
 8006174:	2200      	movs	r2, #0
 8006176:	f7fa f891 	bl	800029c <__adddf3>
 800617a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800617e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006182:	9611      	str	r6, [sp, #68]	; 0x44
 8006184:	2c00      	cmp	r4, #0
 8006186:	d15d      	bne.n	8006244 <_dtoa_r+0x4e4>
 8006188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800618c:	4b5c      	ldr	r3, [pc, #368]	; (8006300 <_dtoa_r+0x5a0>)
 800618e:	2200      	movs	r2, #0
 8006190:	f7fa f882 	bl	8000298 <__aeabi_dsub>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800619c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800619e:	4633      	mov	r3, r6
 80061a0:	f7fa fcc2 	bl	8000b28 <__aeabi_dcmpgt>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f040 8295 	bne.w	80066d4 <_dtoa_r+0x974>
 80061aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061b4:	f7fa fc9a 	bl	8000aec <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f040 8289 	bne.w	80066d0 <_dtoa_r+0x970>
 80061be:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80061c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f2c0 8151 	blt.w	8006470 <_dtoa_r+0x710>
 80061ce:	f1bb 0f0e 	cmp.w	fp, #14
 80061d2:	f300 814d 	bgt.w	8006470 <_dtoa_r+0x710>
 80061d6:	4b45      	ldr	r3, [pc, #276]	; (80062ec <_dtoa_r+0x58c>)
 80061d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80061e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f280 80da 	bge.w	80063a0 <_dtoa_r+0x640>
 80061ec:	9b08      	ldr	r3, [sp, #32]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f300 80d6 	bgt.w	80063a0 <_dtoa_r+0x640>
 80061f4:	f040 826b 	bne.w	80066ce <_dtoa_r+0x96e>
 80061f8:	4b41      	ldr	r3, [pc, #260]	; (8006300 <_dtoa_r+0x5a0>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006200:	f7fa fa02 	bl	8000608 <__aeabi_dmul>
 8006204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006208:	f7fa fc84 	bl	8000b14 <__aeabi_dcmpge>
 800620c:	9c08      	ldr	r4, [sp, #32]
 800620e:	4626      	mov	r6, r4
 8006210:	2800      	cmp	r0, #0
 8006212:	f040 8241 	bne.w	8006698 <_dtoa_r+0x938>
 8006216:	9f03      	ldr	r7, [sp, #12]
 8006218:	2331      	movs	r3, #49	; 0x31
 800621a:	f807 3b01 	strb.w	r3, [r7], #1
 800621e:	f10b 0b01 	add.w	fp, fp, #1
 8006222:	e23d      	b.n	80066a0 <_dtoa_r+0x940>
 8006224:	07e2      	lsls	r2, r4, #31
 8006226:	d505      	bpl.n	8006234 <_dtoa_r+0x4d4>
 8006228:	e9d6 2300 	ldrd	r2, r3, [r6]
 800622c:	f7fa f9ec 	bl	8000608 <__aeabi_dmul>
 8006230:	3701      	adds	r7, #1
 8006232:	2301      	movs	r3, #1
 8006234:	1064      	asrs	r4, r4, #1
 8006236:	3608      	adds	r6, #8
 8006238:	e76d      	b.n	8006116 <_dtoa_r+0x3b6>
 800623a:	2702      	movs	r7, #2
 800623c:	e770      	b.n	8006120 <_dtoa_r+0x3c0>
 800623e:	9c08      	ldr	r4, [sp, #32]
 8006240:	46d8      	mov	r8, fp
 8006242:	e78f      	b.n	8006164 <_dtoa_r+0x404>
 8006244:	9903      	ldr	r1, [sp, #12]
 8006246:	4b29      	ldr	r3, [pc, #164]	; (80062ec <_dtoa_r+0x58c>)
 8006248:	4421      	add	r1, r4
 800624a:	9112      	str	r1, [sp, #72]	; 0x48
 800624c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800624e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006252:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006256:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800625a:	2900      	cmp	r1, #0
 800625c:	d054      	beq.n	8006308 <_dtoa_r+0x5a8>
 800625e:	4929      	ldr	r1, [pc, #164]	; (8006304 <_dtoa_r+0x5a4>)
 8006260:	2000      	movs	r0, #0
 8006262:	f7fa fafb 	bl	800085c <__aeabi_ddiv>
 8006266:	463b      	mov	r3, r7
 8006268:	4632      	mov	r2, r6
 800626a:	f7fa f815 	bl	8000298 <__aeabi_dsub>
 800626e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006272:	9f03      	ldr	r7, [sp, #12]
 8006274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006278:	f7fa fc76 	bl	8000b68 <__aeabi_d2iz>
 800627c:	4604      	mov	r4, r0
 800627e:	f7fa f959 	bl	8000534 <__aeabi_i2d>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800628a:	f7fa f805 	bl	8000298 <__aeabi_dsub>
 800628e:	3430      	adds	r4, #48	; 0x30
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006298:	f807 4b01 	strb.w	r4, [r7], #1
 800629c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062a0:	f7fa fc24 	bl	8000aec <__aeabi_dcmplt>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d173      	bne.n	8006390 <_dtoa_r+0x630>
 80062a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ac:	4911      	ldr	r1, [pc, #68]	; (80062f4 <_dtoa_r+0x594>)
 80062ae:	2000      	movs	r0, #0
 80062b0:	f7f9 fff2 	bl	8000298 <__aeabi_dsub>
 80062b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062b8:	f7fa fc18 	bl	8000aec <__aeabi_dcmplt>
 80062bc:	2800      	cmp	r0, #0
 80062be:	f040 80b6 	bne.w	800642e <_dtoa_r+0x6ce>
 80062c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062c4:	429f      	cmp	r7, r3
 80062c6:	f43f af7a 	beq.w	80061be <_dtoa_r+0x45e>
 80062ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062ce:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <_dtoa_r+0x598>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	f7fa f999 	bl	8000608 <__aeabi_dmul>
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <_dtoa_r+0x598>)
 80062d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062dc:	2200      	movs	r2, #0
 80062de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e2:	f7fa f991 	bl	8000608 <__aeabi_dmul>
 80062e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062ea:	e7c3      	b.n	8006274 <_dtoa_r+0x514>
 80062ec:	080094f8 	.word	0x080094f8
 80062f0:	080094d0 	.word	0x080094d0
 80062f4:	3ff00000 	.word	0x3ff00000
 80062f8:	40240000 	.word	0x40240000
 80062fc:	401c0000 	.word	0x401c0000
 8006300:	40140000 	.word	0x40140000
 8006304:	3fe00000 	.word	0x3fe00000
 8006308:	4630      	mov	r0, r6
 800630a:	4639      	mov	r1, r7
 800630c:	f7fa f97c 	bl	8000608 <__aeabi_dmul>
 8006310:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006316:	9c03      	ldr	r4, [sp, #12]
 8006318:	9314      	str	r3, [sp, #80]	; 0x50
 800631a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800631e:	f7fa fc23 	bl	8000b68 <__aeabi_d2iz>
 8006322:	9015      	str	r0, [sp, #84]	; 0x54
 8006324:	f7fa f906 	bl	8000534 <__aeabi_i2d>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006330:	f7f9 ffb2 	bl	8000298 <__aeabi_dsub>
 8006334:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006336:	3330      	adds	r3, #48	; 0x30
 8006338:	f804 3b01 	strb.w	r3, [r4], #1
 800633c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800633e:	429c      	cmp	r4, r3
 8006340:	4606      	mov	r6, r0
 8006342:	460f      	mov	r7, r1
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	d124      	bne.n	8006394 <_dtoa_r+0x634>
 800634a:	4bb0      	ldr	r3, [pc, #704]	; (800660c <_dtoa_r+0x8ac>)
 800634c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006350:	f7f9 ffa4 	bl	800029c <__adddf3>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa fbe4 	bl	8000b28 <__aeabi_dcmpgt>
 8006360:	2800      	cmp	r0, #0
 8006362:	d163      	bne.n	800642c <_dtoa_r+0x6cc>
 8006364:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006368:	49a8      	ldr	r1, [pc, #672]	; (800660c <_dtoa_r+0x8ac>)
 800636a:	2000      	movs	r0, #0
 800636c:	f7f9 ff94 	bl	8000298 <__aeabi_dsub>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4630      	mov	r0, r6
 8006376:	4639      	mov	r1, r7
 8006378:	f7fa fbb8 	bl	8000aec <__aeabi_dcmplt>
 800637c:	2800      	cmp	r0, #0
 800637e:	f43f af1e 	beq.w	80061be <_dtoa_r+0x45e>
 8006382:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006384:	1e7b      	subs	r3, r7, #1
 8006386:	9314      	str	r3, [sp, #80]	; 0x50
 8006388:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800638c:	2b30      	cmp	r3, #48	; 0x30
 800638e:	d0f8      	beq.n	8006382 <_dtoa_r+0x622>
 8006390:	46c3      	mov	fp, r8
 8006392:	e03b      	b.n	800640c <_dtoa_r+0x6ac>
 8006394:	4b9e      	ldr	r3, [pc, #632]	; (8006610 <_dtoa_r+0x8b0>)
 8006396:	f7fa f937 	bl	8000608 <__aeabi_dmul>
 800639a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800639e:	e7bc      	b.n	800631a <_dtoa_r+0x5ba>
 80063a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80063a4:	9f03      	ldr	r7, [sp, #12]
 80063a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7fa fa55 	bl	800085c <__aeabi_ddiv>
 80063b2:	f7fa fbd9 	bl	8000b68 <__aeabi_d2iz>
 80063b6:	4604      	mov	r4, r0
 80063b8:	f7fa f8bc 	bl	8000534 <__aeabi_i2d>
 80063bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063c0:	f7fa f922 	bl	8000608 <__aeabi_dmul>
 80063c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4640      	mov	r0, r8
 80063ce:	4649      	mov	r1, r9
 80063d0:	f7f9 ff62 	bl	8000298 <__aeabi_dsub>
 80063d4:	f807 6b01 	strb.w	r6, [r7], #1
 80063d8:	9e03      	ldr	r6, [sp, #12]
 80063da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80063de:	1bbe      	subs	r6, r7, r6
 80063e0:	45b4      	cmp	ip, r6
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	d136      	bne.n	8006456 <_dtoa_r+0x6f6>
 80063e8:	f7f9 ff58 	bl	800029c <__adddf3>
 80063ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f0:	4680      	mov	r8, r0
 80063f2:	4689      	mov	r9, r1
 80063f4:	f7fa fb98 	bl	8000b28 <__aeabi_dcmpgt>
 80063f8:	bb58      	cbnz	r0, 8006452 <_dtoa_r+0x6f2>
 80063fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063fe:	4640      	mov	r0, r8
 8006400:	4649      	mov	r1, r9
 8006402:	f7fa fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006406:	b108      	cbz	r0, 800640c <_dtoa_r+0x6ac>
 8006408:	07e3      	lsls	r3, r4, #31
 800640a:	d422      	bmi.n	8006452 <_dtoa_r+0x6f2>
 800640c:	4651      	mov	r1, sl
 800640e:	4628      	mov	r0, r5
 8006410:	f000 fbc4 	bl	8006b9c <_Bfree>
 8006414:	2300      	movs	r3, #0
 8006416:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006418:	703b      	strb	r3, [r7, #0]
 800641a:	f10b 0301 	add.w	r3, fp, #1
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006422:	2b00      	cmp	r3, #0
 8006424:	f43f ace9 	beq.w	8005dfa <_dtoa_r+0x9a>
 8006428:	601f      	str	r7, [r3, #0]
 800642a:	e4e6      	b.n	8005dfa <_dtoa_r+0x9a>
 800642c:	4627      	mov	r7, r4
 800642e:	463b      	mov	r3, r7
 8006430:	461f      	mov	r7, r3
 8006432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006436:	2a39      	cmp	r2, #57	; 0x39
 8006438:	d107      	bne.n	800644a <_dtoa_r+0x6ea>
 800643a:	9a03      	ldr	r2, [sp, #12]
 800643c:	429a      	cmp	r2, r3
 800643e:	d1f7      	bne.n	8006430 <_dtoa_r+0x6d0>
 8006440:	9903      	ldr	r1, [sp, #12]
 8006442:	2230      	movs	r2, #48	; 0x30
 8006444:	f108 0801 	add.w	r8, r8, #1
 8006448:	700a      	strb	r2, [r1, #0]
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	3201      	adds	r2, #1
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e79e      	b.n	8006390 <_dtoa_r+0x630>
 8006452:	46d8      	mov	r8, fp
 8006454:	e7eb      	b.n	800642e <_dtoa_r+0x6ce>
 8006456:	4b6e      	ldr	r3, [pc, #440]	; (8006610 <_dtoa_r+0x8b0>)
 8006458:	2200      	movs	r2, #0
 800645a:	f7fa f8d5 	bl	8000608 <__aeabi_dmul>
 800645e:	2200      	movs	r2, #0
 8006460:	2300      	movs	r3, #0
 8006462:	4680      	mov	r8, r0
 8006464:	4689      	mov	r9, r1
 8006466:	f7fa fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800646a:	2800      	cmp	r0, #0
 800646c:	d09b      	beq.n	80063a6 <_dtoa_r+0x646>
 800646e:	e7cd      	b.n	800640c <_dtoa_r+0x6ac>
 8006470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006472:	2a00      	cmp	r2, #0
 8006474:	f000 80c4 	beq.w	8006600 <_dtoa_r+0x8a0>
 8006478:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800647a:	2a01      	cmp	r2, #1
 800647c:	f300 80a8 	bgt.w	80065d0 <_dtoa_r+0x870>
 8006480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006482:	2a00      	cmp	r2, #0
 8006484:	f000 80a0 	beq.w	80065c8 <_dtoa_r+0x868>
 8006488:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800648c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800648e:	464f      	mov	r7, r9
 8006490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006492:	2101      	movs	r1, #1
 8006494:	441a      	add	r2, r3
 8006496:	4628      	mov	r0, r5
 8006498:	4499      	add	r9, r3
 800649a:	9209      	str	r2, [sp, #36]	; 0x24
 800649c:	f000 fc7e 	bl	8006d9c <__i2b>
 80064a0:	4606      	mov	r6, r0
 80064a2:	b15f      	cbz	r7, 80064bc <_dtoa_r+0x75c>
 80064a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dd08      	ble.n	80064bc <_dtoa_r+0x75c>
 80064aa:	42bb      	cmp	r3, r7
 80064ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ae:	bfa8      	it	ge
 80064b0:	463b      	movge	r3, r7
 80064b2:	eba9 0903 	sub.w	r9, r9, r3
 80064b6:	1aff      	subs	r7, r7, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	9309      	str	r3, [sp, #36]	; 0x24
 80064bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064be:	b1f3      	cbz	r3, 80064fe <_dtoa_r+0x79e>
 80064c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80a0 	beq.w	8006608 <_dtoa_r+0x8a8>
 80064c8:	2c00      	cmp	r4, #0
 80064ca:	dd10      	ble.n	80064ee <_dtoa_r+0x78e>
 80064cc:	4631      	mov	r1, r6
 80064ce:	4622      	mov	r2, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 fd23 	bl	8006f1c <__pow5mult>
 80064d6:	4652      	mov	r2, sl
 80064d8:	4601      	mov	r1, r0
 80064da:	4606      	mov	r6, r0
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 fc73 	bl	8006dc8 <__multiply>
 80064e2:	4651      	mov	r1, sl
 80064e4:	4680      	mov	r8, r0
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 fb58 	bl	8006b9c <_Bfree>
 80064ec:	46c2      	mov	sl, r8
 80064ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f0:	1b1a      	subs	r2, r3, r4
 80064f2:	d004      	beq.n	80064fe <_dtoa_r+0x79e>
 80064f4:	4651      	mov	r1, sl
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 fd10 	bl	8006f1c <__pow5mult>
 80064fc:	4682      	mov	sl, r0
 80064fe:	2101      	movs	r1, #1
 8006500:	4628      	mov	r0, r5
 8006502:	f000 fc4b 	bl	8006d9c <__i2b>
 8006506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006508:	2b00      	cmp	r3, #0
 800650a:	4604      	mov	r4, r0
 800650c:	f340 8082 	ble.w	8006614 <_dtoa_r+0x8b4>
 8006510:	461a      	mov	r2, r3
 8006512:	4601      	mov	r1, r0
 8006514:	4628      	mov	r0, r5
 8006516:	f000 fd01 	bl	8006f1c <__pow5mult>
 800651a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800651c:	2b01      	cmp	r3, #1
 800651e:	4604      	mov	r4, r0
 8006520:	dd7b      	ble.n	800661a <_dtoa_r+0x8ba>
 8006522:	f04f 0800 	mov.w	r8, #0
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800652c:	6918      	ldr	r0, [r3, #16]
 800652e:	f000 fbe7 	bl	8006d00 <__hi0bits>
 8006532:	f1c0 0020 	rsb	r0, r0, #32
 8006536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006538:	4418      	add	r0, r3
 800653a:	f010 001f 	ands.w	r0, r0, #31
 800653e:	f000 8092 	beq.w	8006666 <_dtoa_r+0x906>
 8006542:	f1c0 0320 	rsb	r3, r0, #32
 8006546:	2b04      	cmp	r3, #4
 8006548:	f340 8085 	ble.w	8006656 <_dtoa_r+0x8f6>
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	f1c0 001c 	rsb	r0, r0, #28
 8006552:	4403      	add	r3, r0
 8006554:	4481      	add	r9, r0
 8006556:	4407      	add	r7, r0
 8006558:	9309      	str	r3, [sp, #36]	; 0x24
 800655a:	f1b9 0f00 	cmp.w	r9, #0
 800655e:	dd05      	ble.n	800656c <_dtoa_r+0x80c>
 8006560:	4651      	mov	r1, sl
 8006562:	464a      	mov	r2, r9
 8006564:	4628      	mov	r0, r5
 8006566:	f000 fd33 	bl	8006fd0 <__lshift>
 800656a:	4682      	mov	sl, r0
 800656c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	dd05      	ble.n	800657e <_dtoa_r+0x81e>
 8006572:	4621      	mov	r1, r4
 8006574:	461a      	mov	r2, r3
 8006576:	4628      	mov	r0, r5
 8006578:	f000 fd2a 	bl	8006fd0 <__lshift>
 800657c:	4604      	mov	r4, r0
 800657e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d072      	beq.n	800666a <_dtoa_r+0x90a>
 8006584:	4621      	mov	r1, r4
 8006586:	4650      	mov	r0, sl
 8006588:	f000 fd8e 	bl	80070a8 <__mcmp>
 800658c:	2800      	cmp	r0, #0
 800658e:	da6c      	bge.n	800666a <_dtoa_r+0x90a>
 8006590:	2300      	movs	r3, #0
 8006592:	4651      	mov	r1, sl
 8006594:	220a      	movs	r2, #10
 8006596:	4628      	mov	r0, r5
 8006598:	f000 fb22 	bl	8006be0 <__multadd>
 800659c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800659e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80065a2:	4682      	mov	sl, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 81ad 	beq.w	8006904 <_dtoa_r+0xba4>
 80065aa:	2300      	movs	r3, #0
 80065ac:	4631      	mov	r1, r6
 80065ae:	220a      	movs	r2, #10
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 fb15 	bl	8006be0 <__multadd>
 80065b6:	9b06      	ldr	r3, [sp, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	4606      	mov	r6, r0
 80065bc:	f300 8093 	bgt.w	80066e6 <_dtoa_r+0x986>
 80065c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	dc59      	bgt.n	800667a <_dtoa_r+0x91a>
 80065c6:	e08e      	b.n	80066e6 <_dtoa_r+0x986>
 80065c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065ce:	e75d      	b.n	800648c <_dtoa_r+0x72c>
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	1e5c      	subs	r4, r3, #1
 80065d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	bfbf      	itttt	lt
 80065da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80065de:	940a      	strlt	r4, [sp, #40]	; 0x28
 80065e0:	1ae3      	sublt	r3, r4, r3
 80065e2:	bfb4      	ite	lt
 80065e4:	18d2      	addlt	r2, r2, r3
 80065e6:	1b1c      	subge	r4, r3, r4
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	bfbc      	itt	lt
 80065ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 80065ee:	2400      	movlt	r4, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bfb5      	itete	lt
 80065f4:	eba9 0703 	sublt.w	r7, r9, r3
 80065f8:	9b08      	ldrge	r3, [sp, #32]
 80065fa:	2300      	movlt	r3, #0
 80065fc:	464f      	movge	r7, r9
 80065fe:	e747      	b.n	8006490 <_dtoa_r+0x730>
 8006600:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006602:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006604:	464f      	mov	r7, r9
 8006606:	e74c      	b.n	80064a2 <_dtoa_r+0x742>
 8006608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800660a:	e773      	b.n	80064f4 <_dtoa_r+0x794>
 800660c:	3fe00000 	.word	0x3fe00000
 8006610:	40240000 	.word	0x40240000
 8006614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006616:	2b01      	cmp	r3, #1
 8006618:	dc18      	bgt.n	800664c <_dtoa_r+0x8ec>
 800661a:	9b04      	ldr	r3, [sp, #16]
 800661c:	b9b3      	cbnz	r3, 800664c <_dtoa_r+0x8ec>
 800661e:	9b05      	ldr	r3, [sp, #20]
 8006620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006624:	b993      	cbnz	r3, 800664c <_dtoa_r+0x8ec>
 8006626:	9b05      	ldr	r3, [sp, #20]
 8006628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800662c:	0d1b      	lsrs	r3, r3, #20
 800662e:	051b      	lsls	r3, r3, #20
 8006630:	b17b      	cbz	r3, 8006652 <_dtoa_r+0x8f2>
 8006632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006634:	3301      	adds	r3, #1
 8006636:	f109 0901 	add.w	r9, r9, #1
 800663a:	9309      	str	r3, [sp, #36]	; 0x24
 800663c:	f04f 0801 	mov.w	r8, #1
 8006640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f af6f 	bne.w	8006526 <_dtoa_r+0x7c6>
 8006648:	2001      	movs	r0, #1
 800664a:	e774      	b.n	8006536 <_dtoa_r+0x7d6>
 800664c:	f04f 0800 	mov.w	r8, #0
 8006650:	e7f6      	b.n	8006640 <_dtoa_r+0x8e0>
 8006652:	4698      	mov	r8, r3
 8006654:	e7f4      	b.n	8006640 <_dtoa_r+0x8e0>
 8006656:	d080      	beq.n	800655a <_dtoa_r+0x7fa>
 8006658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665a:	331c      	adds	r3, #28
 800665c:	441a      	add	r2, r3
 800665e:	4499      	add	r9, r3
 8006660:	441f      	add	r7, r3
 8006662:	9209      	str	r2, [sp, #36]	; 0x24
 8006664:	e779      	b.n	800655a <_dtoa_r+0x7fa>
 8006666:	4603      	mov	r3, r0
 8006668:	e7f6      	b.n	8006658 <_dtoa_r+0x8f8>
 800666a:	9b08      	ldr	r3, [sp, #32]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dc34      	bgt.n	80066da <_dtoa_r+0x97a>
 8006670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006672:	2b02      	cmp	r3, #2
 8006674:	dd31      	ble.n	80066da <_dtoa_r+0x97a>
 8006676:	9b08      	ldr	r3, [sp, #32]
 8006678:	9306      	str	r3, [sp, #24]
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	b963      	cbnz	r3, 8006698 <_dtoa_r+0x938>
 800667e:	4621      	mov	r1, r4
 8006680:	2205      	movs	r2, #5
 8006682:	4628      	mov	r0, r5
 8006684:	f000 faac 	bl	8006be0 <__multadd>
 8006688:	4601      	mov	r1, r0
 800668a:	4604      	mov	r4, r0
 800668c:	4650      	mov	r0, sl
 800668e:	f000 fd0b 	bl	80070a8 <__mcmp>
 8006692:	2800      	cmp	r0, #0
 8006694:	f73f adbf 	bgt.w	8006216 <_dtoa_r+0x4b6>
 8006698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800669a:	9f03      	ldr	r7, [sp, #12]
 800669c:	ea6f 0b03 	mvn.w	fp, r3
 80066a0:	f04f 0800 	mov.w	r8, #0
 80066a4:	4621      	mov	r1, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 fa78 	bl	8006b9c <_Bfree>
 80066ac:	2e00      	cmp	r6, #0
 80066ae:	f43f aead 	beq.w	800640c <_dtoa_r+0x6ac>
 80066b2:	f1b8 0f00 	cmp.w	r8, #0
 80066b6:	d005      	beq.n	80066c4 <_dtoa_r+0x964>
 80066b8:	45b0      	cmp	r8, r6
 80066ba:	d003      	beq.n	80066c4 <_dtoa_r+0x964>
 80066bc:	4641      	mov	r1, r8
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fa6c 	bl	8006b9c <_Bfree>
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 fa68 	bl	8006b9c <_Bfree>
 80066cc:	e69e      	b.n	800640c <_dtoa_r+0x6ac>
 80066ce:	2400      	movs	r4, #0
 80066d0:	4626      	mov	r6, r4
 80066d2:	e7e1      	b.n	8006698 <_dtoa_r+0x938>
 80066d4:	46c3      	mov	fp, r8
 80066d6:	4626      	mov	r6, r4
 80066d8:	e59d      	b.n	8006216 <_dtoa_r+0x4b6>
 80066da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80c8 	beq.w	8006872 <_dtoa_r+0xb12>
 80066e2:	9b08      	ldr	r3, [sp, #32]
 80066e4:	9306      	str	r3, [sp, #24]
 80066e6:	2f00      	cmp	r7, #0
 80066e8:	dd05      	ble.n	80066f6 <_dtoa_r+0x996>
 80066ea:	4631      	mov	r1, r6
 80066ec:	463a      	mov	r2, r7
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 fc6e 	bl	8006fd0 <__lshift>
 80066f4:	4606      	mov	r6, r0
 80066f6:	f1b8 0f00 	cmp.w	r8, #0
 80066fa:	d05b      	beq.n	80067b4 <_dtoa_r+0xa54>
 80066fc:	6871      	ldr	r1, [r6, #4]
 80066fe:	4628      	mov	r0, r5
 8006700:	f000 fa0c 	bl	8006b1c <_Balloc>
 8006704:	4607      	mov	r7, r0
 8006706:	b928      	cbnz	r0, 8006714 <_dtoa_r+0x9b4>
 8006708:	4b82      	ldr	r3, [pc, #520]	; (8006914 <_dtoa_r+0xbb4>)
 800670a:	4602      	mov	r2, r0
 800670c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006710:	f7ff bb3a 	b.w	8005d88 <_dtoa_r+0x28>
 8006714:	6932      	ldr	r2, [r6, #16]
 8006716:	3202      	adds	r2, #2
 8006718:	0092      	lsls	r2, r2, #2
 800671a:	f106 010c 	add.w	r1, r6, #12
 800671e:	300c      	adds	r0, #12
 8006720:	f001 ff6e 	bl	8008600 <memcpy>
 8006724:	2201      	movs	r2, #1
 8006726:	4639      	mov	r1, r7
 8006728:	4628      	mov	r0, r5
 800672a:	f000 fc51 	bl	8006fd0 <__lshift>
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	9a03      	ldr	r2, [sp, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	9b06      	ldr	r3, [sp, #24]
 8006738:	4413      	add	r3, r2
 800673a:	930b      	str	r3, [sp, #44]	; 0x2c
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	46b0      	mov	r8, r6
 8006744:	930a      	str	r3, [sp, #40]	; 0x28
 8006746:	4606      	mov	r6, r0
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	4621      	mov	r1, r4
 800674c:	3b01      	subs	r3, #1
 800674e:	4650      	mov	r0, sl
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	f7ff fa7f 	bl	8005c54 <quorem>
 8006756:	4641      	mov	r1, r8
 8006758:	9006      	str	r0, [sp, #24]
 800675a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800675e:	4650      	mov	r0, sl
 8006760:	f000 fca2 	bl	80070a8 <__mcmp>
 8006764:	4632      	mov	r2, r6
 8006766:	9009      	str	r0, [sp, #36]	; 0x24
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 fcb8 	bl	80070e0 <__mdiff>
 8006770:	68c2      	ldr	r2, [r0, #12]
 8006772:	4607      	mov	r7, r0
 8006774:	bb02      	cbnz	r2, 80067b8 <_dtoa_r+0xa58>
 8006776:	4601      	mov	r1, r0
 8006778:	4650      	mov	r0, sl
 800677a:	f000 fc95 	bl	80070a8 <__mcmp>
 800677e:	4602      	mov	r2, r0
 8006780:	4639      	mov	r1, r7
 8006782:	4628      	mov	r0, r5
 8006784:	920c      	str	r2, [sp, #48]	; 0x30
 8006786:	f000 fa09 	bl	8006b9c <_Bfree>
 800678a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800678e:	9f08      	ldr	r7, [sp, #32]
 8006790:	ea43 0102 	orr.w	r1, r3, r2
 8006794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006796:	4319      	orrs	r1, r3
 8006798:	d110      	bne.n	80067bc <_dtoa_r+0xa5c>
 800679a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800679e:	d029      	beq.n	80067f4 <_dtoa_r+0xa94>
 80067a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dd02      	ble.n	80067ac <_dtoa_r+0xa4c>
 80067a6:	9b06      	ldr	r3, [sp, #24]
 80067a8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	f883 9000 	strb.w	r9, [r3]
 80067b2:	e777      	b.n	80066a4 <_dtoa_r+0x944>
 80067b4:	4630      	mov	r0, r6
 80067b6:	e7ba      	b.n	800672e <_dtoa_r+0x9ce>
 80067b8:	2201      	movs	r2, #1
 80067ba:	e7e1      	b.n	8006780 <_dtoa_r+0xa20>
 80067bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	db04      	blt.n	80067cc <_dtoa_r+0xa6c>
 80067c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80067c4:	430b      	orrs	r3, r1
 80067c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067c8:	430b      	orrs	r3, r1
 80067ca:	d120      	bne.n	800680e <_dtoa_r+0xaae>
 80067cc:	2a00      	cmp	r2, #0
 80067ce:	dded      	ble.n	80067ac <_dtoa_r+0xa4c>
 80067d0:	4651      	mov	r1, sl
 80067d2:	2201      	movs	r2, #1
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 fbfb 	bl	8006fd0 <__lshift>
 80067da:	4621      	mov	r1, r4
 80067dc:	4682      	mov	sl, r0
 80067de:	f000 fc63 	bl	80070a8 <__mcmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	dc03      	bgt.n	80067ee <_dtoa_r+0xa8e>
 80067e6:	d1e1      	bne.n	80067ac <_dtoa_r+0xa4c>
 80067e8:	f019 0f01 	tst.w	r9, #1
 80067ec:	d0de      	beq.n	80067ac <_dtoa_r+0xa4c>
 80067ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067f2:	d1d8      	bne.n	80067a6 <_dtoa_r+0xa46>
 80067f4:	9a04      	ldr	r2, [sp, #16]
 80067f6:	2339      	movs	r3, #57	; 0x39
 80067f8:	7013      	strb	r3, [r2, #0]
 80067fa:	463b      	mov	r3, r7
 80067fc:	461f      	mov	r7, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006804:	2a39      	cmp	r2, #57	; 0x39
 8006806:	d06c      	beq.n	80068e2 <_dtoa_r+0xb82>
 8006808:	3201      	adds	r2, #1
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	e74a      	b.n	80066a4 <_dtoa_r+0x944>
 800680e:	2a00      	cmp	r2, #0
 8006810:	dd07      	ble.n	8006822 <_dtoa_r+0xac2>
 8006812:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006816:	d0ed      	beq.n	80067f4 <_dtoa_r+0xa94>
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	f109 0301 	add.w	r3, r9, #1
 800681e:	7013      	strb	r3, [r2, #0]
 8006820:	e740      	b.n	80066a4 <_dtoa_r+0x944>
 8006822:	9b08      	ldr	r3, [sp, #32]
 8006824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006826:	f803 9c01 	strb.w	r9, [r3, #-1]
 800682a:	4293      	cmp	r3, r2
 800682c:	d043      	beq.n	80068b6 <_dtoa_r+0xb56>
 800682e:	4651      	mov	r1, sl
 8006830:	2300      	movs	r3, #0
 8006832:	220a      	movs	r2, #10
 8006834:	4628      	mov	r0, r5
 8006836:	f000 f9d3 	bl	8006be0 <__multadd>
 800683a:	45b0      	cmp	r8, r6
 800683c:	4682      	mov	sl, r0
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	f04f 020a 	mov.w	r2, #10
 8006846:	4641      	mov	r1, r8
 8006848:	4628      	mov	r0, r5
 800684a:	d107      	bne.n	800685c <_dtoa_r+0xafc>
 800684c:	f000 f9c8 	bl	8006be0 <__multadd>
 8006850:	4680      	mov	r8, r0
 8006852:	4606      	mov	r6, r0
 8006854:	9b08      	ldr	r3, [sp, #32]
 8006856:	3301      	adds	r3, #1
 8006858:	9308      	str	r3, [sp, #32]
 800685a:	e775      	b.n	8006748 <_dtoa_r+0x9e8>
 800685c:	f000 f9c0 	bl	8006be0 <__multadd>
 8006860:	4631      	mov	r1, r6
 8006862:	4680      	mov	r8, r0
 8006864:	2300      	movs	r3, #0
 8006866:	220a      	movs	r2, #10
 8006868:	4628      	mov	r0, r5
 800686a:	f000 f9b9 	bl	8006be0 <__multadd>
 800686e:	4606      	mov	r6, r0
 8006870:	e7f0      	b.n	8006854 <_dtoa_r+0xaf4>
 8006872:	9b08      	ldr	r3, [sp, #32]
 8006874:	9306      	str	r3, [sp, #24]
 8006876:	9f03      	ldr	r7, [sp, #12]
 8006878:	4621      	mov	r1, r4
 800687a:	4650      	mov	r0, sl
 800687c:	f7ff f9ea 	bl	8005c54 <quorem>
 8006880:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	f807 9b01 	strb.w	r9, [r7], #1
 800688a:	1afa      	subs	r2, r7, r3
 800688c:	9b06      	ldr	r3, [sp, #24]
 800688e:	4293      	cmp	r3, r2
 8006890:	dd07      	ble.n	80068a2 <_dtoa_r+0xb42>
 8006892:	4651      	mov	r1, sl
 8006894:	2300      	movs	r3, #0
 8006896:	220a      	movs	r2, #10
 8006898:	4628      	mov	r0, r5
 800689a:	f000 f9a1 	bl	8006be0 <__multadd>
 800689e:	4682      	mov	sl, r0
 80068a0:	e7ea      	b.n	8006878 <_dtoa_r+0xb18>
 80068a2:	9b06      	ldr	r3, [sp, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bfc8      	it	gt
 80068a8:	461f      	movgt	r7, r3
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	bfd8      	it	le
 80068ae:	2701      	movle	r7, #1
 80068b0:	441f      	add	r7, r3
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	4651      	mov	r1, sl
 80068b8:	2201      	movs	r2, #1
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 fb88 	bl	8006fd0 <__lshift>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4682      	mov	sl, r0
 80068c4:	f000 fbf0 	bl	80070a8 <__mcmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	dc96      	bgt.n	80067fa <_dtoa_r+0xa9a>
 80068cc:	d102      	bne.n	80068d4 <_dtoa_r+0xb74>
 80068ce:	f019 0f01 	tst.w	r9, #1
 80068d2:	d192      	bne.n	80067fa <_dtoa_r+0xa9a>
 80068d4:	463b      	mov	r3, r7
 80068d6:	461f      	mov	r7, r3
 80068d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068dc:	2a30      	cmp	r2, #48	; 0x30
 80068de:	d0fa      	beq.n	80068d6 <_dtoa_r+0xb76>
 80068e0:	e6e0      	b.n	80066a4 <_dtoa_r+0x944>
 80068e2:	9a03      	ldr	r2, [sp, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d189      	bne.n	80067fc <_dtoa_r+0xa9c>
 80068e8:	f10b 0b01 	add.w	fp, fp, #1
 80068ec:	2331      	movs	r3, #49	; 0x31
 80068ee:	e796      	b.n	800681e <_dtoa_r+0xabe>
 80068f0:	4b09      	ldr	r3, [pc, #36]	; (8006918 <_dtoa_r+0xbb8>)
 80068f2:	f7ff baa1 	b.w	8005e38 <_dtoa_r+0xd8>
 80068f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f47f aa79 	bne.w	8005df0 <_dtoa_r+0x90>
 80068fe:	4b07      	ldr	r3, [pc, #28]	; (800691c <_dtoa_r+0xbbc>)
 8006900:	f7ff ba9a 	b.w	8005e38 <_dtoa_r+0xd8>
 8006904:	9b06      	ldr	r3, [sp, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	dcb5      	bgt.n	8006876 <_dtoa_r+0xb16>
 800690a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800690c:	2b02      	cmp	r3, #2
 800690e:	f73f aeb4 	bgt.w	800667a <_dtoa_r+0x91a>
 8006912:	e7b0      	b.n	8006876 <_dtoa_r+0xb16>
 8006914:	08009465 	.word	0x08009465
 8006918:	080093c0 	.word	0x080093c0
 800691c:	080093e9 	.word	0x080093e9

08006920 <_free_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4605      	mov	r5, r0
 8006924:	2900      	cmp	r1, #0
 8006926:	d041      	beq.n	80069ac <_free_r+0x8c>
 8006928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800692c:	1f0c      	subs	r4, r1, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfb8      	it	lt
 8006932:	18e4      	addlt	r4, r4, r3
 8006934:	f000 f8e6 	bl	8006b04 <__malloc_lock>
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <_free_r+0x90>)
 800693a:	6813      	ldr	r3, [r2, #0]
 800693c:	b933      	cbnz	r3, 800694c <_free_r+0x2c>
 800693e:	6063      	str	r3, [r4, #4]
 8006940:	6014      	str	r4, [r2, #0]
 8006942:	4628      	mov	r0, r5
 8006944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006948:	f000 b8e2 	b.w	8006b10 <__malloc_unlock>
 800694c:	42a3      	cmp	r3, r4
 800694e:	d908      	bls.n	8006962 <_free_r+0x42>
 8006950:	6820      	ldr	r0, [r4, #0]
 8006952:	1821      	adds	r1, r4, r0
 8006954:	428b      	cmp	r3, r1
 8006956:	bf01      	itttt	eq
 8006958:	6819      	ldreq	r1, [r3, #0]
 800695a:	685b      	ldreq	r3, [r3, #4]
 800695c:	1809      	addeq	r1, r1, r0
 800695e:	6021      	streq	r1, [r4, #0]
 8006960:	e7ed      	b.n	800693e <_free_r+0x1e>
 8006962:	461a      	mov	r2, r3
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b10b      	cbz	r3, 800696c <_free_r+0x4c>
 8006968:	42a3      	cmp	r3, r4
 800696a:	d9fa      	bls.n	8006962 <_free_r+0x42>
 800696c:	6811      	ldr	r1, [r2, #0]
 800696e:	1850      	adds	r0, r2, r1
 8006970:	42a0      	cmp	r0, r4
 8006972:	d10b      	bne.n	800698c <_free_r+0x6c>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	4401      	add	r1, r0
 8006978:	1850      	adds	r0, r2, r1
 800697a:	4283      	cmp	r3, r0
 800697c:	6011      	str	r1, [r2, #0]
 800697e:	d1e0      	bne.n	8006942 <_free_r+0x22>
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	6053      	str	r3, [r2, #4]
 8006986:	4408      	add	r0, r1
 8006988:	6010      	str	r0, [r2, #0]
 800698a:	e7da      	b.n	8006942 <_free_r+0x22>
 800698c:	d902      	bls.n	8006994 <_free_r+0x74>
 800698e:	230c      	movs	r3, #12
 8006990:	602b      	str	r3, [r5, #0]
 8006992:	e7d6      	b.n	8006942 <_free_r+0x22>
 8006994:	6820      	ldr	r0, [r4, #0]
 8006996:	1821      	adds	r1, r4, r0
 8006998:	428b      	cmp	r3, r1
 800699a:	bf04      	itt	eq
 800699c:	6819      	ldreq	r1, [r3, #0]
 800699e:	685b      	ldreq	r3, [r3, #4]
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	bf04      	itt	eq
 80069a4:	1809      	addeq	r1, r1, r0
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	6054      	str	r4, [r2, #4]
 80069aa:	e7ca      	b.n	8006942 <_free_r+0x22>
 80069ac:	bd38      	pop	{r3, r4, r5, pc}
 80069ae:	bf00      	nop
 80069b0:	200004e0 	.word	0x200004e0

080069b4 <malloc>:
 80069b4:	4b02      	ldr	r3, [pc, #8]	; (80069c0 <malloc+0xc>)
 80069b6:	4601      	mov	r1, r0
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	f000 b823 	b.w	8006a04 <_malloc_r>
 80069be:	bf00      	nop
 80069c0:	20000068 	.word	0x20000068

080069c4 <sbrk_aligned>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	4e0e      	ldr	r6, [pc, #56]	; (8006a00 <sbrk_aligned+0x3c>)
 80069c8:	460c      	mov	r4, r1
 80069ca:	6831      	ldr	r1, [r6, #0]
 80069cc:	4605      	mov	r5, r0
 80069ce:	b911      	cbnz	r1, 80069d6 <sbrk_aligned+0x12>
 80069d0:	f001 fe06 	bl	80085e0 <_sbrk_r>
 80069d4:	6030      	str	r0, [r6, #0]
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f001 fe01 	bl	80085e0 <_sbrk_r>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d00a      	beq.n	80069f8 <sbrk_aligned+0x34>
 80069e2:	1cc4      	adds	r4, r0, #3
 80069e4:	f024 0403 	bic.w	r4, r4, #3
 80069e8:	42a0      	cmp	r0, r4
 80069ea:	d007      	beq.n	80069fc <sbrk_aligned+0x38>
 80069ec:	1a21      	subs	r1, r4, r0
 80069ee:	4628      	mov	r0, r5
 80069f0:	f001 fdf6 	bl	80085e0 <_sbrk_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d101      	bne.n	80069fc <sbrk_aligned+0x38>
 80069f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80069fc:	4620      	mov	r0, r4
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	200004e4 	.word	0x200004e4

08006a04 <_malloc_r>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	1ccd      	adds	r5, r1, #3
 8006a0a:	f025 0503 	bic.w	r5, r5, #3
 8006a0e:	3508      	adds	r5, #8
 8006a10:	2d0c      	cmp	r5, #12
 8006a12:	bf38      	it	cc
 8006a14:	250c      	movcc	r5, #12
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	4607      	mov	r7, r0
 8006a1a:	db01      	blt.n	8006a20 <_malloc_r+0x1c>
 8006a1c:	42a9      	cmp	r1, r5
 8006a1e:	d905      	bls.n	8006a2c <_malloc_r+0x28>
 8006a20:	230c      	movs	r3, #12
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	2600      	movs	r6, #0
 8006a26:	4630      	mov	r0, r6
 8006a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b00 <_malloc_r+0xfc>
 8006a30:	f000 f868 	bl	8006b04 <__malloc_lock>
 8006a34:	f8d8 3000 	ldr.w	r3, [r8]
 8006a38:	461c      	mov	r4, r3
 8006a3a:	bb5c      	cbnz	r4, 8006a94 <_malloc_r+0x90>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7ff ffc0 	bl	80069c4 <sbrk_aligned>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	4604      	mov	r4, r0
 8006a48:	d155      	bne.n	8006af6 <_malloc_r+0xf2>
 8006a4a:	f8d8 4000 	ldr.w	r4, [r8]
 8006a4e:	4626      	mov	r6, r4
 8006a50:	2e00      	cmp	r6, #0
 8006a52:	d145      	bne.n	8006ae0 <_malloc_r+0xdc>
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	d048      	beq.n	8006aea <_malloc_r+0xe6>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	eb04 0903 	add.w	r9, r4, r3
 8006a62:	f001 fdbd 	bl	80085e0 <_sbrk_r>
 8006a66:	4581      	cmp	r9, r0
 8006a68:	d13f      	bne.n	8006aea <_malloc_r+0xe6>
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	1a6d      	subs	r5, r5, r1
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4638      	mov	r0, r7
 8006a72:	f7ff ffa7 	bl	80069c4 <sbrk_aligned>
 8006a76:	3001      	adds	r0, #1
 8006a78:	d037      	beq.n	8006aea <_malloc_r+0xe6>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	442b      	add	r3, r5
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	f8d8 3000 	ldr.w	r3, [r8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d038      	beq.n	8006afa <_malloc_r+0xf6>
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	42a2      	cmp	r2, r4
 8006a8c:	d12b      	bne.n	8006ae6 <_malloc_r+0xe2>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e00f      	b.n	8006ab4 <_malloc_r+0xb0>
 8006a94:	6822      	ldr	r2, [r4, #0]
 8006a96:	1b52      	subs	r2, r2, r5
 8006a98:	d41f      	bmi.n	8006ada <_malloc_r+0xd6>
 8006a9a:	2a0b      	cmp	r2, #11
 8006a9c:	d917      	bls.n	8006ace <_malloc_r+0xca>
 8006a9e:	1961      	adds	r1, r4, r5
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	6025      	str	r5, [r4, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	6059      	strne	r1, [r3, #4]
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	bf08      	it	eq
 8006aac:	f8c8 1000 	streq.w	r1, [r8]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f104 060b 	add.w	r6, r4, #11
 8006aba:	f000 f829 	bl	8006b10 <__malloc_unlock>
 8006abe:	f026 0607 	bic.w	r6, r6, #7
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	1af2      	subs	r2, r6, r3
 8006ac6:	d0ae      	beq.n	8006a26 <_malloc_r+0x22>
 8006ac8:	1b9b      	subs	r3, r3, r6
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	e7ab      	b.n	8006a26 <_malloc_r+0x22>
 8006ace:	42a3      	cmp	r3, r4
 8006ad0:	6862      	ldr	r2, [r4, #4]
 8006ad2:	d1dd      	bne.n	8006a90 <_malloc_r+0x8c>
 8006ad4:	f8c8 2000 	str.w	r2, [r8]
 8006ad8:	e7ec      	b.n	8006ab4 <_malloc_r+0xb0>
 8006ada:	4623      	mov	r3, r4
 8006adc:	6864      	ldr	r4, [r4, #4]
 8006ade:	e7ac      	b.n	8006a3a <_malloc_r+0x36>
 8006ae0:	4634      	mov	r4, r6
 8006ae2:	6876      	ldr	r6, [r6, #4]
 8006ae4:	e7b4      	b.n	8006a50 <_malloc_r+0x4c>
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	e7cc      	b.n	8006a84 <_malloc_r+0x80>
 8006aea:	230c      	movs	r3, #12
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	4638      	mov	r0, r7
 8006af0:	f000 f80e 	bl	8006b10 <__malloc_unlock>
 8006af4:	e797      	b.n	8006a26 <_malloc_r+0x22>
 8006af6:	6025      	str	r5, [r4, #0]
 8006af8:	e7dc      	b.n	8006ab4 <_malloc_r+0xb0>
 8006afa:	605b      	str	r3, [r3, #4]
 8006afc:	deff      	udf	#255	; 0xff
 8006afe:	bf00      	nop
 8006b00:	200004e0 	.word	0x200004e0

08006b04 <__malloc_lock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_lock+0x8>)
 8006b06:	f7ff b89f 	b.w	8005c48 <__retarget_lock_acquire_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	200004dc 	.word	0x200004dc

08006b10 <__malloc_unlock>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__malloc_unlock+0x8>)
 8006b12:	f7ff b89a 	b.w	8005c4a <__retarget_lock_release_recursive>
 8006b16:	bf00      	nop
 8006b18:	200004dc 	.word	0x200004dc

08006b1c <_Balloc>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	69c6      	ldr	r6, [r0, #28]
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	b976      	cbnz	r6, 8006b44 <_Balloc+0x28>
 8006b26:	2010      	movs	r0, #16
 8006b28:	f7ff ff44 	bl	80069b4 <malloc>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	61e0      	str	r0, [r4, #28]
 8006b30:	b920      	cbnz	r0, 8006b3c <_Balloc+0x20>
 8006b32:	4b18      	ldr	r3, [pc, #96]	; (8006b94 <_Balloc+0x78>)
 8006b34:	4818      	ldr	r0, [pc, #96]	; (8006b98 <_Balloc+0x7c>)
 8006b36:	216b      	movs	r1, #107	; 0x6b
 8006b38:	f001 fd76 	bl	8008628 <__assert_func>
 8006b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b40:	6006      	str	r6, [r0, #0]
 8006b42:	60c6      	str	r6, [r0, #12]
 8006b44:	69e6      	ldr	r6, [r4, #28]
 8006b46:	68f3      	ldr	r3, [r6, #12]
 8006b48:	b183      	cbz	r3, 8006b6c <_Balloc+0x50>
 8006b4a:	69e3      	ldr	r3, [r4, #28]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b52:	b9b8      	cbnz	r0, 8006b84 <_Balloc+0x68>
 8006b54:	2101      	movs	r1, #1
 8006b56:	fa01 f605 	lsl.w	r6, r1, r5
 8006b5a:	1d72      	adds	r2, r6, #5
 8006b5c:	0092      	lsls	r2, r2, #2
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f001 fd80 	bl	8008664 <_calloc_r>
 8006b64:	b160      	cbz	r0, 8006b80 <_Balloc+0x64>
 8006b66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b6a:	e00e      	b.n	8006b8a <_Balloc+0x6e>
 8006b6c:	2221      	movs	r2, #33	; 0x21
 8006b6e:	2104      	movs	r1, #4
 8006b70:	4620      	mov	r0, r4
 8006b72:	f001 fd77 	bl	8008664 <_calloc_r>
 8006b76:	69e3      	ldr	r3, [r4, #28]
 8006b78:	60f0      	str	r0, [r6, #12]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e4      	bne.n	8006b4a <_Balloc+0x2e>
 8006b80:	2000      	movs	r0, #0
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	6802      	ldr	r2, [r0, #0]
 8006b86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b90:	e7f7      	b.n	8006b82 <_Balloc+0x66>
 8006b92:	bf00      	nop
 8006b94:	080093f6 	.word	0x080093f6
 8006b98:	08009476 	.word	0x08009476

08006b9c <_Bfree>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	69c6      	ldr	r6, [r0, #28]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b976      	cbnz	r6, 8006bc4 <_Bfree+0x28>
 8006ba6:	2010      	movs	r0, #16
 8006ba8:	f7ff ff04 	bl	80069b4 <malloc>
 8006bac:	4602      	mov	r2, r0
 8006bae:	61e8      	str	r0, [r5, #28]
 8006bb0:	b920      	cbnz	r0, 8006bbc <_Bfree+0x20>
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <_Bfree+0x3c>)
 8006bb4:	4809      	ldr	r0, [pc, #36]	; (8006bdc <_Bfree+0x40>)
 8006bb6:	218f      	movs	r1, #143	; 0x8f
 8006bb8:	f001 fd36 	bl	8008628 <__assert_func>
 8006bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bc0:	6006      	str	r6, [r0, #0]
 8006bc2:	60c6      	str	r6, [r0, #12]
 8006bc4:	b13c      	cbz	r4, 8006bd6 <_Bfree+0x3a>
 8006bc6:	69eb      	ldr	r3, [r5, #28]
 8006bc8:	6862      	ldr	r2, [r4, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bd0:	6021      	str	r1, [r4, #0]
 8006bd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	080093f6 	.word	0x080093f6
 8006bdc:	08009476 	.word	0x08009476

08006be0 <__multadd>:
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	690d      	ldr	r5, [r1, #16]
 8006be6:	4607      	mov	r7, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	461e      	mov	r6, r3
 8006bec:	f101 0c14 	add.w	ip, r1, #20
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f8dc 3000 	ldr.w	r3, [ip]
 8006bf6:	b299      	uxth	r1, r3
 8006bf8:	fb02 6101 	mla	r1, r2, r1, r6
 8006bfc:	0c1e      	lsrs	r6, r3, #16
 8006bfe:	0c0b      	lsrs	r3, r1, #16
 8006c00:	fb02 3306 	mla	r3, r2, r6, r3
 8006c04:	b289      	uxth	r1, r1
 8006c06:	3001      	adds	r0, #1
 8006c08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c0c:	4285      	cmp	r5, r0
 8006c0e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c16:	dcec      	bgt.n	8006bf2 <__multadd+0x12>
 8006c18:	b30e      	cbz	r6, 8006c5e <__multadd+0x7e>
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dc19      	bgt.n	8006c54 <__multadd+0x74>
 8006c20:	6861      	ldr	r1, [r4, #4]
 8006c22:	4638      	mov	r0, r7
 8006c24:	3101      	adds	r1, #1
 8006c26:	f7ff ff79 	bl	8006b1c <_Balloc>
 8006c2a:	4680      	mov	r8, r0
 8006c2c:	b928      	cbnz	r0, 8006c3a <__multadd+0x5a>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <__multadd+0x84>)
 8006c32:	480d      	ldr	r0, [pc, #52]	; (8006c68 <__multadd+0x88>)
 8006c34:	21ba      	movs	r1, #186	; 0xba
 8006c36:	f001 fcf7 	bl	8008628 <__assert_func>
 8006c3a:	6922      	ldr	r2, [r4, #16]
 8006c3c:	3202      	adds	r2, #2
 8006c3e:	f104 010c 	add.w	r1, r4, #12
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	300c      	adds	r0, #12
 8006c46:	f001 fcdb 	bl	8008600 <memcpy>
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f7ff ffa5 	bl	8006b9c <_Bfree>
 8006c52:	4644      	mov	r4, r8
 8006c54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c58:	3501      	adds	r5, #1
 8006c5a:	615e      	str	r6, [r3, #20]
 8006c5c:	6125      	str	r5, [r4, #16]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c64:	08009465 	.word	0x08009465
 8006c68:	08009476 	.word	0x08009476

08006c6c <__s2b>:
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	460c      	mov	r4, r1
 8006c72:	4615      	mov	r5, r2
 8006c74:	461f      	mov	r7, r3
 8006c76:	2209      	movs	r2, #9
 8006c78:	3308      	adds	r3, #8
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c80:	2100      	movs	r1, #0
 8006c82:	2201      	movs	r2, #1
 8006c84:	429a      	cmp	r2, r3
 8006c86:	db09      	blt.n	8006c9c <__s2b+0x30>
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff ff47 	bl	8006b1c <_Balloc>
 8006c8e:	b940      	cbnz	r0, 8006ca2 <__s2b+0x36>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <__s2b+0x8c>)
 8006c94:	4819      	ldr	r0, [pc, #100]	; (8006cfc <__s2b+0x90>)
 8006c96:	21d3      	movs	r1, #211	; 0xd3
 8006c98:	f001 fcc6 	bl	8008628 <__assert_func>
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	3101      	adds	r1, #1
 8006ca0:	e7f0      	b.n	8006c84 <__s2b+0x18>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	6143      	str	r3, [r0, #20]
 8006ca6:	2d09      	cmp	r5, #9
 8006ca8:	f04f 0301 	mov.w	r3, #1
 8006cac:	6103      	str	r3, [r0, #16]
 8006cae:	dd16      	ble.n	8006cde <__s2b+0x72>
 8006cb0:	f104 0909 	add.w	r9, r4, #9
 8006cb4:	46c8      	mov	r8, r9
 8006cb6:	442c      	add	r4, r5
 8006cb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	3b30      	subs	r3, #48	; 0x30
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ff8c 	bl	8006be0 <__multadd>
 8006cc8:	45a0      	cmp	r8, r4
 8006cca:	d1f5      	bne.n	8006cb8 <__s2b+0x4c>
 8006ccc:	f1a5 0408 	sub.w	r4, r5, #8
 8006cd0:	444c      	add	r4, r9
 8006cd2:	1b2d      	subs	r5, r5, r4
 8006cd4:	1963      	adds	r3, r4, r5
 8006cd6:	42bb      	cmp	r3, r7
 8006cd8:	db04      	blt.n	8006ce4 <__s2b+0x78>
 8006cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cde:	340a      	adds	r4, #10
 8006ce0:	2509      	movs	r5, #9
 8006ce2:	e7f6      	b.n	8006cd2 <__s2b+0x66>
 8006ce4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ce8:	4601      	mov	r1, r0
 8006cea:	3b30      	subs	r3, #48	; 0x30
 8006cec:	220a      	movs	r2, #10
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ff76 	bl	8006be0 <__multadd>
 8006cf4:	e7ee      	b.n	8006cd4 <__s2b+0x68>
 8006cf6:	bf00      	nop
 8006cf8:	08009465 	.word	0x08009465
 8006cfc:	08009476 	.word	0x08009476

08006d00 <__hi0bits>:
 8006d00:	0c02      	lsrs	r2, r0, #16
 8006d02:	0412      	lsls	r2, r2, #16
 8006d04:	4603      	mov	r3, r0
 8006d06:	b9ca      	cbnz	r2, 8006d3c <__hi0bits+0x3c>
 8006d08:	0403      	lsls	r3, r0, #16
 8006d0a:	2010      	movs	r0, #16
 8006d0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d10:	bf04      	itt	eq
 8006d12:	021b      	lsleq	r3, r3, #8
 8006d14:	3008      	addeq	r0, #8
 8006d16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d1a:	bf04      	itt	eq
 8006d1c:	011b      	lsleq	r3, r3, #4
 8006d1e:	3004      	addeq	r0, #4
 8006d20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d24:	bf04      	itt	eq
 8006d26:	009b      	lsleq	r3, r3, #2
 8006d28:	3002      	addeq	r0, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	db05      	blt.n	8006d3a <__hi0bits+0x3a>
 8006d2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006d32:	f100 0001 	add.w	r0, r0, #1
 8006d36:	bf08      	it	eq
 8006d38:	2020      	moveq	r0, #32
 8006d3a:	4770      	bx	lr
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e7e5      	b.n	8006d0c <__hi0bits+0xc>

08006d40 <__lo0bits>:
 8006d40:	6803      	ldr	r3, [r0, #0]
 8006d42:	4602      	mov	r2, r0
 8006d44:	f013 0007 	ands.w	r0, r3, #7
 8006d48:	d00b      	beq.n	8006d62 <__lo0bits+0x22>
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	d421      	bmi.n	8006d92 <__lo0bits+0x52>
 8006d4e:	0798      	lsls	r0, r3, #30
 8006d50:	bf49      	itett	mi
 8006d52:	085b      	lsrmi	r3, r3, #1
 8006d54:	089b      	lsrpl	r3, r3, #2
 8006d56:	2001      	movmi	r0, #1
 8006d58:	6013      	strmi	r3, [r2, #0]
 8006d5a:	bf5c      	itt	pl
 8006d5c:	6013      	strpl	r3, [r2, #0]
 8006d5e:	2002      	movpl	r0, #2
 8006d60:	4770      	bx	lr
 8006d62:	b299      	uxth	r1, r3
 8006d64:	b909      	cbnz	r1, 8006d6a <__lo0bits+0x2a>
 8006d66:	0c1b      	lsrs	r3, r3, #16
 8006d68:	2010      	movs	r0, #16
 8006d6a:	b2d9      	uxtb	r1, r3
 8006d6c:	b909      	cbnz	r1, 8006d72 <__lo0bits+0x32>
 8006d6e:	3008      	adds	r0, #8
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	0719      	lsls	r1, r3, #28
 8006d74:	bf04      	itt	eq
 8006d76:	091b      	lsreq	r3, r3, #4
 8006d78:	3004      	addeq	r0, #4
 8006d7a:	0799      	lsls	r1, r3, #30
 8006d7c:	bf04      	itt	eq
 8006d7e:	089b      	lsreq	r3, r3, #2
 8006d80:	3002      	addeq	r0, #2
 8006d82:	07d9      	lsls	r1, r3, #31
 8006d84:	d403      	bmi.n	8006d8e <__lo0bits+0x4e>
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	f100 0001 	add.w	r0, r0, #1
 8006d8c:	d003      	beq.n	8006d96 <__lo0bits+0x56>
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4770      	bx	lr
 8006d92:	2000      	movs	r0, #0
 8006d94:	4770      	bx	lr
 8006d96:	2020      	movs	r0, #32
 8006d98:	4770      	bx	lr
	...

08006d9c <__i2b>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	460c      	mov	r4, r1
 8006da0:	2101      	movs	r1, #1
 8006da2:	f7ff febb 	bl	8006b1c <_Balloc>
 8006da6:	4602      	mov	r2, r0
 8006da8:	b928      	cbnz	r0, 8006db6 <__i2b+0x1a>
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <__i2b+0x24>)
 8006dac:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <__i2b+0x28>)
 8006dae:	f240 1145 	movw	r1, #325	; 0x145
 8006db2:	f001 fc39 	bl	8008628 <__assert_func>
 8006db6:	2301      	movs	r3, #1
 8006db8:	6144      	str	r4, [r0, #20]
 8006dba:	6103      	str	r3, [r0, #16]
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	08009465 	.word	0x08009465
 8006dc4:	08009476 	.word	0x08009476

08006dc8 <__multiply>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	4691      	mov	r9, r2
 8006dce:	690a      	ldr	r2, [r1, #16]
 8006dd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	bfb8      	it	lt
 8006dd8:	460b      	movlt	r3, r1
 8006dda:	460c      	mov	r4, r1
 8006ddc:	bfbc      	itt	lt
 8006dde:	464c      	movlt	r4, r9
 8006de0:	4699      	movlt	r9, r3
 8006de2:	6927      	ldr	r7, [r4, #16]
 8006de4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006de8:	68a3      	ldr	r3, [r4, #8]
 8006dea:	6861      	ldr	r1, [r4, #4]
 8006dec:	eb07 060a 	add.w	r6, r7, sl
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	b085      	sub	sp, #20
 8006df4:	bfb8      	it	lt
 8006df6:	3101      	addlt	r1, #1
 8006df8:	f7ff fe90 	bl	8006b1c <_Balloc>
 8006dfc:	b930      	cbnz	r0, 8006e0c <__multiply+0x44>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b44      	ldr	r3, [pc, #272]	; (8006f14 <__multiply+0x14c>)
 8006e02:	4845      	ldr	r0, [pc, #276]	; (8006f18 <__multiply+0x150>)
 8006e04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e08:	f001 fc0e 	bl	8008628 <__assert_func>
 8006e0c:	f100 0514 	add.w	r5, r0, #20
 8006e10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e14:	462b      	mov	r3, r5
 8006e16:	2200      	movs	r2, #0
 8006e18:	4543      	cmp	r3, r8
 8006e1a:	d321      	bcc.n	8006e60 <__multiply+0x98>
 8006e1c:	f104 0314 	add.w	r3, r4, #20
 8006e20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e24:	f109 0314 	add.w	r3, r9, #20
 8006e28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e2c:	9202      	str	r2, [sp, #8]
 8006e2e:	1b3a      	subs	r2, r7, r4
 8006e30:	3a15      	subs	r2, #21
 8006e32:	f022 0203 	bic.w	r2, r2, #3
 8006e36:	3204      	adds	r2, #4
 8006e38:	f104 0115 	add.w	r1, r4, #21
 8006e3c:	428f      	cmp	r7, r1
 8006e3e:	bf38      	it	cc
 8006e40:	2204      	movcc	r2, #4
 8006e42:	9201      	str	r2, [sp, #4]
 8006e44:	9a02      	ldr	r2, [sp, #8]
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d80c      	bhi.n	8006e66 <__multiply+0x9e>
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	dd03      	ble.n	8006e58 <__multiply+0x90>
 8006e50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d05a      	beq.n	8006f0e <__multiply+0x146>
 8006e58:	6106      	str	r6, [r0, #16]
 8006e5a:	b005      	add	sp, #20
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	f843 2b04 	str.w	r2, [r3], #4
 8006e64:	e7d8      	b.n	8006e18 <__multiply+0x50>
 8006e66:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e6a:	f1ba 0f00 	cmp.w	sl, #0
 8006e6e:	d023      	beq.n	8006eb8 <__multiply+0xf0>
 8006e70:	f104 0e14 	add.w	lr, r4, #20
 8006e74:	46a9      	mov	r9, r5
 8006e76:	f04f 0c00 	mov.w	ip, #0
 8006e7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e7e:	f8d9 1000 	ldr.w	r1, [r9]
 8006e82:	fa1f fb82 	uxth.w	fp, r2
 8006e86:	b289      	uxth	r1, r1
 8006e88:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e8c:	4461      	add	r1, ip
 8006e8e:	f8d9 c000 	ldr.w	ip, [r9]
 8006e92:	0c12      	lsrs	r2, r2, #16
 8006e94:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e98:	fb0a c202 	mla	r2, sl, r2, ip
 8006e9c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ea0:	b289      	uxth	r1, r1
 8006ea2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ea6:	4577      	cmp	r7, lr
 8006ea8:	f849 1b04 	str.w	r1, [r9], #4
 8006eac:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eb0:	d8e3      	bhi.n	8006e7a <__multiply+0xb2>
 8006eb2:	9a01      	ldr	r2, [sp, #4]
 8006eb4:	f845 c002 	str.w	ip, [r5, r2]
 8006eb8:	9a03      	ldr	r2, [sp, #12]
 8006eba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	f1b9 0f00 	cmp.w	r9, #0
 8006ec4:	d021      	beq.n	8006f0a <__multiply+0x142>
 8006ec6:	6829      	ldr	r1, [r5, #0]
 8006ec8:	f104 0c14 	add.w	ip, r4, #20
 8006ecc:	46ae      	mov	lr, r5
 8006ece:	f04f 0a00 	mov.w	sl, #0
 8006ed2:	f8bc b000 	ldrh.w	fp, [ip]
 8006ed6:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006eda:	fb09 220b 	mla	r2, r9, fp, r2
 8006ede:	4452      	add	r2, sl
 8006ee0:	b289      	uxth	r1, r1
 8006ee2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ee6:	f84e 1b04 	str.w	r1, [lr], #4
 8006eea:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006eee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ef2:	f8be 1000 	ldrh.w	r1, [lr]
 8006ef6:	fb09 110a 	mla	r1, r9, sl, r1
 8006efa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006efe:	4567      	cmp	r7, ip
 8006f00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f04:	d8e5      	bhi.n	8006ed2 <__multiply+0x10a>
 8006f06:	9a01      	ldr	r2, [sp, #4]
 8006f08:	50a9      	str	r1, [r5, r2]
 8006f0a:	3504      	adds	r5, #4
 8006f0c:	e79a      	b.n	8006e44 <__multiply+0x7c>
 8006f0e:	3e01      	subs	r6, #1
 8006f10:	e79c      	b.n	8006e4c <__multiply+0x84>
 8006f12:	bf00      	nop
 8006f14:	08009465 	.word	0x08009465
 8006f18:	08009476 	.word	0x08009476

08006f1c <__pow5mult>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4615      	mov	r5, r2
 8006f22:	f012 0203 	ands.w	r2, r2, #3
 8006f26:	4606      	mov	r6, r0
 8006f28:	460f      	mov	r7, r1
 8006f2a:	d007      	beq.n	8006f3c <__pow5mult+0x20>
 8006f2c:	4c25      	ldr	r4, [pc, #148]	; (8006fc4 <__pow5mult+0xa8>)
 8006f2e:	3a01      	subs	r2, #1
 8006f30:	2300      	movs	r3, #0
 8006f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f36:	f7ff fe53 	bl	8006be0 <__multadd>
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	10ad      	asrs	r5, r5, #2
 8006f3e:	d03d      	beq.n	8006fbc <__pow5mult+0xa0>
 8006f40:	69f4      	ldr	r4, [r6, #28]
 8006f42:	b97c      	cbnz	r4, 8006f64 <__pow5mult+0x48>
 8006f44:	2010      	movs	r0, #16
 8006f46:	f7ff fd35 	bl	80069b4 <malloc>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	61f0      	str	r0, [r6, #28]
 8006f4e:	b928      	cbnz	r0, 8006f5c <__pow5mult+0x40>
 8006f50:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <__pow5mult+0xac>)
 8006f52:	481e      	ldr	r0, [pc, #120]	; (8006fcc <__pow5mult+0xb0>)
 8006f54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f58:	f001 fb66 	bl	8008628 <__assert_func>
 8006f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f60:	6004      	str	r4, [r0, #0]
 8006f62:	60c4      	str	r4, [r0, #12]
 8006f64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f6c:	b94c      	cbnz	r4, 8006f82 <__pow5mult+0x66>
 8006f6e:	f240 2171 	movw	r1, #625	; 0x271
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff ff12 	bl	8006d9c <__i2b>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f7e:	4604      	mov	r4, r0
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	07eb      	lsls	r3, r5, #31
 8006f88:	d50a      	bpl.n	8006fa0 <__pow5mult+0x84>
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff1a 	bl	8006dc8 <__multiply>
 8006f94:	4639      	mov	r1, r7
 8006f96:	4680      	mov	r8, r0
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7ff fdff 	bl	8006b9c <_Bfree>
 8006f9e:	4647      	mov	r7, r8
 8006fa0:	106d      	asrs	r5, r5, #1
 8006fa2:	d00b      	beq.n	8006fbc <__pow5mult+0xa0>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	b938      	cbnz	r0, 8006fb8 <__pow5mult+0x9c>
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4621      	mov	r1, r4
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7ff ff0b 	bl	8006dc8 <__multiply>
 8006fb2:	6020      	str	r0, [r4, #0]
 8006fb4:	f8c0 9000 	str.w	r9, [r0]
 8006fb8:	4604      	mov	r4, r0
 8006fba:	e7e4      	b.n	8006f86 <__pow5mult+0x6a>
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc2:	bf00      	nop
 8006fc4:	080095c0 	.word	0x080095c0
 8006fc8:	080093f6 	.word	0x080093f6
 8006fcc:	08009476 	.word	0x08009476

08006fd0 <__lshift>:
 8006fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	6849      	ldr	r1, [r1, #4]
 8006fd8:	6923      	ldr	r3, [r4, #16]
 8006fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fde:	68a3      	ldr	r3, [r4, #8]
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	4691      	mov	r9, r2
 8006fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fe8:	f108 0601 	add.w	r6, r8, #1
 8006fec:	42b3      	cmp	r3, r6
 8006fee:	db0b      	blt.n	8007008 <__lshift+0x38>
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f7ff fd93 	bl	8006b1c <_Balloc>
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	b948      	cbnz	r0, 800700e <__lshift+0x3e>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4b28      	ldr	r3, [pc, #160]	; (80070a0 <__lshift+0xd0>)
 8006ffe:	4829      	ldr	r0, [pc, #164]	; (80070a4 <__lshift+0xd4>)
 8007000:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007004:	f001 fb10 	bl	8008628 <__assert_func>
 8007008:	3101      	adds	r1, #1
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	e7ee      	b.n	8006fec <__lshift+0x1c>
 800700e:	2300      	movs	r3, #0
 8007010:	f100 0114 	add.w	r1, r0, #20
 8007014:	f100 0210 	add.w	r2, r0, #16
 8007018:	4618      	mov	r0, r3
 800701a:	4553      	cmp	r3, sl
 800701c:	db33      	blt.n	8007086 <__lshift+0xb6>
 800701e:	6920      	ldr	r0, [r4, #16]
 8007020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007024:	f104 0314 	add.w	r3, r4, #20
 8007028:	f019 091f 	ands.w	r9, r9, #31
 800702c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007030:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007034:	d02b      	beq.n	800708e <__lshift+0xbe>
 8007036:	f1c9 0e20 	rsb	lr, r9, #32
 800703a:	468a      	mov	sl, r1
 800703c:	2200      	movs	r2, #0
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	fa00 f009 	lsl.w	r0, r0, r9
 8007044:	4310      	orrs	r0, r2
 8007046:	f84a 0b04 	str.w	r0, [sl], #4
 800704a:	f853 2b04 	ldr.w	r2, [r3], #4
 800704e:	459c      	cmp	ip, r3
 8007050:	fa22 f20e 	lsr.w	r2, r2, lr
 8007054:	d8f3      	bhi.n	800703e <__lshift+0x6e>
 8007056:	ebac 0304 	sub.w	r3, ip, r4
 800705a:	3b15      	subs	r3, #21
 800705c:	f023 0303 	bic.w	r3, r3, #3
 8007060:	3304      	adds	r3, #4
 8007062:	f104 0015 	add.w	r0, r4, #21
 8007066:	4584      	cmp	ip, r0
 8007068:	bf38      	it	cc
 800706a:	2304      	movcc	r3, #4
 800706c:	50ca      	str	r2, [r1, r3]
 800706e:	b10a      	cbz	r2, 8007074 <__lshift+0xa4>
 8007070:	f108 0602 	add.w	r6, r8, #2
 8007074:	3e01      	subs	r6, #1
 8007076:	4638      	mov	r0, r7
 8007078:	612e      	str	r6, [r5, #16]
 800707a:	4621      	mov	r1, r4
 800707c:	f7ff fd8e 	bl	8006b9c <_Bfree>
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007086:	f842 0f04 	str.w	r0, [r2, #4]!
 800708a:	3301      	adds	r3, #1
 800708c:	e7c5      	b.n	800701a <__lshift+0x4a>
 800708e:	3904      	subs	r1, #4
 8007090:	f853 2b04 	ldr.w	r2, [r3], #4
 8007094:	f841 2f04 	str.w	r2, [r1, #4]!
 8007098:	459c      	cmp	ip, r3
 800709a:	d8f9      	bhi.n	8007090 <__lshift+0xc0>
 800709c:	e7ea      	b.n	8007074 <__lshift+0xa4>
 800709e:	bf00      	nop
 80070a0:	08009465 	.word	0x08009465
 80070a4:	08009476 	.word	0x08009476

080070a8 <__mcmp>:
 80070a8:	690a      	ldr	r2, [r1, #16]
 80070aa:	4603      	mov	r3, r0
 80070ac:	6900      	ldr	r0, [r0, #16]
 80070ae:	1a80      	subs	r0, r0, r2
 80070b0:	b530      	push	{r4, r5, lr}
 80070b2:	d10d      	bne.n	80070d0 <__mcmp+0x28>
 80070b4:	3314      	adds	r3, #20
 80070b6:	3114      	adds	r1, #20
 80070b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070c8:	4295      	cmp	r5, r2
 80070ca:	d002      	beq.n	80070d2 <__mcmp+0x2a>
 80070cc:	d304      	bcc.n	80070d8 <__mcmp+0x30>
 80070ce:	2001      	movs	r0, #1
 80070d0:	bd30      	pop	{r4, r5, pc}
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	d3f4      	bcc.n	80070c0 <__mcmp+0x18>
 80070d6:	e7fb      	b.n	80070d0 <__mcmp+0x28>
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070dc:	e7f8      	b.n	80070d0 <__mcmp+0x28>
	...

080070e0 <__mdiff>:
 80070e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	460d      	mov	r5, r1
 80070e6:	4607      	mov	r7, r0
 80070e8:	4611      	mov	r1, r2
 80070ea:	4628      	mov	r0, r5
 80070ec:	4614      	mov	r4, r2
 80070ee:	f7ff ffdb 	bl	80070a8 <__mcmp>
 80070f2:	1e06      	subs	r6, r0, #0
 80070f4:	d111      	bne.n	800711a <__mdiff+0x3a>
 80070f6:	4631      	mov	r1, r6
 80070f8:	4638      	mov	r0, r7
 80070fa:	f7ff fd0f 	bl	8006b1c <_Balloc>
 80070fe:	4602      	mov	r2, r0
 8007100:	b928      	cbnz	r0, 800710e <__mdiff+0x2e>
 8007102:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <__mdiff+0x108>)
 8007104:	f240 2137 	movw	r1, #567	; 0x237
 8007108:	4838      	ldr	r0, [pc, #224]	; (80071ec <__mdiff+0x10c>)
 800710a:	f001 fa8d 	bl	8008628 <__assert_func>
 800710e:	2301      	movs	r3, #1
 8007110:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007114:	4610      	mov	r0, r2
 8007116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711a:	bfa4      	itt	ge
 800711c:	4623      	movge	r3, r4
 800711e:	462c      	movge	r4, r5
 8007120:	4638      	mov	r0, r7
 8007122:	6861      	ldr	r1, [r4, #4]
 8007124:	bfa6      	itte	ge
 8007126:	461d      	movge	r5, r3
 8007128:	2600      	movge	r6, #0
 800712a:	2601      	movlt	r6, #1
 800712c:	f7ff fcf6 	bl	8006b1c <_Balloc>
 8007130:	4602      	mov	r2, r0
 8007132:	b918      	cbnz	r0, 800713c <__mdiff+0x5c>
 8007134:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <__mdiff+0x108>)
 8007136:	f240 2145 	movw	r1, #581	; 0x245
 800713a:	e7e5      	b.n	8007108 <__mdiff+0x28>
 800713c:	6927      	ldr	r7, [r4, #16]
 800713e:	60c6      	str	r6, [r0, #12]
 8007140:	692e      	ldr	r6, [r5, #16]
 8007142:	f104 0014 	add.w	r0, r4, #20
 8007146:	f105 0914 	add.w	r9, r5, #20
 800714a:	f102 0e14 	add.w	lr, r2, #20
 800714e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8007152:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007156:	3410      	adds	r4, #16
 8007158:	46f2      	mov	sl, lr
 800715a:	2100      	movs	r1, #0
 800715c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007160:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007164:	fa11 f88b 	uxtah	r8, r1, fp
 8007168:	b299      	uxth	r1, r3
 800716a:	0c1b      	lsrs	r3, r3, #16
 800716c:	eba8 0801 	sub.w	r8, r8, r1
 8007170:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007174:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007178:	fa1f f888 	uxth.w	r8, r8
 800717c:	1419      	asrs	r1, r3, #16
 800717e:	454e      	cmp	r6, r9
 8007180:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007184:	f84a 3b04 	str.w	r3, [sl], #4
 8007188:	d8e8      	bhi.n	800715c <__mdiff+0x7c>
 800718a:	1b73      	subs	r3, r6, r5
 800718c:	3b15      	subs	r3, #21
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	3304      	adds	r3, #4
 8007194:	3515      	adds	r5, #21
 8007196:	42ae      	cmp	r6, r5
 8007198:	bf38      	it	cc
 800719a:	2304      	movcc	r3, #4
 800719c:	4418      	add	r0, r3
 800719e:	4473      	add	r3, lr
 80071a0:	469e      	mov	lr, r3
 80071a2:	4606      	mov	r6, r0
 80071a4:	4566      	cmp	r6, ip
 80071a6:	d30e      	bcc.n	80071c6 <__mdiff+0xe6>
 80071a8:	f10c 0103 	add.w	r1, ip, #3
 80071ac:	1a09      	subs	r1, r1, r0
 80071ae:	f021 0103 	bic.w	r1, r1, #3
 80071b2:	3803      	subs	r0, #3
 80071b4:	4584      	cmp	ip, r0
 80071b6:	bf38      	it	cc
 80071b8:	2100      	movcc	r1, #0
 80071ba:	440b      	add	r3, r1
 80071bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071c0:	b179      	cbz	r1, 80071e2 <__mdiff+0x102>
 80071c2:	6117      	str	r7, [r2, #16]
 80071c4:	e7a6      	b.n	8007114 <__mdiff+0x34>
 80071c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80071ca:	fa11 f488 	uxtah	r4, r1, r8
 80071ce:	1425      	asrs	r5, r4, #16
 80071d0:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80071d4:	b2a4      	uxth	r4, r4
 80071d6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80071da:	f84e 4b04 	str.w	r4, [lr], #4
 80071de:	1429      	asrs	r1, r5, #16
 80071e0:	e7e0      	b.n	80071a4 <__mdiff+0xc4>
 80071e2:	3f01      	subs	r7, #1
 80071e4:	e7ea      	b.n	80071bc <__mdiff+0xdc>
 80071e6:	bf00      	nop
 80071e8:	08009465 	.word	0x08009465
 80071ec:	08009476 	.word	0x08009476

080071f0 <__ulp>:
 80071f0:	4b0e      	ldr	r3, [pc, #56]	; (800722c <__ulp+0x3c>)
 80071f2:	400b      	ands	r3, r1
 80071f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dc08      	bgt.n	800720e <__ulp+0x1e>
 80071fc:	425b      	negs	r3, r3
 80071fe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007202:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007206:	da04      	bge.n	8007212 <__ulp+0x22>
 8007208:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800720c:	4113      	asrs	r3, r2
 800720e:	2200      	movs	r2, #0
 8007210:	e008      	b.n	8007224 <__ulp+0x34>
 8007212:	f1a2 0314 	sub.w	r3, r2, #20
 8007216:	2b1e      	cmp	r3, #30
 8007218:	bfda      	itte	le
 800721a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800721e:	40da      	lsrle	r2, r3
 8007220:	2201      	movgt	r2, #1
 8007222:	2300      	movs	r3, #0
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	7ff00000 	.word	0x7ff00000

08007230 <__b2d>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	6905      	ldr	r5, [r0, #16]
 8007234:	f100 0714 	add.w	r7, r0, #20
 8007238:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800723c:	1f2e      	subs	r6, r5, #4
 800723e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff fd5c 	bl	8006d00 <__hi0bits>
 8007248:	f1c0 0220 	rsb	r2, r0, #32
 800724c:	280a      	cmp	r0, #10
 800724e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80072bc <__b2d+0x8c>
 8007252:	600a      	str	r2, [r1, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	dc12      	bgt.n	800727e <__b2d+0x4e>
 8007258:	f1c0 0e0b 	rsb	lr, r0, #11
 800725c:	fa24 f20e 	lsr.w	r2, r4, lr
 8007260:	42b7      	cmp	r7, r6
 8007262:	ea42 010c 	orr.w	r1, r2, ip
 8007266:	bf34      	ite	cc
 8007268:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800726c:	2200      	movcs	r2, #0
 800726e:	3315      	adds	r3, #21
 8007270:	fa04 f303 	lsl.w	r3, r4, r3
 8007274:	fa22 f20e 	lsr.w	r2, r2, lr
 8007278:	431a      	orrs	r2, r3
 800727a:	4610      	mov	r0, r2
 800727c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800727e:	42b7      	cmp	r7, r6
 8007280:	bf3a      	itte	cc
 8007282:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007286:	f1a5 0608 	subcc.w	r6, r5, #8
 800728a:	2200      	movcs	r2, #0
 800728c:	3b0b      	subs	r3, #11
 800728e:	d012      	beq.n	80072b6 <__b2d+0x86>
 8007290:	f1c3 0520 	rsb	r5, r3, #32
 8007294:	fa22 f105 	lsr.w	r1, r2, r5
 8007298:	409c      	lsls	r4, r3
 800729a:	430c      	orrs	r4, r1
 800729c:	42be      	cmp	r6, r7
 800729e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80072a2:	bf8c      	ite	hi
 80072a4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80072a8:	2400      	movls	r4, #0
 80072aa:	409a      	lsls	r2, r3
 80072ac:	40ec      	lsrs	r4, r5
 80072ae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80072b2:	4322      	orrs	r2, r4
 80072b4:	e7e1      	b.n	800727a <__b2d+0x4a>
 80072b6:	ea44 010c 	orr.w	r1, r4, ip
 80072ba:	e7de      	b.n	800727a <__b2d+0x4a>
 80072bc:	3ff00000 	.word	0x3ff00000

080072c0 <__d2b>:
 80072c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072c2:	2101      	movs	r1, #1
 80072c4:	9e08      	ldr	r6, [sp, #32]
 80072c6:	4617      	mov	r7, r2
 80072c8:	461c      	mov	r4, r3
 80072ca:	f7ff fc27 	bl	8006b1c <_Balloc>
 80072ce:	4605      	mov	r5, r0
 80072d0:	b930      	cbnz	r0, 80072e0 <__d2b+0x20>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b23      	ldr	r3, [pc, #140]	; (8007364 <__d2b+0xa4>)
 80072d6:	4824      	ldr	r0, [pc, #144]	; (8007368 <__d2b+0xa8>)
 80072d8:	f240 310f 	movw	r1, #783	; 0x30f
 80072dc:	f001 f9a4 	bl	8008628 <__assert_func>
 80072e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80072e4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80072e8:	bb24      	cbnz	r4, 8007334 <__d2b+0x74>
 80072ea:	2f00      	cmp	r7, #0
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	d026      	beq.n	800733e <__d2b+0x7e>
 80072f0:	4668      	mov	r0, sp
 80072f2:	9700      	str	r7, [sp, #0]
 80072f4:	f7ff fd24 	bl	8006d40 <__lo0bits>
 80072f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072fc:	b1e8      	cbz	r0, 800733a <__d2b+0x7a>
 80072fe:	f1c0 0320 	rsb	r3, r0, #32
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	430b      	orrs	r3, r1
 8007308:	40c2      	lsrs	r2, r0
 800730a:	616b      	str	r3, [r5, #20]
 800730c:	9201      	str	r2, [sp, #4]
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	61ab      	str	r3, [r5, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bf14      	ite	ne
 8007316:	2102      	movne	r1, #2
 8007318:	2101      	moveq	r1, #1
 800731a:	6129      	str	r1, [r5, #16]
 800731c:	b1bc      	cbz	r4, 800734e <__d2b+0x8e>
 800731e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007322:	4404      	add	r4, r0
 8007324:	6034      	str	r4, [r6, #0]
 8007326:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800732a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732c:	6018      	str	r0, [r3, #0]
 800732e:	4628      	mov	r0, r5
 8007330:	b003      	add	sp, #12
 8007332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007338:	e7d7      	b.n	80072ea <__d2b+0x2a>
 800733a:	6169      	str	r1, [r5, #20]
 800733c:	e7e7      	b.n	800730e <__d2b+0x4e>
 800733e:	a801      	add	r0, sp, #4
 8007340:	f7ff fcfe 	bl	8006d40 <__lo0bits>
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	616b      	str	r3, [r5, #20]
 8007348:	3020      	adds	r0, #32
 800734a:	2101      	movs	r1, #1
 800734c:	e7e5      	b.n	800731a <__d2b+0x5a>
 800734e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007352:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007356:	6030      	str	r0, [r6, #0]
 8007358:	6918      	ldr	r0, [r3, #16]
 800735a:	f7ff fcd1 	bl	8006d00 <__hi0bits>
 800735e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007362:	e7e2      	b.n	800732a <__d2b+0x6a>
 8007364:	08009465 	.word	0x08009465
 8007368:	08009476 	.word	0x08009476

0800736c <__ratio>:
 800736c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	4688      	mov	r8, r1
 8007372:	4669      	mov	r1, sp
 8007374:	4681      	mov	r9, r0
 8007376:	f7ff ff5b 	bl	8007230 <__b2d>
 800737a:	460f      	mov	r7, r1
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	4640      	mov	r0, r8
 8007382:	a901      	add	r1, sp, #4
 8007384:	f7ff ff54 	bl	8007230 <__b2d>
 8007388:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800738c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007390:	eba3 0c02 	sub.w	ip, r3, r2
 8007394:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfd5      	itete	le
 80073a2:	460a      	movle	r2, r1
 80073a4:	462a      	movgt	r2, r5
 80073a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80073ae:	468b      	mov	fp, r1
 80073b0:	bfd8      	it	le
 80073b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80073b6:	465b      	mov	r3, fp
 80073b8:	4602      	mov	r2, r0
 80073ba:	4639      	mov	r1, r7
 80073bc:	4620      	mov	r0, r4
 80073be:	f7f9 fa4d 	bl	800085c <__aeabi_ddiv>
 80073c2:	b003      	add	sp, #12
 80073c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073c8 <__copybits>:
 80073c8:	3901      	subs	r1, #1
 80073ca:	b570      	push	{r4, r5, r6, lr}
 80073cc:	1149      	asrs	r1, r1, #5
 80073ce:	6914      	ldr	r4, [r2, #16]
 80073d0:	3101      	adds	r1, #1
 80073d2:	f102 0314 	add.w	r3, r2, #20
 80073d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073de:	1f05      	subs	r5, r0, #4
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	d30c      	bcc.n	80073fe <__copybits+0x36>
 80073e4:	1aa3      	subs	r3, r4, r2
 80073e6:	3b11      	subs	r3, #17
 80073e8:	f023 0303 	bic.w	r3, r3, #3
 80073ec:	3211      	adds	r2, #17
 80073ee:	42a2      	cmp	r2, r4
 80073f0:	bf88      	it	hi
 80073f2:	2300      	movhi	r3, #0
 80073f4:	4418      	add	r0, r3
 80073f6:	2300      	movs	r3, #0
 80073f8:	4288      	cmp	r0, r1
 80073fa:	d305      	bcc.n	8007408 <__copybits+0x40>
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8007402:	f845 6f04 	str.w	r6, [r5, #4]!
 8007406:	e7eb      	b.n	80073e0 <__copybits+0x18>
 8007408:	f840 3b04 	str.w	r3, [r0], #4
 800740c:	e7f4      	b.n	80073f8 <__copybits+0x30>

0800740e <__any_on>:
 800740e:	f100 0214 	add.w	r2, r0, #20
 8007412:	6900      	ldr	r0, [r0, #16]
 8007414:	114b      	asrs	r3, r1, #5
 8007416:	4298      	cmp	r0, r3
 8007418:	b510      	push	{r4, lr}
 800741a:	db11      	blt.n	8007440 <__any_on+0x32>
 800741c:	dd0a      	ble.n	8007434 <__any_on+0x26>
 800741e:	f011 011f 	ands.w	r1, r1, #31
 8007422:	d007      	beq.n	8007434 <__any_on+0x26>
 8007424:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007428:	fa24 f001 	lsr.w	r0, r4, r1
 800742c:	fa00 f101 	lsl.w	r1, r0, r1
 8007430:	428c      	cmp	r4, r1
 8007432:	d10b      	bne.n	800744c <__any_on+0x3e>
 8007434:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007438:	4293      	cmp	r3, r2
 800743a:	d803      	bhi.n	8007444 <__any_on+0x36>
 800743c:	2000      	movs	r0, #0
 800743e:	bd10      	pop	{r4, pc}
 8007440:	4603      	mov	r3, r0
 8007442:	e7f7      	b.n	8007434 <__any_on+0x26>
 8007444:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007448:	2900      	cmp	r1, #0
 800744a:	d0f5      	beq.n	8007438 <__any_on+0x2a>
 800744c:	2001      	movs	r0, #1
 800744e:	e7f6      	b.n	800743e <__any_on+0x30>

08007450 <sulp>:
 8007450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007454:	460f      	mov	r7, r1
 8007456:	4690      	mov	r8, r2
 8007458:	f7ff feca 	bl	80071f0 <__ulp>
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	f1b8 0f00 	cmp.w	r8, #0
 8007464:	d011      	beq.n	800748a <sulp+0x3a>
 8007466:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800746a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800746e:	2b00      	cmp	r3, #0
 8007470:	dd0b      	ble.n	800748a <sulp+0x3a>
 8007472:	051b      	lsls	r3, r3, #20
 8007474:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007478:	2400      	movs	r4, #0
 800747a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800747e:	4622      	mov	r2, r4
 8007480:	462b      	mov	r3, r5
 8007482:	f7f9 f8c1 	bl	8000608 <__aeabi_dmul>
 8007486:	4604      	mov	r4, r0
 8007488:	460d      	mov	r5, r1
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007492:	0000      	movs	r0, r0
 8007494:	0000      	movs	r0, r0
	...

08007498 <_strtod_l>:
 8007498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	b09f      	sub	sp, #124	; 0x7c
 800749e:	4604      	mov	r4, r0
 80074a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80074a2:	2200      	movs	r2, #0
 80074a4:	921a      	str	r2, [sp, #104]	; 0x68
 80074a6:	460d      	mov	r5, r1
 80074a8:	f04f 0800 	mov.w	r8, #0
 80074ac:	f04f 0900 	mov.w	r9, #0
 80074b0:	460a      	mov	r2, r1
 80074b2:	9219      	str	r2, [sp, #100]	; 0x64
 80074b4:	7811      	ldrb	r1, [r2, #0]
 80074b6:	292b      	cmp	r1, #43	; 0x2b
 80074b8:	d04a      	beq.n	8007550 <_strtod_l+0xb8>
 80074ba:	d838      	bhi.n	800752e <_strtod_l+0x96>
 80074bc:	290d      	cmp	r1, #13
 80074be:	d832      	bhi.n	8007526 <_strtod_l+0x8e>
 80074c0:	2908      	cmp	r1, #8
 80074c2:	d832      	bhi.n	800752a <_strtod_l+0x92>
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d03b      	beq.n	8007540 <_strtod_l+0xa8>
 80074c8:	2200      	movs	r2, #0
 80074ca:	920e      	str	r2, [sp, #56]	; 0x38
 80074cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80074ce:	7832      	ldrb	r2, [r6, #0]
 80074d0:	2a30      	cmp	r2, #48	; 0x30
 80074d2:	f040 80b2 	bne.w	800763a <_strtod_l+0x1a2>
 80074d6:	7872      	ldrb	r2, [r6, #1]
 80074d8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80074dc:	2a58      	cmp	r2, #88	; 0x58
 80074de:	d16e      	bne.n	80075be <_strtod_l+0x126>
 80074e0:	9302      	str	r3, [sp, #8]
 80074e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	ab1a      	add	r3, sp, #104	; 0x68
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	4a8d      	ldr	r2, [pc, #564]	; (8007720 <_strtod_l+0x288>)
 80074ec:	ab1b      	add	r3, sp, #108	; 0x6c
 80074ee:	a919      	add	r1, sp, #100	; 0x64
 80074f0:	4620      	mov	r0, r4
 80074f2:	f001 f933 	bl	800875c <__gethex>
 80074f6:	f010 070f 	ands.w	r7, r0, #15
 80074fa:	4605      	mov	r5, r0
 80074fc:	d005      	beq.n	800750a <_strtod_l+0x72>
 80074fe:	2f06      	cmp	r7, #6
 8007500:	d128      	bne.n	8007554 <_strtod_l+0xbc>
 8007502:	3601      	adds	r6, #1
 8007504:	2300      	movs	r3, #0
 8007506:	9619      	str	r6, [sp, #100]	; 0x64
 8007508:	930e      	str	r3, [sp, #56]	; 0x38
 800750a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 859c 	bne.w	800804a <_strtod_l+0xbb2>
 8007512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007514:	b1cb      	cbz	r3, 800754a <_strtod_l+0xb2>
 8007516:	4642      	mov	r2, r8
 8007518:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800751c:	4610      	mov	r0, r2
 800751e:	4619      	mov	r1, r3
 8007520:	b01f      	add	sp, #124	; 0x7c
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	2920      	cmp	r1, #32
 8007528:	d1ce      	bne.n	80074c8 <_strtod_l+0x30>
 800752a:	3201      	adds	r2, #1
 800752c:	e7c1      	b.n	80074b2 <_strtod_l+0x1a>
 800752e:	292d      	cmp	r1, #45	; 0x2d
 8007530:	d1ca      	bne.n	80074c8 <_strtod_l+0x30>
 8007532:	2101      	movs	r1, #1
 8007534:	910e      	str	r1, [sp, #56]	; 0x38
 8007536:	1c51      	adds	r1, r2, #1
 8007538:	9119      	str	r1, [sp, #100]	; 0x64
 800753a:	7852      	ldrb	r2, [r2, #1]
 800753c:	2a00      	cmp	r2, #0
 800753e:	d1c5      	bne.n	80074cc <_strtod_l+0x34>
 8007540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007542:	9519      	str	r5, [sp, #100]	; 0x64
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 857e 	bne.w	8008046 <_strtod_l+0xbae>
 800754a:	4642      	mov	r2, r8
 800754c:	464b      	mov	r3, r9
 800754e:	e7e5      	b.n	800751c <_strtod_l+0x84>
 8007550:	2100      	movs	r1, #0
 8007552:	e7ef      	b.n	8007534 <_strtod_l+0x9c>
 8007554:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007556:	b13a      	cbz	r2, 8007568 <_strtod_l+0xd0>
 8007558:	2135      	movs	r1, #53	; 0x35
 800755a:	a81c      	add	r0, sp, #112	; 0x70
 800755c:	f7ff ff34 	bl	80073c8 <__copybits>
 8007560:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007562:	4620      	mov	r0, r4
 8007564:	f7ff fb1a 	bl	8006b9c <_Bfree>
 8007568:	3f01      	subs	r7, #1
 800756a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800756c:	2f04      	cmp	r7, #4
 800756e:	d806      	bhi.n	800757e <_strtod_l+0xe6>
 8007570:	e8df f007 	tbb	[pc, r7]
 8007574:	201d0314 	.word	0x201d0314
 8007578:	14          	.byte	0x14
 8007579:	00          	.byte	0x00
 800757a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800757e:	05e9      	lsls	r1, r5, #23
 8007580:	bf48      	it	mi
 8007582:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007586:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800758a:	0d1b      	lsrs	r3, r3, #20
 800758c:	051b      	lsls	r3, r3, #20
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1bb      	bne.n	800750a <_strtod_l+0x72>
 8007592:	f7fe fb2f 	bl	8005bf4 <__errno>
 8007596:	2322      	movs	r3, #34	; 0x22
 8007598:	6003      	str	r3, [r0, #0]
 800759a:	e7b6      	b.n	800750a <_strtod_l+0x72>
 800759c:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80075a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80075ac:	e7e7      	b.n	800757e <_strtod_l+0xe6>
 80075ae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007724 <_strtod_l+0x28c>
 80075b2:	e7e4      	b.n	800757e <_strtod_l+0xe6>
 80075b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80075b8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80075bc:	e7df      	b.n	800757e <_strtod_l+0xe6>
 80075be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	9219      	str	r2, [sp, #100]	; 0x64
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b30      	cmp	r3, #48	; 0x30
 80075c8:	d0f9      	beq.n	80075be <_strtod_l+0x126>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d09d      	beq.n	800750a <_strtod_l+0x72>
 80075ce:	2301      	movs	r3, #1
 80075d0:	f04f 0a00 	mov.w	sl, #0
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075da:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80075de:	46d3      	mov	fp, sl
 80075e0:	220a      	movs	r2, #10
 80075e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80075e4:	7806      	ldrb	r6, [r0, #0]
 80075e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075ea:	b2d9      	uxtb	r1, r3
 80075ec:	2909      	cmp	r1, #9
 80075ee:	d926      	bls.n	800763e <_strtod_l+0x1a6>
 80075f0:	494d      	ldr	r1, [pc, #308]	; (8007728 <_strtod_l+0x290>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	f000 ffe2 	bl	80085bc <strncmp>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d030      	beq.n	800765e <_strtod_l+0x1c6>
 80075fc:	2000      	movs	r0, #0
 80075fe:	4632      	mov	r2, r6
 8007600:	9008      	str	r0, [sp, #32]
 8007602:	465e      	mov	r6, fp
 8007604:	4603      	mov	r3, r0
 8007606:	2a65      	cmp	r2, #101	; 0x65
 8007608:	d001      	beq.n	800760e <_strtod_l+0x176>
 800760a:	2a45      	cmp	r2, #69	; 0x45
 800760c:	d113      	bne.n	8007636 <_strtod_l+0x19e>
 800760e:	b91e      	cbnz	r6, 8007618 <_strtod_l+0x180>
 8007610:	9a05      	ldr	r2, [sp, #20]
 8007612:	4302      	orrs	r2, r0
 8007614:	d094      	beq.n	8007540 <_strtod_l+0xa8>
 8007616:	2600      	movs	r6, #0
 8007618:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800761a:	1c6a      	adds	r2, r5, #1
 800761c:	9219      	str	r2, [sp, #100]	; 0x64
 800761e:	786a      	ldrb	r2, [r5, #1]
 8007620:	2a2b      	cmp	r2, #43	; 0x2b
 8007622:	d074      	beq.n	800770e <_strtod_l+0x276>
 8007624:	2a2d      	cmp	r2, #45	; 0x2d
 8007626:	d078      	beq.n	800771a <_strtod_l+0x282>
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007630:	2909      	cmp	r1, #9
 8007632:	d97f      	bls.n	8007734 <_strtod_l+0x29c>
 8007634:	9519      	str	r5, [sp, #100]	; 0x64
 8007636:	2700      	movs	r7, #0
 8007638:	e09e      	b.n	8007778 <_strtod_l+0x2e0>
 800763a:	2300      	movs	r3, #0
 800763c:	e7c8      	b.n	80075d0 <_strtod_l+0x138>
 800763e:	f1bb 0f08 	cmp.w	fp, #8
 8007642:	bfd8      	it	le
 8007644:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007646:	f100 0001 	add.w	r0, r0, #1
 800764a:	bfda      	itte	le
 800764c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007650:	930a      	strle	r3, [sp, #40]	; 0x28
 8007652:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007656:	f10b 0b01 	add.w	fp, fp, #1
 800765a:	9019      	str	r0, [sp, #100]	; 0x64
 800765c:	e7c1      	b.n	80075e2 <_strtod_l+0x14a>
 800765e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	9219      	str	r2, [sp, #100]	; 0x64
 8007664:	785a      	ldrb	r2, [r3, #1]
 8007666:	f1bb 0f00 	cmp.w	fp, #0
 800766a:	d037      	beq.n	80076dc <_strtod_l+0x244>
 800766c:	9008      	str	r0, [sp, #32]
 800766e:	465e      	mov	r6, fp
 8007670:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007674:	2b09      	cmp	r3, #9
 8007676:	d912      	bls.n	800769e <_strtod_l+0x206>
 8007678:	2301      	movs	r3, #1
 800767a:	e7c4      	b.n	8007606 <_strtod_l+0x16e>
 800767c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	9219      	str	r2, [sp, #100]	; 0x64
 8007682:	785a      	ldrb	r2, [r3, #1]
 8007684:	3001      	adds	r0, #1
 8007686:	2a30      	cmp	r2, #48	; 0x30
 8007688:	d0f8      	beq.n	800767c <_strtod_l+0x1e4>
 800768a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800768e:	2b08      	cmp	r3, #8
 8007690:	f200 84e0 	bhi.w	8008054 <_strtod_l+0xbbc>
 8007694:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007696:	9008      	str	r0, [sp, #32]
 8007698:	2000      	movs	r0, #0
 800769a:	930b      	str	r3, [sp, #44]	; 0x2c
 800769c:	4606      	mov	r6, r0
 800769e:	3a30      	subs	r2, #48	; 0x30
 80076a0:	f100 0301 	add.w	r3, r0, #1
 80076a4:	d014      	beq.n	80076d0 <_strtod_l+0x238>
 80076a6:	9908      	ldr	r1, [sp, #32]
 80076a8:	4419      	add	r1, r3
 80076aa:	9108      	str	r1, [sp, #32]
 80076ac:	4633      	mov	r3, r6
 80076ae:	eb00 0c06 	add.w	ip, r0, r6
 80076b2:	210a      	movs	r1, #10
 80076b4:	4563      	cmp	r3, ip
 80076b6:	d113      	bne.n	80076e0 <_strtod_l+0x248>
 80076b8:	1833      	adds	r3, r6, r0
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	f106 0601 	add.w	r6, r6, #1
 80076c0:	4406      	add	r6, r0
 80076c2:	dc1a      	bgt.n	80076fa <_strtod_l+0x262>
 80076c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076c6:	230a      	movs	r3, #10
 80076c8:	fb03 2301 	mla	r3, r3, r1, r2
 80076cc:	930a      	str	r3, [sp, #40]	; 0x28
 80076ce:	2300      	movs	r3, #0
 80076d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076d2:	1c51      	adds	r1, r2, #1
 80076d4:	9119      	str	r1, [sp, #100]	; 0x64
 80076d6:	7852      	ldrb	r2, [r2, #1]
 80076d8:	4618      	mov	r0, r3
 80076da:	e7c9      	b.n	8007670 <_strtod_l+0x1d8>
 80076dc:	4658      	mov	r0, fp
 80076de:	e7d2      	b.n	8007686 <_strtod_l+0x1ee>
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	f103 0301 	add.w	r3, r3, #1
 80076e6:	dc03      	bgt.n	80076f0 <_strtod_l+0x258>
 80076e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80076ea:	434f      	muls	r7, r1
 80076ec:	970a      	str	r7, [sp, #40]	; 0x28
 80076ee:	e7e1      	b.n	80076b4 <_strtod_l+0x21c>
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	bfd8      	it	le
 80076f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80076f8:	e7dc      	b.n	80076b4 <_strtod_l+0x21c>
 80076fa:	2e10      	cmp	r6, #16
 80076fc:	bfdc      	itt	le
 80076fe:	230a      	movle	r3, #10
 8007700:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007704:	e7e3      	b.n	80076ce <_strtod_l+0x236>
 8007706:	2300      	movs	r3, #0
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	2301      	movs	r3, #1
 800770c:	e780      	b.n	8007610 <_strtod_l+0x178>
 800770e:	f04f 0c00 	mov.w	ip, #0
 8007712:	1caa      	adds	r2, r5, #2
 8007714:	9219      	str	r2, [sp, #100]	; 0x64
 8007716:	78aa      	ldrb	r2, [r5, #2]
 8007718:	e788      	b.n	800762c <_strtod_l+0x194>
 800771a:	f04f 0c01 	mov.w	ip, #1
 800771e:	e7f8      	b.n	8007712 <_strtod_l+0x27a>
 8007720:	080095d0 	.word	0x080095d0
 8007724:	7ff00000 	.word	0x7ff00000
 8007728:	080095cc 	.word	0x080095cc
 800772c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800772e:	1c51      	adds	r1, r2, #1
 8007730:	9119      	str	r1, [sp, #100]	; 0x64
 8007732:	7852      	ldrb	r2, [r2, #1]
 8007734:	2a30      	cmp	r2, #48	; 0x30
 8007736:	d0f9      	beq.n	800772c <_strtod_l+0x294>
 8007738:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800773c:	2908      	cmp	r1, #8
 800773e:	f63f af7a 	bhi.w	8007636 <_strtod_l+0x19e>
 8007742:	3a30      	subs	r2, #48	; 0x30
 8007744:	9209      	str	r2, [sp, #36]	; 0x24
 8007746:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007748:	920c      	str	r2, [sp, #48]	; 0x30
 800774a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800774c:	1c57      	adds	r7, r2, #1
 800774e:	9719      	str	r7, [sp, #100]	; 0x64
 8007750:	7852      	ldrb	r2, [r2, #1]
 8007752:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007756:	f1be 0f09 	cmp.w	lr, #9
 800775a:	d938      	bls.n	80077ce <_strtod_l+0x336>
 800775c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800775e:	1a7f      	subs	r7, r7, r1
 8007760:	2f08      	cmp	r7, #8
 8007762:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007766:	dc03      	bgt.n	8007770 <_strtod_l+0x2d8>
 8007768:	9909      	ldr	r1, [sp, #36]	; 0x24
 800776a:	428f      	cmp	r7, r1
 800776c:	bfa8      	it	ge
 800776e:	460f      	movge	r7, r1
 8007770:	f1bc 0f00 	cmp.w	ip, #0
 8007774:	d000      	beq.n	8007778 <_strtod_l+0x2e0>
 8007776:	427f      	negs	r7, r7
 8007778:	2e00      	cmp	r6, #0
 800777a:	d14f      	bne.n	800781c <_strtod_l+0x384>
 800777c:	9905      	ldr	r1, [sp, #20]
 800777e:	4301      	orrs	r1, r0
 8007780:	f47f aec3 	bne.w	800750a <_strtod_l+0x72>
 8007784:	2b00      	cmp	r3, #0
 8007786:	f47f aedb 	bne.w	8007540 <_strtod_l+0xa8>
 800778a:	2a69      	cmp	r2, #105	; 0x69
 800778c:	d029      	beq.n	80077e2 <_strtod_l+0x34a>
 800778e:	dc26      	bgt.n	80077de <_strtod_l+0x346>
 8007790:	2a49      	cmp	r2, #73	; 0x49
 8007792:	d026      	beq.n	80077e2 <_strtod_l+0x34a>
 8007794:	2a4e      	cmp	r2, #78	; 0x4e
 8007796:	f47f aed3 	bne.w	8007540 <_strtod_l+0xa8>
 800779a:	499a      	ldr	r1, [pc, #616]	; (8007a04 <_strtod_l+0x56c>)
 800779c:	a819      	add	r0, sp, #100	; 0x64
 800779e:	f001 fa1f 	bl	8008be0 <__match>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f43f aecc 	beq.w	8007540 <_strtod_l+0xa8>
 80077a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b28      	cmp	r3, #40	; 0x28
 80077ae:	d12f      	bne.n	8007810 <_strtod_l+0x378>
 80077b0:	4995      	ldr	r1, [pc, #596]	; (8007a08 <_strtod_l+0x570>)
 80077b2:	aa1c      	add	r2, sp, #112	; 0x70
 80077b4:	a819      	add	r0, sp, #100	; 0x64
 80077b6:	f001 fa27 	bl	8008c08 <__hexnan>
 80077ba:	2805      	cmp	r0, #5
 80077bc:	d128      	bne.n	8007810 <_strtod_l+0x378>
 80077be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077c0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80077c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80077c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80077cc:	e69d      	b.n	800750a <_strtod_l+0x72>
 80077ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077d0:	210a      	movs	r1, #10
 80077d2:	fb01 2107 	mla	r1, r1, r7, r2
 80077d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80077da:	9209      	str	r2, [sp, #36]	; 0x24
 80077dc:	e7b5      	b.n	800774a <_strtod_l+0x2b2>
 80077de:	2a6e      	cmp	r2, #110	; 0x6e
 80077e0:	e7d9      	b.n	8007796 <_strtod_l+0x2fe>
 80077e2:	498a      	ldr	r1, [pc, #552]	; (8007a0c <_strtod_l+0x574>)
 80077e4:	a819      	add	r0, sp, #100	; 0x64
 80077e6:	f001 f9fb 	bl	8008be0 <__match>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f43f aea8 	beq.w	8007540 <_strtod_l+0xa8>
 80077f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077f2:	4987      	ldr	r1, [pc, #540]	; (8007a10 <_strtod_l+0x578>)
 80077f4:	3b01      	subs	r3, #1
 80077f6:	a819      	add	r0, sp, #100	; 0x64
 80077f8:	9319      	str	r3, [sp, #100]	; 0x64
 80077fa:	f001 f9f1 	bl	8008be0 <__match>
 80077fe:	b910      	cbnz	r0, 8007806 <_strtod_l+0x36e>
 8007800:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007802:	3301      	adds	r3, #1
 8007804:	9319      	str	r3, [sp, #100]	; 0x64
 8007806:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8007a14 <_strtod_l+0x57c>
 800780a:	f04f 0800 	mov.w	r8, #0
 800780e:	e67c      	b.n	800750a <_strtod_l+0x72>
 8007810:	4881      	ldr	r0, [pc, #516]	; (8007a18 <_strtod_l+0x580>)
 8007812:	f000 ff03 	bl	800861c <nan>
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	e676      	b.n	800750a <_strtod_l+0x72>
 800781c:	9b08      	ldr	r3, [sp, #32]
 800781e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007820:	1afb      	subs	r3, r7, r3
 8007822:	f1bb 0f00 	cmp.w	fp, #0
 8007826:	bf08      	it	eq
 8007828:	46b3      	moveq	fp, r6
 800782a:	2e10      	cmp	r6, #16
 800782c:	9309      	str	r3, [sp, #36]	; 0x24
 800782e:	4635      	mov	r5, r6
 8007830:	bfa8      	it	ge
 8007832:	2510      	movge	r5, #16
 8007834:	f7f8 fe6e 	bl	8000514 <__aeabi_ui2d>
 8007838:	2e09      	cmp	r6, #9
 800783a:	4680      	mov	r8, r0
 800783c:	4689      	mov	r9, r1
 800783e:	dd13      	ble.n	8007868 <_strtod_l+0x3d0>
 8007840:	4b76      	ldr	r3, [pc, #472]	; (8007a1c <_strtod_l+0x584>)
 8007842:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007846:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800784a:	f7f8 fedd 	bl	8000608 <__aeabi_dmul>
 800784e:	4680      	mov	r8, r0
 8007850:	4650      	mov	r0, sl
 8007852:	4689      	mov	r9, r1
 8007854:	f7f8 fe5e 	bl	8000514 <__aeabi_ui2d>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4640      	mov	r0, r8
 800785e:	4649      	mov	r1, r9
 8007860:	f7f8 fd1c 	bl	800029c <__adddf3>
 8007864:	4680      	mov	r8, r0
 8007866:	4689      	mov	r9, r1
 8007868:	2e0f      	cmp	r6, #15
 800786a:	dc36      	bgt.n	80078da <_strtod_l+0x442>
 800786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786e:	2b00      	cmp	r3, #0
 8007870:	f43f ae4b 	beq.w	800750a <_strtod_l+0x72>
 8007874:	dd22      	ble.n	80078bc <_strtod_l+0x424>
 8007876:	2b16      	cmp	r3, #22
 8007878:	dc09      	bgt.n	800788e <_strtod_l+0x3f6>
 800787a:	4968      	ldr	r1, [pc, #416]	; (8007a1c <_strtod_l+0x584>)
 800787c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	f7f8 febe 	bl	8000608 <__aeabi_dmul>
 800788c:	e7c3      	b.n	8007816 <_strtod_l+0x37e>
 800788e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007890:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007894:	4293      	cmp	r3, r2
 8007896:	db20      	blt.n	80078da <_strtod_l+0x442>
 8007898:	4c60      	ldr	r4, [pc, #384]	; (8007a1c <_strtod_l+0x584>)
 800789a:	f1c6 060f 	rsb	r6, r6, #15
 800789e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80078a2:	4642      	mov	r2, r8
 80078a4:	464b      	mov	r3, r9
 80078a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078aa:	f7f8 fead 	bl	8000608 <__aeabi_dmul>
 80078ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b0:	1b9e      	subs	r6, r3, r6
 80078b2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80078b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078ba:	e7e5      	b.n	8007888 <_strtod_l+0x3f0>
 80078bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078be:	3316      	adds	r3, #22
 80078c0:	db0b      	blt.n	80078da <_strtod_l+0x442>
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	1bdf      	subs	r7, r3, r7
 80078c6:	4b55      	ldr	r3, [pc, #340]	; (8007a1c <_strtod_l+0x584>)
 80078c8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80078cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 ffc2 	bl	800085c <__aeabi_ddiv>
 80078d8:	e79d      	b.n	8007816 <_strtod_l+0x37e>
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	1b75      	subs	r5, r6, r5
 80078de:	441d      	add	r5, r3
 80078e0:	2d00      	cmp	r5, #0
 80078e2:	dd70      	ble.n	80079c6 <_strtod_l+0x52e>
 80078e4:	f015 030f 	ands.w	r3, r5, #15
 80078e8:	d00a      	beq.n	8007900 <_strtod_l+0x468>
 80078ea:	494c      	ldr	r1, [pc, #304]	; (8007a1c <_strtod_l+0x584>)
 80078ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f8:	f7f8 fe86 	bl	8000608 <__aeabi_dmul>
 80078fc:	4680      	mov	r8, r0
 80078fe:	4689      	mov	r9, r1
 8007900:	f035 050f 	bics.w	r5, r5, #15
 8007904:	d04d      	beq.n	80079a2 <_strtod_l+0x50a>
 8007906:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800790a:	dd22      	ble.n	8007952 <_strtod_l+0x4ba>
 800790c:	2600      	movs	r6, #0
 800790e:	46b3      	mov	fp, r6
 8007910:	960b      	str	r6, [sp, #44]	; 0x2c
 8007912:	9608      	str	r6, [sp, #32]
 8007914:	2322      	movs	r3, #34	; 0x22
 8007916:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8007a14 <_strtod_l+0x57c>
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	f04f 0800 	mov.w	r8, #0
 8007920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007922:	2b00      	cmp	r3, #0
 8007924:	f43f adf1 	beq.w	800750a <_strtod_l+0x72>
 8007928:	991a      	ldr	r1, [sp, #104]	; 0x68
 800792a:	4620      	mov	r0, r4
 800792c:	f7ff f936 	bl	8006b9c <_Bfree>
 8007930:	9908      	ldr	r1, [sp, #32]
 8007932:	4620      	mov	r0, r4
 8007934:	f7ff f932 	bl	8006b9c <_Bfree>
 8007938:	4659      	mov	r1, fp
 800793a:	4620      	mov	r0, r4
 800793c:	f7ff f92e 	bl	8006b9c <_Bfree>
 8007940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007942:	4620      	mov	r0, r4
 8007944:	f7ff f92a 	bl	8006b9c <_Bfree>
 8007948:	4631      	mov	r1, r6
 800794a:	4620      	mov	r0, r4
 800794c:	f7ff f926 	bl	8006b9c <_Bfree>
 8007950:	e5db      	b.n	800750a <_strtod_l+0x72>
 8007952:	4b33      	ldr	r3, [pc, #204]	; (8007a20 <_strtod_l+0x588>)
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	2300      	movs	r3, #0
 8007958:	112d      	asrs	r5, r5, #4
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	469a      	mov	sl, r3
 8007960:	2d01      	cmp	r5, #1
 8007962:	dc21      	bgt.n	80079a8 <_strtod_l+0x510>
 8007964:	b10b      	cbz	r3, 800796a <_strtod_l+0x4d2>
 8007966:	4680      	mov	r8, r0
 8007968:	4689      	mov	r9, r1
 800796a:	492d      	ldr	r1, [pc, #180]	; (8007a20 <_strtod_l+0x588>)
 800796c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007970:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007974:	4642      	mov	r2, r8
 8007976:	464b      	mov	r3, r9
 8007978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800797c:	f7f8 fe44 	bl	8000608 <__aeabi_dmul>
 8007980:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <_strtod_l+0x57c>)
 8007982:	460a      	mov	r2, r1
 8007984:	400b      	ands	r3, r1
 8007986:	4927      	ldr	r1, [pc, #156]	; (8007a24 <_strtod_l+0x58c>)
 8007988:	428b      	cmp	r3, r1
 800798a:	4680      	mov	r8, r0
 800798c:	d8be      	bhi.n	800790c <_strtod_l+0x474>
 800798e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007992:	428b      	cmp	r3, r1
 8007994:	bf86      	itte	hi
 8007996:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007a28 <_strtod_l+0x590>
 800799a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800799e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80079a2:	2300      	movs	r3, #0
 80079a4:	9305      	str	r3, [sp, #20]
 80079a6:	e07b      	b.n	8007aa0 <_strtod_l+0x608>
 80079a8:	07ea      	lsls	r2, r5, #31
 80079aa:	d505      	bpl.n	80079b8 <_strtod_l+0x520>
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	f7f8 fe29 	bl	8000608 <__aeabi_dmul>
 80079b6:	2301      	movs	r3, #1
 80079b8:	9a05      	ldr	r2, [sp, #20]
 80079ba:	3208      	adds	r2, #8
 80079bc:	f10a 0a01 	add.w	sl, sl, #1
 80079c0:	106d      	asrs	r5, r5, #1
 80079c2:	9205      	str	r2, [sp, #20]
 80079c4:	e7cc      	b.n	8007960 <_strtod_l+0x4c8>
 80079c6:	d0ec      	beq.n	80079a2 <_strtod_l+0x50a>
 80079c8:	426d      	negs	r5, r5
 80079ca:	f015 020f 	ands.w	r2, r5, #15
 80079ce:	d00a      	beq.n	80079e6 <_strtod_l+0x54e>
 80079d0:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <_strtod_l+0x584>)
 80079d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d6:	4640      	mov	r0, r8
 80079d8:	4649      	mov	r1, r9
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 ff3d 	bl	800085c <__aeabi_ddiv>
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	112d      	asrs	r5, r5, #4
 80079e8:	d0db      	beq.n	80079a2 <_strtod_l+0x50a>
 80079ea:	2d1f      	cmp	r5, #31
 80079ec:	dd1e      	ble.n	8007a2c <_strtod_l+0x594>
 80079ee:	2600      	movs	r6, #0
 80079f0:	46b3      	mov	fp, r6
 80079f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80079f4:	9608      	str	r6, [sp, #32]
 80079f6:	2322      	movs	r3, #34	; 0x22
 80079f8:	f04f 0800 	mov.w	r8, #0
 80079fc:	f04f 0900 	mov.w	r9, #0
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	e78d      	b.n	8007920 <_strtod_l+0x488>
 8007a04:	080093bd 	.word	0x080093bd
 8007a08:	080095e4 	.word	0x080095e4
 8007a0c:	080093b5 	.word	0x080093b5
 8007a10:	080093ec 	.word	0x080093ec
 8007a14:	7ff00000 	.word	0x7ff00000
 8007a18:	08009775 	.word	0x08009775
 8007a1c:	080094f8 	.word	0x080094f8
 8007a20:	080094d0 	.word	0x080094d0
 8007a24:	7ca00000 	.word	0x7ca00000
 8007a28:	7fefffff 	.word	0x7fefffff
 8007a2c:	f015 0310 	ands.w	r3, r5, #16
 8007a30:	bf18      	it	ne
 8007a32:	236a      	movne	r3, #106	; 0x6a
 8007a34:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8007d04 <_strtod_l+0x86c>
 8007a38:	9305      	str	r3, [sp, #20]
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	2300      	movs	r3, #0
 8007a40:	07ea      	lsls	r2, r5, #31
 8007a42:	d504      	bpl.n	8007a4e <_strtod_l+0x5b6>
 8007a44:	e9da 2300 	ldrd	r2, r3, [sl]
 8007a48:	f7f8 fdde 	bl	8000608 <__aeabi_dmul>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	106d      	asrs	r5, r5, #1
 8007a50:	f10a 0a08 	add.w	sl, sl, #8
 8007a54:	d1f4      	bne.n	8007a40 <_strtod_l+0x5a8>
 8007a56:	b10b      	cbz	r3, 8007a5c <_strtod_l+0x5c4>
 8007a58:	4680      	mov	r8, r0
 8007a5a:	4689      	mov	r9, r1
 8007a5c:	9b05      	ldr	r3, [sp, #20]
 8007a5e:	b1bb      	cbz	r3, 8007a90 <_strtod_l+0x5f8>
 8007a60:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007a64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	dd10      	ble.n	8007a90 <_strtod_l+0x5f8>
 8007a6e:	2b1f      	cmp	r3, #31
 8007a70:	f340 8125 	ble.w	8007cbe <_strtod_l+0x826>
 8007a74:	2b34      	cmp	r3, #52	; 0x34
 8007a76:	bfde      	ittt	le
 8007a78:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007a7c:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a80:	4093      	lslle	r3, r2
 8007a82:	f04f 0800 	mov.w	r8, #0
 8007a86:	bfcc      	ite	gt
 8007a88:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007a8c:	ea03 0901 	andle.w	r9, r3, r1
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f9 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d1a6      	bne.n	80079ee <_strtod_l+0x556>
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007aa6:	4633      	mov	r3, r6
 8007aa8:	465a      	mov	r2, fp
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7ff f8de 	bl	8006c6c <__s2b>
 8007ab0:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f43f af2a 	beq.w	800790c <_strtod_l+0x474>
 8007ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	eba3 0307 	sub.w	r3, r3, r7
 8007ac2:	bfa8      	it	ge
 8007ac4:	2300      	movge	r3, #0
 8007ac6:	9312      	str	r3, [sp, #72]	; 0x48
 8007ac8:	2600      	movs	r6, #0
 8007aca:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ace:	9316      	str	r3, [sp, #88]	; 0x58
 8007ad0:	46b3      	mov	fp, r6
 8007ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	6859      	ldr	r1, [r3, #4]
 8007ad8:	f7ff f820 	bl	8006b1c <_Balloc>
 8007adc:	9008      	str	r0, [sp, #32]
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f af18 	beq.w	8007914 <_strtod_l+0x47c>
 8007ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	3202      	adds	r2, #2
 8007aea:	f103 010c 	add.w	r1, r3, #12
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	300c      	adds	r0, #12
 8007af2:	f000 fd85 	bl	8008600 <memcpy>
 8007af6:	ab1c      	add	r3, sp, #112	; 0x70
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	ab1b      	add	r3, sp, #108	; 0x6c
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4642      	mov	r2, r8
 8007b00:	464b      	mov	r3, r9
 8007b02:	4620      	mov	r0, r4
 8007b04:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007b08:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007b0c:	f7ff fbd8 	bl	80072c0 <__d2b>
 8007b10:	901a      	str	r0, [sp, #104]	; 0x68
 8007b12:	2800      	cmp	r0, #0
 8007b14:	f43f aefe 	beq.w	8007914 <_strtod_l+0x47c>
 8007b18:	2101      	movs	r1, #1
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff f93e 	bl	8006d9c <__i2b>
 8007b20:	4683      	mov	fp, r0
 8007b22:	2800      	cmp	r0, #0
 8007b24:	f43f aef6 	beq.w	8007914 <_strtod_l+0x47c>
 8007b28:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007b2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	bfab      	itete	ge
 8007b30:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007b32:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007b34:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007b36:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007b3a:	bfac      	ite	ge
 8007b3c:	eb07 0a03 	addge.w	sl, r7, r3
 8007b40:	1bdd      	sublt	r5, r3, r7
 8007b42:	9b05      	ldr	r3, [sp, #20]
 8007b44:	1aff      	subs	r7, r7, r3
 8007b46:	4417      	add	r7, r2
 8007b48:	4b6f      	ldr	r3, [pc, #444]	; (8007d08 <_strtod_l+0x870>)
 8007b4a:	3f01      	subs	r7, #1
 8007b4c:	429f      	cmp	r7, r3
 8007b4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b52:	f280 80c7 	bge.w	8007ce4 <_strtod_l+0x84c>
 8007b56:	1bdb      	subs	r3, r3, r7
 8007b58:	2b1f      	cmp	r3, #31
 8007b5a:	eba2 0203 	sub.w	r2, r2, r3
 8007b5e:	f04f 0101 	mov.w	r1, #1
 8007b62:	f300 80b3 	bgt.w	8007ccc <_strtod_l+0x834>
 8007b66:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9310      	str	r3, [sp, #64]	; 0x40
 8007b70:	eb0a 0702 	add.w	r7, sl, r2
 8007b74:	9b05      	ldr	r3, [sp, #20]
 8007b76:	45ba      	cmp	sl, r7
 8007b78:	4415      	add	r5, r2
 8007b7a:	441d      	add	r5, r3
 8007b7c:	4653      	mov	r3, sl
 8007b7e:	bfa8      	it	ge
 8007b80:	463b      	movge	r3, r7
 8007b82:	42ab      	cmp	r3, r5
 8007b84:	bfa8      	it	ge
 8007b86:	462b      	movge	r3, r5
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bfc2      	ittt	gt
 8007b8c:	1aff      	subgt	r7, r7, r3
 8007b8e:	1aed      	subgt	r5, r5, r3
 8007b90:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dd17      	ble.n	8007bca <_strtod_l+0x732>
 8007b9a:	4659      	mov	r1, fp
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7ff f9bc 	bl	8006f1c <__pow5mult>
 8007ba4:	4683      	mov	fp, r0
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f43f aeb4 	beq.w	8007914 <_strtod_l+0x47c>
 8007bac:	4601      	mov	r1, r0
 8007bae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7ff f909 	bl	8006dc8 <__multiply>
 8007bb6:	900a      	str	r0, [sp, #40]	; 0x28
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f43f aeab 	beq.w	8007914 <_strtod_l+0x47c>
 8007bbe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7fe ffeb 	bl	8006b9c <_Bfree>
 8007bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8007bca:	2f00      	cmp	r7, #0
 8007bcc:	f300 808f 	bgt.w	8007cee <_strtod_l+0x856>
 8007bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dd08      	ble.n	8007be8 <_strtod_l+0x750>
 8007bd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007bd8:	9908      	ldr	r1, [sp, #32]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f7ff f99e 	bl	8006f1c <__pow5mult>
 8007be0:	9008      	str	r0, [sp, #32]
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f43f ae96 	beq.w	8007914 <_strtod_l+0x47c>
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	dd08      	ble.n	8007bfe <_strtod_l+0x766>
 8007bec:	9908      	ldr	r1, [sp, #32]
 8007bee:	462a      	mov	r2, r5
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff f9ed 	bl	8006fd0 <__lshift>
 8007bf6:	9008      	str	r0, [sp, #32]
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f43f ae8b 	beq.w	8007914 <_strtod_l+0x47c>
 8007bfe:	f1ba 0f00 	cmp.w	sl, #0
 8007c02:	dd08      	ble.n	8007c16 <_strtod_l+0x77e>
 8007c04:	4659      	mov	r1, fp
 8007c06:	4652      	mov	r2, sl
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f7ff f9e1 	bl	8006fd0 <__lshift>
 8007c0e:	4683      	mov	fp, r0
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f43f ae7f 	beq.w	8007914 <_strtod_l+0x47c>
 8007c16:	9a08      	ldr	r2, [sp, #32]
 8007c18:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff fa60 	bl	80070e0 <__mdiff>
 8007c20:	4606      	mov	r6, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f43f ae76 	beq.w	8007914 <_strtod_l+0x47c>
 8007c28:	2500      	movs	r5, #0
 8007c2a:	68c3      	ldr	r3, [r0, #12]
 8007c2c:	60c5      	str	r5, [r0, #12]
 8007c2e:	4659      	mov	r1, fp
 8007c30:	930a      	str	r3, [sp, #40]	; 0x28
 8007c32:	f7ff fa39 	bl	80070a8 <__mcmp>
 8007c36:	42a8      	cmp	r0, r5
 8007c38:	da6c      	bge.n	8007d14 <_strtod_l+0x87c>
 8007c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3c:	ea53 0308 	orrs.w	r3, r3, r8
 8007c40:	f040 8090 	bne.w	8007d64 <_strtod_l+0x8cc>
 8007c44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f040 808b 	bne.w	8007d64 <_strtod_l+0x8cc>
 8007c4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c52:	0d1b      	lsrs	r3, r3, #20
 8007c54:	051b      	lsls	r3, r3, #20
 8007c56:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c5a:	f240 8083 	bls.w	8007d64 <_strtod_l+0x8cc>
 8007c5e:	6973      	ldr	r3, [r6, #20]
 8007c60:	b913      	cbnz	r3, 8007c68 <_strtod_l+0x7d0>
 8007c62:	6933      	ldr	r3, [r6, #16]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	dd7d      	ble.n	8007d64 <_strtod_l+0x8cc>
 8007c68:	4631      	mov	r1, r6
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f7ff f9af 	bl	8006fd0 <__lshift>
 8007c72:	4659      	mov	r1, fp
 8007c74:	4606      	mov	r6, r0
 8007c76:	f7ff fa17 	bl	80070a8 <__mcmp>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dd72      	ble.n	8007d64 <_strtod_l+0x8cc>
 8007c7e:	9905      	ldr	r1, [sp, #20]
 8007c80:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <_strtod_l+0x874>)
 8007c82:	464b      	mov	r3, r9
 8007c84:	2900      	cmp	r1, #0
 8007c86:	f000 808e 	beq.w	8007da6 <_strtod_l+0x90e>
 8007c8a:	ea02 0109 	and.w	r1, r2, r9
 8007c8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c92:	f300 8088 	bgt.w	8007da6 <_strtod_l+0x90e>
 8007c96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c9a:	f77f aeac 	ble.w	80079f6 <_strtod_l+0x55e>
 8007c9e:	4b1c      	ldr	r3, [pc, #112]	; (8007d10 <_strtod_l+0x878>)
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f7f8 fcaf 	bl	8000608 <__aeabi_dmul>
 8007caa:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <_strtod_l+0x874>)
 8007cac:	400b      	ands	r3, r1
 8007cae:	4680      	mov	r8, r0
 8007cb0:	4689      	mov	r9, r1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f47f ae38 	bne.w	8007928 <_strtod_l+0x490>
 8007cb8:	2322      	movs	r3, #34	; 0x22
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	e634      	b.n	8007928 <_strtod_l+0x490>
 8007cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	ea03 0808 	and.w	r8, r3, r8
 8007cca:	e6e1      	b.n	8007a90 <_strtod_l+0x5f8>
 8007ccc:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007cd0:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007cd4:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007cd8:	37e2      	adds	r7, #226	; 0xe2
 8007cda:	fa01 f307 	lsl.w	r3, r1, r7
 8007cde:	9310      	str	r3, [sp, #64]	; 0x40
 8007ce0:	9113      	str	r1, [sp, #76]	; 0x4c
 8007ce2:	e745      	b.n	8007b70 <_strtod_l+0x6d8>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9310      	str	r3, [sp, #64]	; 0x40
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cec:	e740      	b.n	8007b70 <_strtod_l+0x6d8>
 8007cee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cf0:	463a      	mov	r2, r7
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7ff f96c 	bl	8006fd0 <__lshift>
 8007cf8:	901a      	str	r0, [sp, #104]	; 0x68
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f47f af68 	bne.w	8007bd0 <_strtod_l+0x738>
 8007d00:	e608      	b.n	8007914 <_strtod_l+0x47c>
 8007d02:	bf00      	nop
 8007d04:	080095f8 	.word	0x080095f8
 8007d08:	fffffc02 	.word	0xfffffc02
 8007d0c:	7ff00000 	.word	0x7ff00000
 8007d10:	39500000 	.word	0x39500000
 8007d14:	46ca      	mov	sl, r9
 8007d16:	d165      	bne.n	8007de4 <_strtod_l+0x94c>
 8007d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d1e:	b352      	cbz	r2, 8007d76 <_strtod_l+0x8de>
 8007d20:	4a9d      	ldr	r2, [pc, #628]	; (8007f98 <_strtod_l+0xb00>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d12a      	bne.n	8007d7c <_strtod_l+0x8e4>
 8007d26:	9b05      	ldr	r3, [sp, #20]
 8007d28:	4641      	mov	r1, r8
 8007d2a:	b1fb      	cbz	r3, 8007d6c <_strtod_l+0x8d4>
 8007d2c:	4b9b      	ldr	r3, [pc, #620]	; (8007f9c <_strtod_l+0xb04>)
 8007d2e:	ea09 0303 	and.w	r3, r9, r3
 8007d32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d3a:	d81a      	bhi.n	8007d72 <_strtod_l+0x8da>
 8007d3c:	0d1b      	lsrs	r3, r3, #20
 8007d3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	4299      	cmp	r1, r3
 8007d48:	d118      	bne.n	8007d7c <_strtod_l+0x8e4>
 8007d4a:	4b95      	ldr	r3, [pc, #596]	; (8007fa0 <_strtod_l+0xb08>)
 8007d4c:	459a      	cmp	sl, r3
 8007d4e:	d102      	bne.n	8007d56 <_strtod_l+0x8be>
 8007d50:	3101      	adds	r1, #1
 8007d52:	f43f addf 	beq.w	8007914 <_strtod_l+0x47c>
 8007d56:	4b91      	ldr	r3, [pc, #580]	; (8007f9c <_strtod_l+0xb04>)
 8007d58:	ea0a 0303 	and.w	r3, sl, r3
 8007d5c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007d60:	f04f 0800 	mov.w	r8, #0
 8007d64:	9b05      	ldr	r3, [sp, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d199      	bne.n	8007c9e <_strtod_l+0x806>
 8007d6a:	e5dd      	b.n	8007928 <_strtod_l+0x490>
 8007d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d70:	e7e9      	b.n	8007d46 <_strtod_l+0x8ae>
 8007d72:	4613      	mov	r3, r2
 8007d74:	e7e7      	b.n	8007d46 <_strtod_l+0x8ae>
 8007d76:	ea53 0308 	orrs.w	r3, r3, r8
 8007d7a:	d080      	beq.n	8007c7e <_strtod_l+0x7e6>
 8007d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d7e:	b1e3      	cbz	r3, 8007dba <_strtod_l+0x922>
 8007d80:	ea13 0f0a 	tst.w	r3, sl
 8007d84:	d0ee      	beq.n	8007d64 <_strtod_l+0x8cc>
 8007d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d88:	9a05      	ldr	r2, [sp, #20]
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	b1c3      	cbz	r3, 8007dc2 <_strtod_l+0x92a>
 8007d90:	f7ff fb5e 	bl	8007450 <sulp>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d9c:	f7f8 fa7e 	bl	800029c <__adddf3>
 8007da0:	4680      	mov	r8, r0
 8007da2:	4689      	mov	r9, r1
 8007da4:	e7de      	b.n	8007d64 <_strtod_l+0x8cc>
 8007da6:	4013      	ands	r3, r2
 8007da8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007dac:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007db0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007db4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007db8:	e7d4      	b.n	8007d64 <_strtod_l+0x8cc>
 8007dba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dbc:	ea13 0f08 	tst.w	r3, r8
 8007dc0:	e7e0      	b.n	8007d84 <_strtod_l+0x8ec>
 8007dc2:	f7ff fb45 	bl	8007450 <sulp>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007dcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007dce:	f7f8 fa63 	bl	8000298 <__aeabi_dsub>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	4689      	mov	r9, r1
 8007dda:	f7f8 fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d0c0      	beq.n	8007d64 <_strtod_l+0x8cc>
 8007de2:	e608      	b.n	80079f6 <_strtod_l+0x55e>
 8007de4:	4659      	mov	r1, fp
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff fac0 	bl	800736c <__ratio>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007df4:	2200      	movs	r2, #0
 8007df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dfa:	f7f8 fe81 	bl	8000b00 <__aeabi_dcmple>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d06f      	beq.n	8007ee2 <_strtod_l+0xa4a>
 8007e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d17c      	bne.n	8007f02 <_strtod_l+0xa6a>
 8007e08:	f1b8 0f00 	cmp.w	r8, #0
 8007e0c:	d159      	bne.n	8007ec2 <_strtod_l+0xa2a>
 8007e0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d17b      	bne.n	8007f0e <_strtod_l+0xa76>
 8007e16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e1a:	4b62      	ldr	r3, [pc, #392]	; (8007fa4 <_strtod_l+0xb0c>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f7f8 fe65 	bl	8000aec <__aeabi_dcmplt>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d15a      	bne.n	8007edc <_strtod_l+0xa44>
 8007e26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e2a:	4b5f      	ldr	r3, [pc, #380]	; (8007fa8 <_strtod_l+0xb10>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f7f8 fbeb 	bl	8000608 <__aeabi_dmul>
 8007e32:	4605      	mov	r5, r0
 8007e34:	460f      	mov	r7, r1
 8007e36:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007e3a:	9506      	str	r5, [sp, #24]
 8007e3c:	9307      	str	r3, [sp, #28]
 8007e3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e42:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e46:	4b55      	ldr	r3, [pc, #340]	; (8007f9c <_strtod_l+0xb04>)
 8007e48:	4a54      	ldr	r2, [pc, #336]	; (8007f9c <_strtod_l+0xb04>)
 8007e4a:	ea0a 0303 	and.w	r3, sl, r3
 8007e4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e50:	4b56      	ldr	r3, [pc, #344]	; (8007fac <_strtod_l+0xb14>)
 8007e52:	ea0a 0202 	and.w	r2, sl, r2
 8007e56:	429a      	cmp	r2, r3
 8007e58:	f040 80ae 	bne.w	8007fb8 <_strtod_l+0xb20>
 8007e5c:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7ff f9c4 	bl	80071f0 <__ulp>
 8007e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e6c:	f7f8 fbcc 	bl	8000608 <__aeabi_dmul>
 8007e70:	4642      	mov	r2, r8
 8007e72:	464b      	mov	r3, r9
 8007e74:	f7f8 fa12 	bl	800029c <__adddf3>
 8007e78:	f8df a120 	ldr.w	sl, [pc, #288]	; 8007f9c <_strtod_l+0xb04>
 8007e7c:	4a4c      	ldr	r2, [pc, #304]	; (8007fb0 <_strtod_l+0xb18>)
 8007e7e:	ea01 0a0a 	and.w	sl, r1, sl
 8007e82:	4592      	cmp	sl, r2
 8007e84:	4680      	mov	r8, r0
 8007e86:	d948      	bls.n	8007f1a <_strtod_l+0xa82>
 8007e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e8a:	4b45      	ldr	r3, [pc, #276]	; (8007fa0 <_strtod_l+0xb08>)
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d103      	bne.n	8007e98 <_strtod_l+0xa00>
 8007e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e92:	3301      	adds	r3, #1
 8007e94:	f43f ad3e 	beq.w	8007914 <_strtod_l+0x47c>
 8007e98:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007fa0 <_strtod_l+0xb08>
 8007e9c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007ea0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7fe fe7a 	bl	8006b9c <_Bfree>
 8007ea8:	9908      	ldr	r1, [sp, #32]
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f7fe fe76 	bl	8006b9c <_Bfree>
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f7fe fe72 	bl	8006b9c <_Bfree>
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7fe fe6e 	bl	8006b9c <_Bfree>
 8007ec0:	e607      	b.n	8007ad2 <_strtod_l+0x63a>
 8007ec2:	f1b8 0f01 	cmp.w	r8, #1
 8007ec6:	d103      	bne.n	8007ed0 <_strtod_l+0xa38>
 8007ec8:	f1b9 0f00 	cmp.w	r9, #0
 8007ecc:	f43f ad93 	beq.w	80079f6 <_strtod_l+0x55e>
 8007ed0:	4b38      	ldr	r3, [pc, #224]	; (8007fb4 <_strtod_l+0xb1c>)
 8007ed2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007eda:	e016      	b.n	8007f0a <_strtod_l+0xa72>
 8007edc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ede:	4f32      	ldr	r7, [pc, #200]	; (8007fa8 <_strtod_l+0xb10>)
 8007ee0:	e7a9      	b.n	8007e36 <_strtod_l+0x99e>
 8007ee2:	4b31      	ldr	r3, [pc, #196]	; (8007fa8 <_strtod_l+0xb10>)
 8007ee4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f7f8 fb8d 	bl	8000608 <__aeabi_dmul>
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d09e      	beq.n	8007e36 <_strtod_l+0x99e>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f00:	e79d      	b.n	8007e3e <_strtod_l+0x9a6>
 8007f02:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <_strtod_l+0xb0c>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f0a:	4f26      	ldr	r7, [pc, #152]	; (8007fa4 <_strtod_l+0xb0c>)
 8007f0c:	e797      	b.n	8007e3e <_strtod_l+0x9a6>
 8007f0e:	4b29      	ldr	r3, [pc, #164]	; (8007fb4 <_strtod_l+0xb1c>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f16:	4645      	mov	r5, r8
 8007f18:	e7f7      	b.n	8007f0a <_strtod_l+0xa72>
 8007f1a:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007f1e:	9b05      	ldr	r3, [sp, #20]
 8007f20:	46ca      	mov	sl, r9
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1bc      	bne.n	8007ea0 <_strtod_l+0xa08>
 8007f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f2c:	0d1b      	lsrs	r3, r3, #20
 8007f2e:	051b      	lsls	r3, r3, #20
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d1b5      	bne.n	8007ea0 <_strtod_l+0xa08>
 8007f34:	4628      	mov	r0, r5
 8007f36:	4639      	mov	r1, r7
 8007f38:	f7f9 f924 	bl	8001184 <__aeabi_d2lz>
 8007f3c:	f7f8 fb36 	bl	80005ac <__aeabi_l2d>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4628      	mov	r0, r5
 8007f46:	4639      	mov	r1, r7
 8007f48:	f7f8 f9a6 	bl	8000298 <__aeabi_dsub>
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4602      	mov	r2, r0
 8007f50:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007f54:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5a:	ea4a 0a08 	orr.w	sl, sl, r8
 8007f5e:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007f62:	d06a      	beq.n	800803a <_strtod_l+0xba2>
 8007f64:	a308      	add	r3, pc, #32	; (adr r3, 8007f88 <_strtod_l+0xaf0>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 fdbf 	bl	8000aec <__aeabi_dcmplt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f47f acda 	bne.w	8007928 <_strtod_l+0x490>
 8007f74:	a306      	add	r3, pc, #24	; (adr r3, 8007f90 <_strtod_l+0xaf8>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f7e:	f7f8 fdd3 	bl	8000b28 <__aeabi_dcmpgt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d08c      	beq.n	8007ea0 <_strtod_l+0xa08>
 8007f86:	e4cf      	b.n	8007928 <_strtod_l+0x490>
 8007f88:	94a03595 	.word	0x94a03595
 8007f8c:	3fdfffff 	.word	0x3fdfffff
 8007f90:	35afe535 	.word	0x35afe535
 8007f94:	3fe00000 	.word	0x3fe00000
 8007f98:	000fffff 	.word	0x000fffff
 8007f9c:	7ff00000 	.word	0x7ff00000
 8007fa0:	7fefffff 	.word	0x7fefffff
 8007fa4:	3ff00000 	.word	0x3ff00000
 8007fa8:	3fe00000 	.word	0x3fe00000
 8007fac:	7fe00000 	.word	0x7fe00000
 8007fb0:	7c9fffff 	.word	0x7c9fffff
 8007fb4:	bff00000 	.word	0xbff00000
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	b333      	cbz	r3, 800800a <_strtod_l+0xb72>
 8007fbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fc2:	d822      	bhi.n	800800a <_strtod_l+0xb72>
 8007fc4:	a328      	add	r3, pc, #160	; (adr r3, 8008068 <_strtod_l+0xbd0>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	4628      	mov	r0, r5
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 fd97 	bl	8000b00 <__aeabi_dcmple>
 8007fd2:	b1a0      	cbz	r0, 8007ffe <_strtod_l+0xb66>
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f7f8 fdee 	bl	8000bb8 <__aeabi_d2uiz>
 8007fdc:	2801      	cmp	r0, #1
 8007fde:	bf38      	it	cc
 8007fe0:	2001      	movcc	r0, #1
 8007fe2:	f7f8 fa97 	bl	8000514 <__aeabi_ui2d>
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	bb03      	cbnz	r3, 8008030 <_strtod_l+0xb98>
 8007fee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ff2:	9014      	str	r0, [sp, #80]	; 0x50
 8007ff4:	9315      	str	r3, [sp, #84]	; 0x54
 8007ff6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ffa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008002:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008006:	1a9b      	subs	r3, r3, r2
 8008008:	9311      	str	r3, [sp, #68]	; 0x44
 800800a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800800c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800800e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008012:	f7ff f8ed 	bl	80071f0 <__ulp>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4640      	mov	r0, r8
 800801c:	4649      	mov	r1, r9
 800801e:	f7f8 faf3 	bl	8000608 <__aeabi_dmul>
 8008022:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008026:	f7f8 f939 	bl	800029c <__adddf3>
 800802a:	4680      	mov	r8, r0
 800802c:	4689      	mov	r9, r1
 800802e:	e776      	b.n	8007f1e <_strtod_l+0xa86>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008038:	e7dd      	b.n	8007ff6 <_strtod_l+0xb5e>
 800803a:	a30d      	add	r3, pc, #52	; (adr r3, 8008070 <_strtod_l+0xbd8>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 fd54 	bl	8000aec <__aeabi_dcmplt>
 8008044:	e79d      	b.n	8007f82 <_strtod_l+0xaea>
 8008046:	2300      	movs	r3, #0
 8008048:	930e      	str	r3, [sp, #56]	; 0x38
 800804a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800804c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	f7ff ba5f 	b.w	8007512 <_strtod_l+0x7a>
 8008054:	2a65      	cmp	r2, #101	; 0x65
 8008056:	f43f ab56 	beq.w	8007706 <_strtod_l+0x26e>
 800805a:	2a45      	cmp	r2, #69	; 0x45
 800805c:	f43f ab53 	beq.w	8007706 <_strtod_l+0x26e>
 8008060:	2301      	movs	r3, #1
 8008062:	f7ff bb8b 	b.w	800777c <_strtod_l+0x2e4>
 8008066:	bf00      	nop
 8008068:	ffc00000 	.word	0xffc00000
 800806c:	41dfffff 	.word	0x41dfffff
 8008070:	94a03595 	.word	0x94a03595
 8008074:	3fcfffff 	.word	0x3fcfffff

08008078 <_strtod_r>:
 8008078:	4b01      	ldr	r3, [pc, #4]	; (8008080 <_strtod_r+0x8>)
 800807a:	f7ff ba0d 	b.w	8007498 <_strtod_l>
 800807e:	bf00      	nop
 8008080:	2000006c 	.word	0x2000006c

08008084 <_strtol_l.constprop.0>:
 8008084:	2b01      	cmp	r3, #1
 8008086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800808a:	4686      	mov	lr, r0
 800808c:	4690      	mov	r8, r2
 800808e:	d001      	beq.n	8008094 <_strtol_l.constprop.0+0x10>
 8008090:	2b24      	cmp	r3, #36	; 0x24
 8008092:	d906      	bls.n	80080a2 <_strtol_l.constprop.0+0x1e>
 8008094:	f7fd fdae 	bl	8005bf4 <__errno>
 8008098:	2316      	movs	r3, #22
 800809a:	6003      	str	r3, [r0, #0]
 800809c:	2000      	movs	r0, #0
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	4836      	ldr	r0, [pc, #216]	; (800817c <_strtol_l.constprop.0+0xf8>)
 80080a4:	460d      	mov	r5, r1
 80080a6:	462a      	mov	r2, r5
 80080a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080ac:	5d06      	ldrb	r6, [r0, r4]
 80080ae:	f016 0608 	ands.w	r6, r6, #8
 80080b2:	d1f8      	bne.n	80080a6 <_strtol_l.constprop.0+0x22>
 80080b4:	2c2d      	cmp	r4, #45	; 0x2d
 80080b6:	d12e      	bne.n	8008116 <_strtol_l.constprop.0+0x92>
 80080b8:	782c      	ldrb	r4, [r5, #0]
 80080ba:	2601      	movs	r6, #1
 80080bc:	1c95      	adds	r5, r2, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d057      	beq.n	8008172 <_strtol_l.constprop.0+0xee>
 80080c2:	2b10      	cmp	r3, #16
 80080c4:	d109      	bne.n	80080da <_strtol_l.constprop.0+0x56>
 80080c6:	2c30      	cmp	r4, #48	; 0x30
 80080c8:	d107      	bne.n	80080da <_strtol_l.constprop.0+0x56>
 80080ca:	782a      	ldrb	r2, [r5, #0]
 80080cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80080d0:	2a58      	cmp	r2, #88	; 0x58
 80080d2:	d149      	bne.n	8008168 <_strtol_l.constprop.0+0xe4>
 80080d4:	786c      	ldrb	r4, [r5, #1]
 80080d6:	2310      	movs	r3, #16
 80080d8:	3502      	adds	r5, #2
 80080da:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80080de:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80080e2:	2200      	movs	r2, #0
 80080e4:	fbbc f9f3 	udiv	r9, ip, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80080ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80080f2:	2f09      	cmp	r7, #9
 80080f4:	d814      	bhi.n	8008120 <_strtol_l.constprop.0+0x9c>
 80080f6:	463c      	mov	r4, r7
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	dd20      	ble.n	800813e <_strtol_l.constprop.0+0xba>
 80080fc:	1c57      	adds	r7, r2, #1
 80080fe:	d007      	beq.n	8008110 <_strtol_l.constprop.0+0x8c>
 8008100:	4581      	cmp	r9, r0
 8008102:	d319      	bcc.n	8008138 <_strtol_l.constprop.0+0xb4>
 8008104:	d101      	bne.n	800810a <_strtol_l.constprop.0+0x86>
 8008106:	45a2      	cmp	sl, r4
 8008108:	db16      	blt.n	8008138 <_strtol_l.constprop.0+0xb4>
 800810a:	fb00 4003 	mla	r0, r0, r3, r4
 800810e:	2201      	movs	r2, #1
 8008110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008114:	e7eb      	b.n	80080ee <_strtol_l.constprop.0+0x6a>
 8008116:	2c2b      	cmp	r4, #43	; 0x2b
 8008118:	bf04      	itt	eq
 800811a:	782c      	ldrbeq	r4, [r5, #0]
 800811c:	1c95      	addeq	r5, r2, #2
 800811e:	e7ce      	b.n	80080be <_strtol_l.constprop.0+0x3a>
 8008120:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008124:	2f19      	cmp	r7, #25
 8008126:	d801      	bhi.n	800812c <_strtol_l.constprop.0+0xa8>
 8008128:	3c37      	subs	r4, #55	; 0x37
 800812a:	e7e5      	b.n	80080f8 <_strtol_l.constprop.0+0x74>
 800812c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008130:	2f19      	cmp	r7, #25
 8008132:	d804      	bhi.n	800813e <_strtol_l.constprop.0+0xba>
 8008134:	3c57      	subs	r4, #87	; 0x57
 8008136:	e7df      	b.n	80080f8 <_strtol_l.constprop.0+0x74>
 8008138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800813c:	e7e8      	b.n	8008110 <_strtol_l.constprop.0+0x8c>
 800813e:	1c53      	adds	r3, r2, #1
 8008140:	d108      	bne.n	8008154 <_strtol_l.constprop.0+0xd0>
 8008142:	2322      	movs	r3, #34	; 0x22
 8008144:	f8ce 3000 	str.w	r3, [lr]
 8008148:	4660      	mov	r0, ip
 800814a:	f1b8 0f00 	cmp.w	r8, #0
 800814e:	d0a6      	beq.n	800809e <_strtol_l.constprop.0+0x1a>
 8008150:	1e69      	subs	r1, r5, #1
 8008152:	e006      	b.n	8008162 <_strtol_l.constprop.0+0xde>
 8008154:	b106      	cbz	r6, 8008158 <_strtol_l.constprop.0+0xd4>
 8008156:	4240      	negs	r0, r0
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	d09f      	beq.n	800809e <_strtol_l.constprop.0+0x1a>
 800815e:	2a00      	cmp	r2, #0
 8008160:	d1f6      	bne.n	8008150 <_strtol_l.constprop.0+0xcc>
 8008162:	f8c8 1000 	str.w	r1, [r8]
 8008166:	e79a      	b.n	800809e <_strtol_l.constprop.0+0x1a>
 8008168:	2430      	movs	r4, #48	; 0x30
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1b5      	bne.n	80080da <_strtol_l.constprop.0+0x56>
 800816e:	2308      	movs	r3, #8
 8008170:	e7b3      	b.n	80080da <_strtol_l.constprop.0+0x56>
 8008172:	2c30      	cmp	r4, #48	; 0x30
 8008174:	d0a9      	beq.n	80080ca <_strtol_l.constprop.0+0x46>
 8008176:	230a      	movs	r3, #10
 8008178:	e7af      	b.n	80080da <_strtol_l.constprop.0+0x56>
 800817a:	bf00      	nop
 800817c:	08009621 	.word	0x08009621

08008180 <_strtol_r>:
 8008180:	f7ff bf80 	b.w	8008084 <_strtol_l.constprop.0>

08008184 <__ssputs_r>:
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	688e      	ldr	r6, [r1, #8]
 800818a:	461f      	mov	r7, r3
 800818c:	42be      	cmp	r6, r7
 800818e:	680b      	ldr	r3, [r1, #0]
 8008190:	4682      	mov	sl, r0
 8008192:	460c      	mov	r4, r1
 8008194:	4690      	mov	r8, r2
 8008196:	d82c      	bhi.n	80081f2 <__ssputs_r+0x6e>
 8008198:	898a      	ldrh	r2, [r1, #12]
 800819a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800819e:	d026      	beq.n	80081ee <__ssputs_r+0x6a>
 80081a0:	6965      	ldr	r5, [r4, #20]
 80081a2:	6909      	ldr	r1, [r1, #16]
 80081a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081a8:	eba3 0901 	sub.w	r9, r3, r1
 80081ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081b0:	1c7b      	adds	r3, r7, #1
 80081b2:	444b      	add	r3, r9
 80081b4:	106d      	asrs	r5, r5, #1
 80081b6:	429d      	cmp	r5, r3
 80081b8:	bf38      	it	cc
 80081ba:	461d      	movcc	r5, r3
 80081bc:	0553      	lsls	r3, r2, #21
 80081be:	d527      	bpl.n	8008210 <__ssputs_r+0x8c>
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7fe fc1f 	bl	8006a04 <_malloc_r>
 80081c6:	4606      	mov	r6, r0
 80081c8:	b360      	cbz	r0, 8008224 <__ssputs_r+0xa0>
 80081ca:	6921      	ldr	r1, [r4, #16]
 80081cc:	464a      	mov	r2, r9
 80081ce:	f000 fa17 	bl	8008600 <memcpy>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	6126      	str	r6, [r4, #16]
 80081e0:	6165      	str	r5, [r4, #20]
 80081e2:	444e      	add	r6, r9
 80081e4:	eba5 0509 	sub.w	r5, r5, r9
 80081e8:	6026      	str	r6, [r4, #0]
 80081ea:	60a5      	str	r5, [r4, #8]
 80081ec:	463e      	mov	r6, r7
 80081ee:	42be      	cmp	r6, r7
 80081f0:	d900      	bls.n	80081f4 <__ssputs_r+0x70>
 80081f2:	463e      	mov	r6, r7
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	4632      	mov	r2, r6
 80081f8:	4641      	mov	r1, r8
 80081fa:	f000 f9c5 	bl	8008588 <memmove>
 80081fe:	68a3      	ldr	r3, [r4, #8]
 8008200:	1b9b      	subs	r3, r3, r6
 8008202:	60a3      	str	r3, [r4, #8]
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	4433      	add	r3, r6
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	2000      	movs	r0, #0
 800820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008210:	462a      	mov	r2, r5
 8008212:	f000 fda6 	bl	8008d62 <_realloc_r>
 8008216:	4606      	mov	r6, r0
 8008218:	2800      	cmp	r0, #0
 800821a:	d1e0      	bne.n	80081de <__ssputs_r+0x5a>
 800821c:	6921      	ldr	r1, [r4, #16]
 800821e:	4650      	mov	r0, sl
 8008220:	f7fe fb7e 	bl	8006920 <_free_r>
 8008224:	230c      	movs	r3, #12
 8008226:	f8ca 3000 	str.w	r3, [sl]
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008236:	e7e9      	b.n	800820c <__ssputs_r+0x88>

08008238 <_svfiprintf_r>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	4698      	mov	r8, r3
 800823e:	898b      	ldrh	r3, [r1, #12]
 8008240:	061b      	lsls	r3, r3, #24
 8008242:	b09d      	sub	sp, #116	; 0x74
 8008244:	4607      	mov	r7, r0
 8008246:	460d      	mov	r5, r1
 8008248:	4614      	mov	r4, r2
 800824a:	d50e      	bpl.n	800826a <_svfiprintf_r+0x32>
 800824c:	690b      	ldr	r3, [r1, #16]
 800824e:	b963      	cbnz	r3, 800826a <_svfiprintf_r+0x32>
 8008250:	2140      	movs	r1, #64	; 0x40
 8008252:	f7fe fbd7 	bl	8006a04 <_malloc_r>
 8008256:	6028      	str	r0, [r5, #0]
 8008258:	6128      	str	r0, [r5, #16]
 800825a:	b920      	cbnz	r0, 8008266 <_svfiprintf_r+0x2e>
 800825c:	230c      	movs	r3, #12
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008264:	e0d0      	b.n	8008408 <_svfiprintf_r+0x1d0>
 8008266:	2340      	movs	r3, #64	; 0x40
 8008268:	616b      	str	r3, [r5, #20]
 800826a:	2300      	movs	r3, #0
 800826c:	9309      	str	r3, [sp, #36]	; 0x24
 800826e:	2320      	movs	r3, #32
 8008270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008274:	f8cd 800c 	str.w	r8, [sp, #12]
 8008278:	2330      	movs	r3, #48	; 0x30
 800827a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008420 <_svfiprintf_r+0x1e8>
 800827e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008282:	f04f 0901 	mov.w	r9, #1
 8008286:	4623      	mov	r3, r4
 8008288:	469a      	mov	sl, r3
 800828a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800828e:	b10a      	cbz	r2, 8008294 <_svfiprintf_r+0x5c>
 8008290:	2a25      	cmp	r2, #37	; 0x25
 8008292:	d1f9      	bne.n	8008288 <_svfiprintf_r+0x50>
 8008294:	ebba 0b04 	subs.w	fp, sl, r4
 8008298:	d00b      	beq.n	80082b2 <_svfiprintf_r+0x7a>
 800829a:	465b      	mov	r3, fp
 800829c:	4622      	mov	r2, r4
 800829e:	4629      	mov	r1, r5
 80082a0:	4638      	mov	r0, r7
 80082a2:	f7ff ff6f 	bl	8008184 <__ssputs_r>
 80082a6:	3001      	adds	r0, #1
 80082a8:	f000 80a9 	beq.w	80083fe <_svfiprintf_r+0x1c6>
 80082ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ae:	445a      	add	r2, fp
 80082b0:	9209      	str	r2, [sp, #36]	; 0x24
 80082b2:	f89a 3000 	ldrb.w	r3, [sl]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 80a1 	beq.w	80083fe <_svfiprintf_r+0x1c6>
 80082bc:	2300      	movs	r3, #0
 80082be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082c6:	f10a 0a01 	add.w	sl, sl, #1
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	9307      	str	r3, [sp, #28]
 80082ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082d2:	931a      	str	r3, [sp, #104]	; 0x68
 80082d4:	4654      	mov	r4, sl
 80082d6:	2205      	movs	r2, #5
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	4850      	ldr	r0, [pc, #320]	; (8008420 <_svfiprintf_r+0x1e8>)
 80082de:	f7f7 ff7f 	bl	80001e0 <memchr>
 80082e2:	9a04      	ldr	r2, [sp, #16]
 80082e4:	b9d8      	cbnz	r0, 800831e <_svfiprintf_r+0xe6>
 80082e6:	06d0      	lsls	r0, r2, #27
 80082e8:	bf44      	itt	mi
 80082ea:	2320      	movmi	r3, #32
 80082ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082f0:	0711      	lsls	r1, r2, #28
 80082f2:	bf44      	itt	mi
 80082f4:	232b      	movmi	r3, #43	; 0x2b
 80082f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082fa:	f89a 3000 	ldrb.w	r3, [sl]
 80082fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008300:	d015      	beq.n	800832e <_svfiprintf_r+0xf6>
 8008302:	9a07      	ldr	r2, [sp, #28]
 8008304:	4654      	mov	r4, sl
 8008306:	2000      	movs	r0, #0
 8008308:	f04f 0c0a 	mov.w	ip, #10
 800830c:	4621      	mov	r1, r4
 800830e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008312:	3b30      	subs	r3, #48	; 0x30
 8008314:	2b09      	cmp	r3, #9
 8008316:	d94d      	bls.n	80083b4 <_svfiprintf_r+0x17c>
 8008318:	b1b0      	cbz	r0, 8008348 <_svfiprintf_r+0x110>
 800831a:	9207      	str	r2, [sp, #28]
 800831c:	e014      	b.n	8008348 <_svfiprintf_r+0x110>
 800831e:	eba0 0308 	sub.w	r3, r0, r8
 8008322:	fa09 f303 	lsl.w	r3, r9, r3
 8008326:	4313      	orrs	r3, r2
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	46a2      	mov	sl, r4
 800832c:	e7d2      	b.n	80082d4 <_svfiprintf_r+0x9c>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	1d19      	adds	r1, r3, #4
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	9103      	str	r1, [sp, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfbb      	ittet	lt
 800833a:	425b      	neglt	r3, r3
 800833c:	f042 0202 	orrlt.w	r2, r2, #2
 8008340:	9307      	strge	r3, [sp, #28]
 8008342:	9307      	strlt	r3, [sp, #28]
 8008344:	bfb8      	it	lt
 8008346:	9204      	strlt	r2, [sp, #16]
 8008348:	7823      	ldrb	r3, [r4, #0]
 800834a:	2b2e      	cmp	r3, #46	; 0x2e
 800834c:	d10c      	bne.n	8008368 <_svfiprintf_r+0x130>
 800834e:	7863      	ldrb	r3, [r4, #1]
 8008350:	2b2a      	cmp	r3, #42	; 0x2a
 8008352:	d134      	bne.n	80083be <_svfiprintf_r+0x186>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	9203      	str	r2, [sp, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfb8      	it	lt
 8008360:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008364:	3402      	adds	r4, #2
 8008366:	9305      	str	r3, [sp, #20]
 8008368:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008424 <_svfiprintf_r+0x1ec>
 800836c:	7821      	ldrb	r1, [r4, #0]
 800836e:	2203      	movs	r2, #3
 8008370:	4650      	mov	r0, sl
 8008372:	f7f7 ff35 	bl	80001e0 <memchr>
 8008376:	b138      	cbz	r0, 8008388 <_svfiprintf_r+0x150>
 8008378:	9b04      	ldr	r3, [sp, #16]
 800837a:	eba0 000a 	sub.w	r0, r0, sl
 800837e:	2240      	movs	r2, #64	; 0x40
 8008380:	4082      	lsls	r2, r0
 8008382:	4313      	orrs	r3, r2
 8008384:	3401      	adds	r4, #1
 8008386:	9304      	str	r3, [sp, #16]
 8008388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838c:	4826      	ldr	r0, [pc, #152]	; (8008428 <_svfiprintf_r+0x1f0>)
 800838e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008392:	2206      	movs	r2, #6
 8008394:	f7f7 ff24 	bl	80001e0 <memchr>
 8008398:	2800      	cmp	r0, #0
 800839a:	d038      	beq.n	800840e <_svfiprintf_r+0x1d6>
 800839c:	4b23      	ldr	r3, [pc, #140]	; (800842c <_svfiprintf_r+0x1f4>)
 800839e:	bb1b      	cbnz	r3, 80083e8 <_svfiprintf_r+0x1b0>
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	3307      	adds	r3, #7
 80083a4:	f023 0307 	bic.w	r3, r3, #7
 80083a8:	3308      	adds	r3, #8
 80083aa:	9303      	str	r3, [sp, #12]
 80083ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ae:	4433      	add	r3, r6
 80083b0:	9309      	str	r3, [sp, #36]	; 0x24
 80083b2:	e768      	b.n	8008286 <_svfiprintf_r+0x4e>
 80083b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80083b8:	460c      	mov	r4, r1
 80083ba:	2001      	movs	r0, #1
 80083bc:	e7a6      	b.n	800830c <_svfiprintf_r+0xd4>
 80083be:	2300      	movs	r3, #0
 80083c0:	3401      	adds	r4, #1
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	4619      	mov	r1, r3
 80083c6:	f04f 0c0a 	mov.w	ip, #10
 80083ca:	4620      	mov	r0, r4
 80083cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d0:	3a30      	subs	r2, #48	; 0x30
 80083d2:	2a09      	cmp	r2, #9
 80083d4:	d903      	bls.n	80083de <_svfiprintf_r+0x1a6>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0c6      	beq.n	8008368 <_svfiprintf_r+0x130>
 80083da:	9105      	str	r1, [sp, #20]
 80083dc:	e7c4      	b.n	8008368 <_svfiprintf_r+0x130>
 80083de:	fb0c 2101 	mla	r1, ip, r1, r2
 80083e2:	4604      	mov	r4, r0
 80083e4:	2301      	movs	r3, #1
 80083e6:	e7f0      	b.n	80083ca <_svfiprintf_r+0x192>
 80083e8:	ab03      	add	r3, sp, #12
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	462a      	mov	r2, r5
 80083ee:	4b10      	ldr	r3, [pc, #64]	; (8008430 <_svfiprintf_r+0x1f8>)
 80083f0:	a904      	add	r1, sp, #16
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7fc fcd0 	bl	8004d98 <_printf_float>
 80083f8:	1c42      	adds	r2, r0, #1
 80083fa:	4606      	mov	r6, r0
 80083fc:	d1d6      	bne.n	80083ac <_svfiprintf_r+0x174>
 80083fe:	89ab      	ldrh	r3, [r5, #12]
 8008400:	065b      	lsls	r3, r3, #25
 8008402:	f53f af2d 	bmi.w	8008260 <_svfiprintf_r+0x28>
 8008406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008408:	b01d      	add	sp, #116	; 0x74
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <_svfiprintf_r+0x1f8>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	4638      	mov	r0, r7
 800841a:	f7fc ff57 	bl	80052cc <_printf_i>
 800841e:	e7eb      	b.n	80083f8 <_svfiprintf_r+0x1c0>
 8008420:	08009721 	.word	0x08009721
 8008424:	08009727 	.word	0x08009727
 8008428:	0800972b 	.word	0x0800972b
 800842c:	08004d99 	.word	0x08004d99
 8008430:	08008185 	.word	0x08008185

08008434 <__sflush_r>:
 8008434:	898a      	ldrh	r2, [r1, #12]
 8008436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008438:	4605      	mov	r5, r0
 800843a:	0710      	lsls	r0, r2, #28
 800843c:	460c      	mov	r4, r1
 800843e:	d457      	bmi.n	80084f0 <__sflush_r+0xbc>
 8008440:	684b      	ldr	r3, [r1, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	dc04      	bgt.n	8008450 <__sflush_r+0x1c>
 8008446:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc01      	bgt.n	8008450 <__sflush_r+0x1c>
 800844c:	2000      	movs	r0, #0
 800844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008452:	2e00      	cmp	r6, #0
 8008454:	d0fa      	beq.n	800844c <__sflush_r+0x18>
 8008456:	2300      	movs	r3, #0
 8008458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800845c:	682f      	ldr	r7, [r5, #0]
 800845e:	6a21      	ldr	r1, [r4, #32]
 8008460:	602b      	str	r3, [r5, #0]
 8008462:	d032      	beq.n	80084ca <__sflush_r+0x96>
 8008464:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	075a      	lsls	r2, r3, #29
 800846a:	d505      	bpl.n	8008478 <__sflush_r+0x44>
 800846c:	6863      	ldr	r3, [r4, #4]
 800846e:	1ac0      	subs	r0, r0, r3
 8008470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008472:	b10b      	cbz	r3, 8008478 <__sflush_r+0x44>
 8008474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008476:	1ac0      	subs	r0, r0, r3
 8008478:	2300      	movs	r3, #0
 800847a:	4602      	mov	r2, r0
 800847c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800847e:	6a21      	ldr	r1, [r4, #32]
 8008480:	4628      	mov	r0, r5
 8008482:	47b0      	blx	r6
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	d106      	bne.n	8008498 <__sflush_r+0x64>
 800848a:	6829      	ldr	r1, [r5, #0]
 800848c:	291d      	cmp	r1, #29
 800848e:	d82b      	bhi.n	80084e8 <__sflush_r+0xb4>
 8008490:	4a28      	ldr	r2, [pc, #160]	; (8008534 <__sflush_r+0x100>)
 8008492:	410a      	asrs	r2, r1
 8008494:	07d6      	lsls	r6, r2, #31
 8008496:	d427      	bmi.n	80084e8 <__sflush_r+0xb4>
 8008498:	2200      	movs	r2, #0
 800849a:	6062      	str	r2, [r4, #4]
 800849c:	04d9      	lsls	r1, r3, #19
 800849e:	6922      	ldr	r2, [r4, #16]
 80084a0:	6022      	str	r2, [r4, #0]
 80084a2:	d504      	bpl.n	80084ae <__sflush_r+0x7a>
 80084a4:	1c42      	adds	r2, r0, #1
 80084a6:	d101      	bne.n	80084ac <__sflush_r+0x78>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b903      	cbnz	r3, 80084ae <__sflush_r+0x7a>
 80084ac:	6560      	str	r0, [r4, #84]	; 0x54
 80084ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084b0:	602f      	str	r7, [r5, #0]
 80084b2:	2900      	cmp	r1, #0
 80084b4:	d0ca      	beq.n	800844c <__sflush_r+0x18>
 80084b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084ba:	4299      	cmp	r1, r3
 80084bc:	d002      	beq.n	80084c4 <__sflush_r+0x90>
 80084be:	4628      	mov	r0, r5
 80084c0:	f7fe fa2e 	bl	8006920 <_free_r>
 80084c4:	2000      	movs	r0, #0
 80084c6:	6360      	str	r0, [r4, #52]	; 0x34
 80084c8:	e7c1      	b.n	800844e <__sflush_r+0x1a>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b0      	blx	r6
 80084d0:	1c41      	adds	r1, r0, #1
 80084d2:	d1c8      	bne.n	8008466 <__sflush_r+0x32>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0c5      	beq.n	8008466 <__sflush_r+0x32>
 80084da:	2b1d      	cmp	r3, #29
 80084dc:	d001      	beq.n	80084e2 <__sflush_r+0xae>
 80084de:	2b16      	cmp	r3, #22
 80084e0:	d101      	bne.n	80084e6 <__sflush_r+0xb2>
 80084e2:	602f      	str	r7, [r5, #0]
 80084e4:	e7b2      	b.n	800844c <__sflush_r+0x18>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	e7ae      	b.n	800844e <__sflush_r+0x1a>
 80084f0:	690f      	ldr	r7, [r1, #16]
 80084f2:	2f00      	cmp	r7, #0
 80084f4:	d0aa      	beq.n	800844c <__sflush_r+0x18>
 80084f6:	0793      	lsls	r3, r2, #30
 80084f8:	680e      	ldr	r6, [r1, #0]
 80084fa:	bf08      	it	eq
 80084fc:	694b      	ldreq	r3, [r1, #20]
 80084fe:	600f      	str	r7, [r1, #0]
 8008500:	bf18      	it	ne
 8008502:	2300      	movne	r3, #0
 8008504:	1bf6      	subs	r6, r6, r7
 8008506:	608b      	str	r3, [r1, #8]
 8008508:	2e00      	cmp	r6, #0
 800850a:	dd9f      	ble.n	800844c <__sflush_r+0x18>
 800850c:	6a21      	ldr	r1, [r4, #32]
 800850e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008512:	4633      	mov	r3, r6
 8008514:	463a      	mov	r2, r7
 8008516:	4628      	mov	r0, r5
 8008518:	47e0      	blx	ip
 800851a:	2800      	cmp	r0, #0
 800851c:	dc06      	bgt.n	800852c <__sflush_r+0xf8>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800852a:	e790      	b.n	800844e <__sflush_r+0x1a>
 800852c:	4407      	add	r7, r0
 800852e:	1a36      	subs	r6, r6, r0
 8008530:	e7ea      	b.n	8008508 <__sflush_r+0xd4>
 8008532:	bf00      	nop
 8008534:	dfbffffe 	.word	0xdfbffffe

08008538 <_fflush_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	690b      	ldr	r3, [r1, #16]
 800853c:	4605      	mov	r5, r0
 800853e:	460c      	mov	r4, r1
 8008540:	b913      	cbnz	r3, 8008548 <_fflush_r+0x10>
 8008542:	2500      	movs	r5, #0
 8008544:	4628      	mov	r0, r5
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	b118      	cbz	r0, 8008552 <_fflush_r+0x1a>
 800854a:	6a03      	ldr	r3, [r0, #32]
 800854c:	b90b      	cbnz	r3, 8008552 <_fflush_r+0x1a>
 800854e:	f7fd fa65 	bl	8005a1c <__sinit>
 8008552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f3      	beq.n	8008542 <_fflush_r+0xa>
 800855a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800855c:	07d0      	lsls	r0, r2, #31
 800855e:	d404      	bmi.n	800856a <_fflush_r+0x32>
 8008560:	0599      	lsls	r1, r3, #22
 8008562:	d402      	bmi.n	800856a <_fflush_r+0x32>
 8008564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008566:	f7fd fb6f 	bl	8005c48 <__retarget_lock_acquire_recursive>
 800856a:	4628      	mov	r0, r5
 800856c:	4621      	mov	r1, r4
 800856e:	f7ff ff61 	bl	8008434 <__sflush_r>
 8008572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008574:	07da      	lsls	r2, r3, #31
 8008576:	4605      	mov	r5, r0
 8008578:	d4e4      	bmi.n	8008544 <_fflush_r+0xc>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	059b      	lsls	r3, r3, #22
 800857e:	d4e1      	bmi.n	8008544 <_fflush_r+0xc>
 8008580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008582:	f7fd fb62 	bl	8005c4a <__retarget_lock_release_recursive>
 8008586:	e7dd      	b.n	8008544 <_fflush_r+0xc>

08008588 <memmove>:
 8008588:	4288      	cmp	r0, r1
 800858a:	b510      	push	{r4, lr}
 800858c:	eb01 0402 	add.w	r4, r1, r2
 8008590:	d902      	bls.n	8008598 <memmove+0x10>
 8008592:	4284      	cmp	r4, r0
 8008594:	4623      	mov	r3, r4
 8008596:	d807      	bhi.n	80085a8 <memmove+0x20>
 8008598:	1e43      	subs	r3, r0, #1
 800859a:	42a1      	cmp	r1, r4
 800859c:	d008      	beq.n	80085b0 <memmove+0x28>
 800859e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085a6:	e7f8      	b.n	800859a <memmove+0x12>
 80085a8:	4402      	add	r2, r0
 80085aa:	4601      	mov	r1, r0
 80085ac:	428a      	cmp	r2, r1
 80085ae:	d100      	bne.n	80085b2 <memmove+0x2a>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ba:	e7f7      	b.n	80085ac <memmove+0x24>

080085bc <strncmp>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	b16a      	cbz	r2, 80085dc <strncmp+0x20>
 80085c0:	3901      	subs	r1, #1
 80085c2:	1884      	adds	r4, r0, r2
 80085c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d103      	bne.n	80085d8 <strncmp+0x1c>
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d001      	beq.n	80085d8 <strncmp+0x1c>
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	d1f5      	bne.n	80085c4 <strncmp+0x8>
 80085d8:	1ad0      	subs	r0, r2, r3
 80085da:	bd10      	pop	{r4, pc}
 80085dc:	4610      	mov	r0, r2
 80085de:	e7fc      	b.n	80085da <strncmp+0x1e>

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d06      	ldr	r5, [pc, #24]	; (80085fc <_sbrk_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	f7f9 fbfc 	bl	8001de8 <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	200004d8 	.word	0x200004d8

08008600 <memcpy>:
 8008600:	440a      	add	r2, r1
 8008602:	4291      	cmp	r1, r2
 8008604:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008608:	d100      	bne.n	800860c <memcpy+0xc>
 800860a:	4770      	bx	lr
 800860c:	b510      	push	{r4, lr}
 800860e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008616:	4291      	cmp	r1, r2
 8008618:	d1f9      	bne.n	800860e <memcpy+0xe>
 800861a:	bd10      	pop	{r4, pc}

0800861c <nan>:
 800861c:	4901      	ldr	r1, [pc, #4]	; (8008624 <nan+0x8>)
 800861e:	2000      	movs	r0, #0
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	7ff80000 	.word	0x7ff80000

08008628 <__assert_func>:
 8008628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800862a:	4614      	mov	r4, r2
 800862c:	461a      	mov	r2, r3
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <__assert_func+0x2c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4605      	mov	r5, r0
 8008634:	68d8      	ldr	r0, [r3, #12]
 8008636:	b14c      	cbz	r4, 800864c <__assert_func+0x24>
 8008638:	4b07      	ldr	r3, [pc, #28]	; (8008658 <__assert_func+0x30>)
 800863a:	9100      	str	r1, [sp, #0]
 800863c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008640:	4906      	ldr	r1, [pc, #24]	; (800865c <__assert_func+0x34>)
 8008642:	462b      	mov	r3, r5
 8008644:	f000 fbca 	bl	8008ddc <fiprintf>
 8008648:	f000 fbda 	bl	8008e00 <abort>
 800864c:	4b04      	ldr	r3, [pc, #16]	; (8008660 <__assert_func+0x38>)
 800864e:	461c      	mov	r4, r3
 8008650:	e7f3      	b.n	800863a <__assert_func+0x12>
 8008652:	bf00      	nop
 8008654:	20000068 	.word	0x20000068
 8008658:	0800973a 	.word	0x0800973a
 800865c:	08009747 	.word	0x08009747
 8008660:	08009775 	.word	0x08009775

08008664 <_calloc_r>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	fba1 5402 	umull	r5, r4, r1, r2
 800866a:	b934      	cbnz	r4, 800867a <_calloc_r+0x16>
 800866c:	4629      	mov	r1, r5
 800866e:	f7fe f9c9 	bl	8006a04 <_malloc_r>
 8008672:	4606      	mov	r6, r0
 8008674:	b928      	cbnz	r0, 8008682 <_calloc_r+0x1e>
 8008676:	4630      	mov	r0, r6
 8008678:	bd70      	pop	{r4, r5, r6, pc}
 800867a:	220c      	movs	r2, #12
 800867c:	6002      	str	r2, [r0, #0]
 800867e:	2600      	movs	r6, #0
 8008680:	e7f9      	b.n	8008676 <_calloc_r+0x12>
 8008682:	462a      	mov	r2, r5
 8008684:	4621      	mov	r1, r4
 8008686:	f7fd fa62 	bl	8005b4e <memset>
 800868a:	e7f4      	b.n	8008676 <_calloc_r+0x12>

0800868c <rshift>:
 800868c:	6903      	ldr	r3, [r0, #16]
 800868e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008692:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008696:	ea4f 1261 	mov.w	r2, r1, asr #5
 800869a:	f100 0414 	add.w	r4, r0, #20
 800869e:	dd45      	ble.n	800872c <rshift+0xa0>
 80086a0:	f011 011f 	ands.w	r1, r1, #31
 80086a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086ac:	d10c      	bne.n	80086c8 <rshift+0x3c>
 80086ae:	f100 0710 	add.w	r7, r0, #16
 80086b2:	4629      	mov	r1, r5
 80086b4:	42b1      	cmp	r1, r6
 80086b6:	d334      	bcc.n	8008722 <rshift+0x96>
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	1eea      	subs	r2, r5, #3
 80086be:	4296      	cmp	r6, r2
 80086c0:	bf38      	it	cc
 80086c2:	2300      	movcc	r3, #0
 80086c4:	4423      	add	r3, r4
 80086c6:	e015      	b.n	80086f4 <rshift+0x68>
 80086c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086cc:	f1c1 0820 	rsb	r8, r1, #32
 80086d0:	40cf      	lsrs	r7, r1
 80086d2:	f105 0e04 	add.w	lr, r5, #4
 80086d6:	46a1      	mov	r9, r4
 80086d8:	4576      	cmp	r6, lr
 80086da:	46f4      	mov	ip, lr
 80086dc:	d815      	bhi.n	800870a <rshift+0x7e>
 80086de:	1a9a      	subs	r2, r3, r2
 80086e0:	0092      	lsls	r2, r2, #2
 80086e2:	3a04      	subs	r2, #4
 80086e4:	3501      	adds	r5, #1
 80086e6:	42ae      	cmp	r6, r5
 80086e8:	bf38      	it	cc
 80086ea:	2200      	movcc	r2, #0
 80086ec:	18a3      	adds	r3, r4, r2
 80086ee:	50a7      	str	r7, [r4, r2]
 80086f0:	b107      	cbz	r7, 80086f4 <rshift+0x68>
 80086f2:	3304      	adds	r3, #4
 80086f4:	1b1a      	subs	r2, r3, r4
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086fc:	bf08      	it	eq
 80086fe:	2300      	moveq	r3, #0
 8008700:	6102      	str	r2, [r0, #16]
 8008702:	bf08      	it	eq
 8008704:	6143      	streq	r3, [r0, #20]
 8008706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800870a:	f8dc c000 	ldr.w	ip, [ip]
 800870e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008712:	ea4c 0707 	orr.w	r7, ip, r7
 8008716:	f849 7b04 	str.w	r7, [r9], #4
 800871a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800871e:	40cf      	lsrs	r7, r1
 8008720:	e7da      	b.n	80086d8 <rshift+0x4c>
 8008722:	f851 cb04 	ldr.w	ip, [r1], #4
 8008726:	f847 cf04 	str.w	ip, [r7, #4]!
 800872a:	e7c3      	b.n	80086b4 <rshift+0x28>
 800872c:	4623      	mov	r3, r4
 800872e:	e7e1      	b.n	80086f4 <rshift+0x68>

08008730 <__hexdig_fun>:
 8008730:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008734:	2b09      	cmp	r3, #9
 8008736:	d802      	bhi.n	800873e <__hexdig_fun+0xe>
 8008738:	3820      	subs	r0, #32
 800873a:	b2c0      	uxtb	r0, r0
 800873c:	4770      	bx	lr
 800873e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008742:	2b05      	cmp	r3, #5
 8008744:	d801      	bhi.n	800874a <__hexdig_fun+0x1a>
 8008746:	3847      	subs	r0, #71	; 0x47
 8008748:	e7f7      	b.n	800873a <__hexdig_fun+0xa>
 800874a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800874e:	2b05      	cmp	r3, #5
 8008750:	d801      	bhi.n	8008756 <__hexdig_fun+0x26>
 8008752:	3827      	subs	r0, #39	; 0x27
 8008754:	e7f1      	b.n	800873a <__hexdig_fun+0xa>
 8008756:	2000      	movs	r0, #0
 8008758:	4770      	bx	lr
	...

0800875c <__gethex>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4617      	mov	r7, r2
 8008762:	680a      	ldr	r2, [r1, #0]
 8008764:	b085      	sub	sp, #20
 8008766:	f102 0b02 	add.w	fp, r2, #2
 800876a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800876e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008772:	4681      	mov	r9, r0
 8008774:	468a      	mov	sl, r1
 8008776:	9302      	str	r3, [sp, #8]
 8008778:	32fe      	adds	r2, #254	; 0xfe
 800877a:	eb02 030b 	add.w	r3, r2, fp
 800877e:	46d8      	mov	r8, fp
 8008780:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	2830      	cmp	r0, #48	; 0x30
 8008788:	d0f7      	beq.n	800877a <__gethex+0x1e>
 800878a:	f7ff ffd1 	bl	8008730 <__hexdig_fun>
 800878e:	4604      	mov	r4, r0
 8008790:	2800      	cmp	r0, #0
 8008792:	d138      	bne.n	8008806 <__gethex+0xaa>
 8008794:	49a8      	ldr	r1, [pc, #672]	; (8008a38 <__gethex+0x2dc>)
 8008796:	2201      	movs	r2, #1
 8008798:	4640      	mov	r0, r8
 800879a:	f7ff ff0f 	bl	80085bc <strncmp>
 800879e:	4606      	mov	r6, r0
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d169      	bne.n	8008878 <__gethex+0x11c>
 80087a4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80087a8:	465d      	mov	r5, fp
 80087aa:	f7ff ffc1 	bl	8008730 <__hexdig_fun>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d064      	beq.n	800887c <__gethex+0x120>
 80087b2:	465a      	mov	r2, fp
 80087b4:	7810      	ldrb	r0, [r2, #0]
 80087b6:	2830      	cmp	r0, #48	; 0x30
 80087b8:	4690      	mov	r8, r2
 80087ba:	f102 0201 	add.w	r2, r2, #1
 80087be:	d0f9      	beq.n	80087b4 <__gethex+0x58>
 80087c0:	f7ff ffb6 	bl	8008730 <__hexdig_fun>
 80087c4:	2301      	movs	r3, #1
 80087c6:	fab0 f480 	clz	r4, r0
 80087ca:	0964      	lsrs	r4, r4, #5
 80087cc:	465e      	mov	r6, fp
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	4642      	mov	r2, r8
 80087d2:	4615      	mov	r5, r2
 80087d4:	3201      	adds	r2, #1
 80087d6:	7828      	ldrb	r0, [r5, #0]
 80087d8:	f7ff ffaa 	bl	8008730 <__hexdig_fun>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d1f8      	bne.n	80087d2 <__gethex+0x76>
 80087e0:	4995      	ldr	r1, [pc, #596]	; (8008a38 <__gethex+0x2dc>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7ff fee9 	bl	80085bc <strncmp>
 80087ea:	b978      	cbnz	r0, 800880c <__gethex+0xb0>
 80087ec:	b946      	cbnz	r6, 8008800 <__gethex+0xa4>
 80087ee:	1c6e      	adds	r6, r5, #1
 80087f0:	4632      	mov	r2, r6
 80087f2:	4615      	mov	r5, r2
 80087f4:	3201      	adds	r2, #1
 80087f6:	7828      	ldrb	r0, [r5, #0]
 80087f8:	f7ff ff9a 	bl	8008730 <__hexdig_fun>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d1f8      	bne.n	80087f2 <__gethex+0x96>
 8008800:	1b73      	subs	r3, r6, r5
 8008802:	009e      	lsls	r6, r3, #2
 8008804:	e004      	b.n	8008810 <__gethex+0xb4>
 8008806:	2400      	movs	r4, #0
 8008808:	4626      	mov	r6, r4
 800880a:	e7e1      	b.n	80087d0 <__gethex+0x74>
 800880c:	2e00      	cmp	r6, #0
 800880e:	d1f7      	bne.n	8008800 <__gethex+0xa4>
 8008810:	782b      	ldrb	r3, [r5, #0]
 8008812:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008816:	2b50      	cmp	r3, #80	; 0x50
 8008818:	d13d      	bne.n	8008896 <__gethex+0x13a>
 800881a:	786b      	ldrb	r3, [r5, #1]
 800881c:	2b2b      	cmp	r3, #43	; 0x2b
 800881e:	d02f      	beq.n	8008880 <__gethex+0x124>
 8008820:	2b2d      	cmp	r3, #45	; 0x2d
 8008822:	d031      	beq.n	8008888 <__gethex+0x12c>
 8008824:	1c69      	adds	r1, r5, #1
 8008826:	f04f 0b00 	mov.w	fp, #0
 800882a:	7808      	ldrb	r0, [r1, #0]
 800882c:	f7ff ff80 	bl	8008730 <__hexdig_fun>
 8008830:	1e42      	subs	r2, r0, #1
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	2a18      	cmp	r2, #24
 8008836:	d82e      	bhi.n	8008896 <__gethex+0x13a>
 8008838:	f1a0 0210 	sub.w	r2, r0, #16
 800883c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008840:	f7ff ff76 	bl	8008730 <__hexdig_fun>
 8008844:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008848:	fa5f fc8c 	uxtb.w	ip, ip
 800884c:	f1bc 0f18 	cmp.w	ip, #24
 8008850:	d91d      	bls.n	800888e <__gethex+0x132>
 8008852:	f1bb 0f00 	cmp.w	fp, #0
 8008856:	d000      	beq.n	800885a <__gethex+0xfe>
 8008858:	4252      	negs	r2, r2
 800885a:	4416      	add	r6, r2
 800885c:	f8ca 1000 	str.w	r1, [sl]
 8008860:	b1dc      	cbz	r4, 800889a <__gethex+0x13e>
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	bf14      	ite	ne
 8008868:	f04f 0800 	movne.w	r8, #0
 800886c:	f04f 0806 	moveq.w	r8, #6
 8008870:	4640      	mov	r0, r8
 8008872:	b005      	add	sp, #20
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008878:	4645      	mov	r5, r8
 800887a:	4626      	mov	r6, r4
 800887c:	2401      	movs	r4, #1
 800887e:	e7c7      	b.n	8008810 <__gethex+0xb4>
 8008880:	f04f 0b00 	mov.w	fp, #0
 8008884:	1ca9      	adds	r1, r5, #2
 8008886:	e7d0      	b.n	800882a <__gethex+0xce>
 8008888:	f04f 0b01 	mov.w	fp, #1
 800888c:	e7fa      	b.n	8008884 <__gethex+0x128>
 800888e:	230a      	movs	r3, #10
 8008890:	fb03 0002 	mla	r0, r3, r2, r0
 8008894:	e7d0      	b.n	8008838 <__gethex+0xdc>
 8008896:	4629      	mov	r1, r5
 8008898:	e7e0      	b.n	800885c <__gethex+0x100>
 800889a:	eba5 0308 	sub.w	r3, r5, r8
 800889e:	3b01      	subs	r3, #1
 80088a0:	4621      	mov	r1, r4
 80088a2:	2b07      	cmp	r3, #7
 80088a4:	dc0a      	bgt.n	80088bc <__gethex+0x160>
 80088a6:	4648      	mov	r0, r9
 80088a8:	f7fe f938 	bl	8006b1c <_Balloc>
 80088ac:	4604      	mov	r4, r0
 80088ae:	b940      	cbnz	r0, 80088c2 <__gethex+0x166>
 80088b0:	4b62      	ldr	r3, [pc, #392]	; (8008a3c <__gethex+0x2e0>)
 80088b2:	4602      	mov	r2, r0
 80088b4:	21e4      	movs	r1, #228	; 0xe4
 80088b6:	4862      	ldr	r0, [pc, #392]	; (8008a40 <__gethex+0x2e4>)
 80088b8:	f7ff feb6 	bl	8008628 <__assert_func>
 80088bc:	3101      	adds	r1, #1
 80088be:	105b      	asrs	r3, r3, #1
 80088c0:	e7ef      	b.n	80088a2 <__gethex+0x146>
 80088c2:	f100 0a14 	add.w	sl, r0, #20
 80088c6:	2300      	movs	r3, #0
 80088c8:	f8cd a004 	str.w	sl, [sp, #4]
 80088cc:	469b      	mov	fp, r3
 80088ce:	45a8      	cmp	r8, r5
 80088d0:	d344      	bcc.n	800895c <__gethex+0x200>
 80088d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088d6:	f848 bb04 	str.w	fp, [r8], #4
 80088da:	eba8 080a 	sub.w	r8, r8, sl
 80088de:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80088e2:	6122      	str	r2, [r4, #16]
 80088e4:	4658      	mov	r0, fp
 80088e6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80088ea:	f7fe fa09 	bl	8006d00 <__hi0bits>
 80088ee:	683d      	ldr	r5, [r7, #0]
 80088f0:	eba8 0800 	sub.w	r8, r8, r0
 80088f4:	45a8      	cmp	r8, r5
 80088f6:	dd59      	ble.n	80089ac <__gethex+0x250>
 80088f8:	eba8 0805 	sub.w	r8, r8, r5
 80088fc:	4641      	mov	r1, r8
 80088fe:	4620      	mov	r0, r4
 8008900:	f7fe fd85 	bl	800740e <__any_on>
 8008904:	4683      	mov	fp, r0
 8008906:	b1b8      	cbz	r0, 8008938 <__gethex+0x1dc>
 8008908:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800890c:	1159      	asrs	r1, r3, #5
 800890e:	f003 021f 	and.w	r2, r3, #31
 8008912:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008916:	f04f 0b01 	mov.w	fp, #1
 800891a:	fa0b f202 	lsl.w	r2, fp, r2
 800891e:	420a      	tst	r2, r1
 8008920:	d00a      	beq.n	8008938 <__gethex+0x1dc>
 8008922:	455b      	cmp	r3, fp
 8008924:	dd06      	ble.n	8008934 <__gethex+0x1d8>
 8008926:	f1a8 0102 	sub.w	r1, r8, #2
 800892a:	4620      	mov	r0, r4
 800892c:	f7fe fd6f 	bl	800740e <__any_on>
 8008930:	2800      	cmp	r0, #0
 8008932:	d138      	bne.n	80089a6 <__gethex+0x24a>
 8008934:	f04f 0b02 	mov.w	fp, #2
 8008938:	4641      	mov	r1, r8
 800893a:	4620      	mov	r0, r4
 800893c:	f7ff fea6 	bl	800868c <rshift>
 8008940:	4446      	add	r6, r8
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	42b3      	cmp	r3, r6
 8008946:	da41      	bge.n	80089cc <__gethex+0x270>
 8008948:	4621      	mov	r1, r4
 800894a:	4648      	mov	r0, r9
 800894c:	f7fe f926 	bl	8006b9c <_Bfree>
 8008950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008952:	2300      	movs	r3, #0
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800895a:	e789      	b.n	8008870 <__gethex+0x114>
 800895c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008960:	2a2e      	cmp	r2, #46	; 0x2e
 8008962:	d014      	beq.n	800898e <__gethex+0x232>
 8008964:	2b20      	cmp	r3, #32
 8008966:	d106      	bne.n	8008976 <__gethex+0x21a>
 8008968:	9b01      	ldr	r3, [sp, #4]
 800896a:	f843 bb04 	str.w	fp, [r3], #4
 800896e:	f04f 0b00 	mov.w	fp, #0
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	465b      	mov	r3, fp
 8008976:	7828      	ldrb	r0, [r5, #0]
 8008978:	9303      	str	r3, [sp, #12]
 800897a:	f7ff fed9 	bl	8008730 <__hexdig_fun>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	f000 000f 	and.w	r0, r0, #15
 8008984:	4098      	lsls	r0, r3
 8008986:	ea4b 0b00 	orr.w	fp, fp, r0
 800898a:	3304      	adds	r3, #4
 800898c:	e79f      	b.n	80088ce <__gethex+0x172>
 800898e:	45a8      	cmp	r8, r5
 8008990:	d8e8      	bhi.n	8008964 <__gethex+0x208>
 8008992:	4929      	ldr	r1, [pc, #164]	; (8008a38 <__gethex+0x2dc>)
 8008994:	9303      	str	r3, [sp, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	4628      	mov	r0, r5
 800899a:	f7ff fe0f 	bl	80085bc <strncmp>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d1df      	bne.n	8008964 <__gethex+0x208>
 80089a4:	e793      	b.n	80088ce <__gethex+0x172>
 80089a6:	f04f 0b03 	mov.w	fp, #3
 80089aa:	e7c5      	b.n	8008938 <__gethex+0x1dc>
 80089ac:	da0b      	bge.n	80089c6 <__gethex+0x26a>
 80089ae:	eba5 0808 	sub.w	r8, r5, r8
 80089b2:	4621      	mov	r1, r4
 80089b4:	4642      	mov	r2, r8
 80089b6:	4648      	mov	r0, r9
 80089b8:	f7fe fb0a 	bl	8006fd0 <__lshift>
 80089bc:	eba6 0608 	sub.w	r6, r6, r8
 80089c0:	4604      	mov	r4, r0
 80089c2:	f100 0a14 	add.w	sl, r0, #20
 80089c6:	f04f 0b00 	mov.w	fp, #0
 80089ca:	e7ba      	b.n	8008942 <__gethex+0x1e6>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	42b3      	cmp	r3, r6
 80089d0:	dd74      	ble.n	8008abc <__gethex+0x360>
 80089d2:	1b9e      	subs	r6, r3, r6
 80089d4:	42b5      	cmp	r5, r6
 80089d6:	dc35      	bgt.n	8008a44 <__gethex+0x2e8>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d023      	beq.n	8008a26 <__gethex+0x2ca>
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d025      	beq.n	8008a2e <__gethex+0x2d2>
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d115      	bne.n	8008a12 <__gethex+0x2b6>
 80089e6:	42b5      	cmp	r5, r6
 80089e8:	d113      	bne.n	8008a12 <__gethex+0x2b6>
 80089ea:	2d01      	cmp	r5, #1
 80089ec:	d10b      	bne.n	8008a06 <__gethex+0x2aa>
 80089ee:	9a02      	ldr	r2, [sp, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	2301      	movs	r3, #1
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	f8ca 3000 	str.w	r3, [sl]
 80089fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fe:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008a02:	601c      	str	r4, [r3, #0]
 8008a04:	e734      	b.n	8008870 <__gethex+0x114>
 8008a06:	1e69      	subs	r1, r5, #1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7fe fd00 	bl	800740e <__any_on>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d1ed      	bne.n	80089ee <__gethex+0x292>
 8008a12:	4621      	mov	r1, r4
 8008a14:	4648      	mov	r0, r9
 8008a16:	f7fe f8c1 	bl	8006b9c <_Bfree>
 8008a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008a24:	e724      	b.n	8008870 <__gethex+0x114>
 8008a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f2      	bne.n	8008a12 <__gethex+0x2b6>
 8008a2c:	e7df      	b.n	80089ee <__gethex+0x292>
 8008a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1dc      	bne.n	80089ee <__gethex+0x292>
 8008a34:	e7ed      	b.n	8008a12 <__gethex+0x2b6>
 8008a36:	bf00      	nop
 8008a38:	080095cc 	.word	0x080095cc
 8008a3c:	08009465 	.word	0x08009465
 8008a40:	08009776 	.word	0x08009776
 8008a44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008a48:	f1bb 0f00 	cmp.w	fp, #0
 8008a4c:	d133      	bne.n	8008ab6 <__gethex+0x35a>
 8008a4e:	f1b8 0f00 	cmp.w	r8, #0
 8008a52:	d004      	beq.n	8008a5e <__gethex+0x302>
 8008a54:	4641      	mov	r1, r8
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7fe fcd9 	bl	800740e <__any_on>
 8008a5c:	4683      	mov	fp, r0
 8008a5e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a62:	2301      	movs	r3, #1
 8008a64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a68:	f008 081f 	and.w	r8, r8, #31
 8008a6c:	fa03 f308 	lsl.w	r3, r3, r8
 8008a70:	4213      	tst	r3, r2
 8008a72:	4631      	mov	r1, r6
 8008a74:	4620      	mov	r0, r4
 8008a76:	bf18      	it	ne
 8008a78:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a7c:	1bad      	subs	r5, r5, r6
 8008a7e:	f7ff fe05 	bl	800868c <rshift>
 8008a82:	687e      	ldr	r6, [r7, #4]
 8008a84:	f04f 0802 	mov.w	r8, #2
 8008a88:	f1bb 0f00 	cmp.w	fp, #0
 8008a8c:	d04a      	beq.n	8008b24 <__gethex+0x3c8>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d016      	beq.n	8008ac2 <__gethex+0x366>
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d018      	beq.n	8008aca <__gethex+0x36e>
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d109      	bne.n	8008ab0 <__gethex+0x354>
 8008a9c:	f01b 0f02 	tst.w	fp, #2
 8008aa0:	d006      	beq.n	8008ab0 <__gethex+0x354>
 8008aa2:	f8da 3000 	ldr.w	r3, [sl]
 8008aa6:	ea4b 0b03 	orr.w	fp, fp, r3
 8008aaa:	f01b 0f01 	tst.w	fp, #1
 8008aae:	d10f      	bne.n	8008ad0 <__gethex+0x374>
 8008ab0:	f048 0810 	orr.w	r8, r8, #16
 8008ab4:	e036      	b.n	8008b24 <__gethex+0x3c8>
 8008ab6:	f04f 0b01 	mov.w	fp, #1
 8008aba:	e7d0      	b.n	8008a5e <__gethex+0x302>
 8008abc:	f04f 0801 	mov.w	r8, #1
 8008ac0:	e7e2      	b.n	8008a88 <__gethex+0x32c>
 8008ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac4:	f1c3 0301 	rsb	r3, r3, #1
 8008ac8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0ef      	beq.n	8008ab0 <__gethex+0x354>
 8008ad0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ad4:	f104 0214 	add.w	r2, r4, #20
 8008ad8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4694      	mov	ip, r2
 8008ae6:	f852 1b04 	ldr.w	r1, [r2], #4
 8008aea:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8008aee:	d01e      	beq.n	8008b2e <__gethex+0x3d2>
 8008af0:	3101      	adds	r1, #1
 8008af2:	f8cc 1000 	str.w	r1, [ip]
 8008af6:	f1b8 0f02 	cmp.w	r8, #2
 8008afa:	f104 0214 	add.w	r2, r4, #20
 8008afe:	d13d      	bne.n	8008b7c <__gethex+0x420>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	d10b      	bne.n	8008b20 <__gethex+0x3c4>
 8008b08:	1169      	asrs	r1, r5, #5
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f005 051f 	and.w	r5, r5, #31
 8008b10:	fa03 f505 	lsl.w	r5, r3, r5
 8008b14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b18:	421d      	tst	r5, r3
 8008b1a:	bf18      	it	ne
 8008b1c:	f04f 0801 	movne.w	r8, #1
 8008b20:	f048 0820 	orr.w	r8, r8, #32
 8008b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b26:	601c      	str	r4, [r3, #0]
 8008b28:	9b02      	ldr	r3, [sp, #8]
 8008b2a:	601e      	str	r6, [r3, #0]
 8008b2c:	e6a0      	b.n	8008870 <__gethex+0x114>
 8008b2e:	4290      	cmp	r0, r2
 8008b30:	f842 3c04 	str.w	r3, [r2, #-4]
 8008b34:	d8d6      	bhi.n	8008ae4 <__gethex+0x388>
 8008b36:	68a2      	ldr	r2, [r4, #8]
 8008b38:	4593      	cmp	fp, r2
 8008b3a:	db17      	blt.n	8008b6c <__gethex+0x410>
 8008b3c:	6861      	ldr	r1, [r4, #4]
 8008b3e:	4648      	mov	r0, r9
 8008b40:	3101      	adds	r1, #1
 8008b42:	f7fd ffeb 	bl	8006b1c <_Balloc>
 8008b46:	4682      	mov	sl, r0
 8008b48:	b918      	cbnz	r0, 8008b52 <__gethex+0x3f6>
 8008b4a:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <__gethex+0x45c>)
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	2184      	movs	r1, #132	; 0x84
 8008b50:	e6b1      	b.n	80088b6 <__gethex+0x15a>
 8008b52:	6922      	ldr	r2, [r4, #16]
 8008b54:	3202      	adds	r2, #2
 8008b56:	f104 010c 	add.w	r1, r4, #12
 8008b5a:	0092      	lsls	r2, r2, #2
 8008b5c:	300c      	adds	r0, #12
 8008b5e:	f7ff fd4f 	bl	8008600 <memcpy>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4648      	mov	r0, r9
 8008b66:	f7fe f819 	bl	8006b9c <_Bfree>
 8008b6a:	4654      	mov	r4, sl
 8008b6c:	6922      	ldr	r2, [r4, #16]
 8008b6e:	1c51      	adds	r1, r2, #1
 8008b70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b74:	6121      	str	r1, [r4, #16]
 8008b76:	2101      	movs	r1, #1
 8008b78:	6151      	str	r1, [r2, #20]
 8008b7a:	e7bc      	b.n	8008af6 <__gethex+0x39a>
 8008b7c:	6921      	ldr	r1, [r4, #16]
 8008b7e:	4559      	cmp	r1, fp
 8008b80:	dd0b      	ble.n	8008b9a <__gethex+0x43e>
 8008b82:	2101      	movs	r1, #1
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7ff fd81 	bl	800868c <rshift>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3601      	adds	r6, #1
 8008b8e:	42b3      	cmp	r3, r6
 8008b90:	f6ff aeda 	blt.w	8008948 <__gethex+0x1ec>
 8008b94:	f04f 0801 	mov.w	r8, #1
 8008b98:	e7c2      	b.n	8008b20 <__gethex+0x3c4>
 8008b9a:	f015 051f 	ands.w	r5, r5, #31
 8008b9e:	d0f9      	beq.n	8008b94 <__gethex+0x438>
 8008ba0:	9b01      	ldr	r3, [sp, #4]
 8008ba2:	441a      	add	r2, r3
 8008ba4:	f1c5 0520 	rsb	r5, r5, #32
 8008ba8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008bac:	f7fe f8a8 	bl	8006d00 <__hi0bits>
 8008bb0:	42a8      	cmp	r0, r5
 8008bb2:	dbe6      	blt.n	8008b82 <__gethex+0x426>
 8008bb4:	e7ee      	b.n	8008b94 <__gethex+0x438>
 8008bb6:	bf00      	nop
 8008bb8:	08009465 	.word	0x08009465

08008bbc <L_shift>:
 8008bbc:	f1c2 0208 	rsb	r2, r2, #8
 8008bc0:	0092      	lsls	r2, r2, #2
 8008bc2:	b570      	push	{r4, r5, r6, lr}
 8008bc4:	f1c2 0620 	rsb	r6, r2, #32
 8008bc8:	6843      	ldr	r3, [r0, #4]
 8008bca:	6804      	ldr	r4, [r0, #0]
 8008bcc:	fa03 f506 	lsl.w	r5, r3, r6
 8008bd0:	432c      	orrs	r4, r5
 8008bd2:	40d3      	lsrs	r3, r2
 8008bd4:	6004      	str	r4, [r0, #0]
 8008bd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bda:	4288      	cmp	r0, r1
 8008bdc:	d3f4      	bcc.n	8008bc8 <L_shift+0xc>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}

08008be0 <__match>:
 8008be0:	b530      	push	{r4, r5, lr}
 8008be2:	6803      	ldr	r3, [r0, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bea:	b914      	cbnz	r4, 8008bf2 <__match+0x12>
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	2001      	movs	r0, #1
 8008bf0:	bd30      	pop	{r4, r5, pc}
 8008bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bfa:	2d19      	cmp	r5, #25
 8008bfc:	bf98      	it	ls
 8008bfe:	3220      	addls	r2, #32
 8008c00:	42a2      	cmp	r2, r4
 8008c02:	d0f0      	beq.n	8008be6 <__match+0x6>
 8008c04:	2000      	movs	r0, #0
 8008c06:	e7f3      	b.n	8008bf0 <__match+0x10>

08008c08 <__hexnan>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	680b      	ldr	r3, [r1, #0]
 8008c0e:	6801      	ldr	r1, [r0, #0]
 8008c10:	115e      	asrs	r6, r3, #5
 8008c12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c16:	f013 031f 	ands.w	r3, r3, #31
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	bf18      	it	ne
 8008c1e:	3604      	addne	r6, #4
 8008c20:	2500      	movs	r5, #0
 8008c22:	1f37      	subs	r7, r6, #4
 8008c24:	4682      	mov	sl, r0
 8008c26:	4690      	mov	r8, r2
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c2e:	46b9      	mov	r9, r7
 8008c30:	463c      	mov	r4, r7
 8008c32:	9502      	str	r5, [sp, #8]
 8008c34:	46ab      	mov	fp, r5
 8008c36:	784a      	ldrb	r2, [r1, #1]
 8008c38:	1c4b      	adds	r3, r1, #1
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	b342      	cbz	r2, 8008c90 <__hexnan+0x88>
 8008c3e:	4610      	mov	r0, r2
 8008c40:	9105      	str	r1, [sp, #20]
 8008c42:	9204      	str	r2, [sp, #16]
 8008c44:	f7ff fd74 	bl	8008730 <__hexdig_fun>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d14f      	bne.n	8008cec <__hexnan+0xe4>
 8008c4c:	9a04      	ldr	r2, [sp, #16]
 8008c4e:	9905      	ldr	r1, [sp, #20]
 8008c50:	2a20      	cmp	r2, #32
 8008c52:	d818      	bhi.n	8008c86 <__hexnan+0x7e>
 8008c54:	9b02      	ldr	r3, [sp, #8]
 8008c56:	459b      	cmp	fp, r3
 8008c58:	dd13      	ble.n	8008c82 <__hexnan+0x7a>
 8008c5a:	454c      	cmp	r4, r9
 8008c5c:	d206      	bcs.n	8008c6c <__hexnan+0x64>
 8008c5e:	2d07      	cmp	r5, #7
 8008c60:	dc04      	bgt.n	8008c6c <__hexnan+0x64>
 8008c62:	462a      	mov	r2, r5
 8008c64:	4649      	mov	r1, r9
 8008c66:	4620      	mov	r0, r4
 8008c68:	f7ff ffa8 	bl	8008bbc <L_shift>
 8008c6c:	4544      	cmp	r4, r8
 8008c6e:	d950      	bls.n	8008d12 <__hexnan+0x10a>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f1a4 0904 	sub.w	r9, r4, #4
 8008c76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c7a:	f8cd b008 	str.w	fp, [sp, #8]
 8008c7e:	464c      	mov	r4, r9
 8008c80:	461d      	mov	r5, r3
 8008c82:	9903      	ldr	r1, [sp, #12]
 8008c84:	e7d7      	b.n	8008c36 <__hexnan+0x2e>
 8008c86:	2a29      	cmp	r2, #41	; 0x29
 8008c88:	d155      	bne.n	8008d36 <__hexnan+0x12e>
 8008c8a:	3102      	adds	r1, #2
 8008c8c:	f8ca 1000 	str.w	r1, [sl]
 8008c90:	f1bb 0f00 	cmp.w	fp, #0
 8008c94:	d04f      	beq.n	8008d36 <__hexnan+0x12e>
 8008c96:	454c      	cmp	r4, r9
 8008c98:	d206      	bcs.n	8008ca8 <__hexnan+0xa0>
 8008c9a:	2d07      	cmp	r5, #7
 8008c9c:	dc04      	bgt.n	8008ca8 <__hexnan+0xa0>
 8008c9e:	462a      	mov	r2, r5
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f7ff ff8a 	bl	8008bbc <L_shift>
 8008ca8:	4544      	cmp	r4, r8
 8008caa:	d934      	bls.n	8008d16 <__hexnan+0x10e>
 8008cac:	f1a8 0204 	sub.w	r2, r8, #4
 8008cb0:	4623      	mov	r3, r4
 8008cb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cba:	429f      	cmp	r7, r3
 8008cbc:	d2f9      	bcs.n	8008cb2 <__hexnan+0xaa>
 8008cbe:	1b3b      	subs	r3, r7, r4
 8008cc0:	f023 0303 	bic.w	r3, r3, #3
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	3e03      	subs	r6, #3
 8008cc8:	3401      	adds	r4, #1
 8008cca:	42a6      	cmp	r6, r4
 8008ccc:	bf38      	it	cc
 8008cce:	2304      	movcc	r3, #4
 8008cd0:	4443      	add	r3, r8
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f843 2b04 	str.w	r2, [r3], #4
 8008cd8:	429f      	cmp	r7, r3
 8008cda:	d2fb      	bcs.n	8008cd4 <__hexnan+0xcc>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	b91b      	cbnz	r3, 8008ce8 <__hexnan+0xe0>
 8008ce0:	4547      	cmp	r7, r8
 8008ce2:	d126      	bne.n	8008d32 <__hexnan+0x12a>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	2005      	movs	r0, #5
 8008cea:	e025      	b.n	8008d38 <__hexnan+0x130>
 8008cec:	3501      	adds	r5, #1
 8008cee:	2d08      	cmp	r5, #8
 8008cf0:	f10b 0b01 	add.w	fp, fp, #1
 8008cf4:	dd06      	ble.n	8008d04 <__hexnan+0xfc>
 8008cf6:	4544      	cmp	r4, r8
 8008cf8:	d9c3      	bls.n	8008c82 <__hexnan+0x7a>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d00:	2501      	movs	r5, #1
 8008d02:	3c04      	subs	r4, #4
 8008d04:	6822      	ldr	r2, [r4, #0]
 8008d06:	f000 000f 	and.w	r0, r0, #15
 8008d0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d0e:	6020      	str	r0, [r4, #0]
 8008d10:	e7b7      	b.n	8008c82 <__hexnan+0x7a>
 8008d12:	2508      	movs	r5, #8
 8008d14:	e7b5      	b.n	8008c82 <__hexnan+0x7a>
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0df      	beq.n	8008cdc <__hexnan+0xd4>
 8008d1c:	f1c3 0320 	rsb	r3, r3, #32
 8008d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d24:	40da      	lsrs	r2, r3
 8008d26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d30:	e7d4      	b.n	8008cdc <__hexnan+0xd4>
 8008d32:	3f04      	subs	r7, #4
 8008d34:	e7d2      	b.n	8008cdc <__hexnan+0xd4>
 8008d36:	2004      	movs	r0, #4
 8008d38:	b007      	add	sp, #28
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d3e <__ascii_mbtowc>:
 8008d3e:	b082      	sub	sp, #8
 8008d40:	b901      	cbnz	r1, 8008d44 <__ascii_mbtowc+0x6>
 8008d42:	a901      	add	r1, sp, #4
 8008d44:	b142      	cbz	r2, 8008d58 <__ascii_mbtowc+0x1a>
 8008d46:	b14b      	cbz	r3, 8008d5c <__ascii_mbtowc+0x1e>
 8008d48:	7813      	ldrb	r3, [r2, #0]
 8008d4a:	600b      	str	r3, [r1, #0]
 8008d4c:	7812      	ldrb	r2, [r2, #0]
 8008d4e:	1e10      	subs	r0, r2, #0
 8008d50:	bf18      	it	ne
 8008d52:	2001      	movne	r0, #1
 8008d54:	b002      	add	sp, #8
 8008d56:	4770      	bx	lr
 8008d58:	4610      	mov	r0, r2
 8008d5a:	e7fb      	b.n	8008d54 <__ascii_mbtowc+0x16>
 8008d5c:	f06f 0001 	mvn.w	r0, #1
 8008d60:	e7f8      	b.n	8008d54 <__ascii_mbtowc+0x16>

08008d62 <_realloc_r>:
 8008d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d66:	4680      	mov	r8, r0
 8008d68:	4614      	mov	r4, r2
 8008d6a:	460e      	mov	r6, r1
 8008d6c:	b921      	cbnz	r1, 8008d78 <_realloc_r+0x16>
 8008d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d72:	4611      	mov	r1, r2
 8008d74:	f7fd be46 	b.w	8006a04 <_malloc_r>
 8008d78:	b92a      	cbnz	r2, 8008d86 <_realloc_r+0x24>
 8008d7a:	f7fd fdd1 	bl	8006920 <_free_r>
 8008d7e:	4625      	mov	r5, r4
 8008d80:	4628      	mov	r0, r5
 8008d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d86:	f000 f842 	bl	8008e0e <_malloc_usable_size_r>
 8008d8a:	4284      	cmp	r4, r0
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	d802      	bhi.n	8008d96 <_realloc_r+0x34>
 8008d90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d94:	d812      	bhi.n	8008dbc <_realloc_r+0x5a>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4640      	mov	r0, r8
 8008d9a:	f7fd fe33 	bl	8006a04 <_malloc_r>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d0ed      	beq.n	8008d80 <_realloc_r+0x1e>
 8008da4:	42bc      	cmp	r4, r7
 8008da6:	4622      	mov	r2, r4
 8008da8:	4631      	mov	r1, r6
 8008daa:	bf28      	it	cs
 8008dac:	463a      	movcs	r2, r7
 8008dae:	f7ff fc27 	bl	8008600 <memcpy>
 8008db2:	4631      	mov	r1, r6
 8008db4:	4640      	mov	r0, r8
 8008db6:	f7fd fdb3 	bl	8006920 <_free_r>
 8008dba:	e7e1      	b.n	8008d80 <_realloc_r+0x1e>
 8008dbc:	4635      	mov	r5, r6
 8008dbe:	e7df      	b.n	8008d80 <_realloc_r+0x1e>

08008dc0 <__ascii_wctomb>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	b141      	cbz	r1, 8008dd8 <__ascii_wctomb+0x18>
 8008dc6:	2aff      	cmp	r2, #255	; 0xff
 8008dc8:	d904      	bls.n	8008dd4 <__ascii_wctomb+0x14>
 8008dca:	228a      	movs	r2, #138	; 0x8a
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dd2:	4770      	bx	lr
 8008dd4:	700a      	strb	r2, [r1, #0]
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	4770      	bx	lr
	...

08008ddc <fiprintf>:
 8008ddc:	b40e      	push	{r1, r2, r3}
 8008dde:	b503      	push	{r0, r1, lr}
 8008de0:	4601      	mov	r1, r0
 8008de2:	ab03      	add	r3, sp, #12
 8008de4:	4805      	ldr	r0, [pc, #20]	; (8008dfc <fiprintf+0x20>)
 8008de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dea:	6800      	ldr	r0, [r0, #0]
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	f000 f83d 	bl	8008e6c <_vfiprintf_r>
 8008df2:	b002      	add	sp, #8
 8008df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df8:	b003      	add	sp, #12
 8008dfa:	4770      	bx	lr
 8008dfc:	20000068 	.word	0x20000068

08008e00 <abort>:
 8008e00:	b508      	push	{r3, lr}
 8008e02:	2006      	movs	r0, #6
 8008e04:	f000 fa0a 	bl	800921c <raise>
 8008e08:	2001      	movs	r0, #1
 8008e0a:	f7f8 ff7a 	bl	8001d02 <_exit>

08008e0e <_malloc_usable_size_r>:
 8008e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e12:	1f18      	subs	r0, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	bfbc      	itt	lt
 8008e18:	580b      	ldrlt	r3, [r1, r0]
 8008e1a:	18c0      	addlt	r0, r0, r3
 8008e1c:	4770      	bx	lr

08008e1e <__sfputc_r>:
 8008e1e:	6893      	ldr	r3, [r2, #8]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	b410      	push	{r4}
 8008e26:	6093      	str	r3, [r2, #8]
 8008e28:	da07      	bge.n	8008e3a <__sfputc_r+0x1c>
 8008e2a:	6994      	ldr	r4, [r2, #24]
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	db01      	blt.n	8008e34 <__sfputc_r+0x16>
 8008e30:	290a      	cmp	r1, #10
 8008e32:	d102      	bne.n	8008e3a <__sfputc_r+0x1c>
 8008e34:	bc10      	pop	{r4}
 8008e36:	f000 b933 	b.w	80090a0 <__swbuf_r>
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	1c58      	adds	r0, r3, #1
 8008e3e:	6010      	str	r0, [r2, #0]
 8008e40:	7019      	strb	r1, [r3, #0]
 8008e42:	4608      	mov	r0, r1
 8008e44:	bc10      	pop	{r4}
 8008e46:	4770      	bx	lr

08008e48 <__sfputs_r>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	4614      	mov	r4, r2
 8008e50:	18d5      	adds	r5, r2, r3
 8008e52:	42ac      	cmp	r4, r5
 8008e54:	d101      	bne.n	8008e5a <__sfputs_r+0x12>
 8008e56:	2000      	movs	r0, #0
 8008e58:	e007      	b.n	8008e6a <__sfputs_r+0x22>
 8008e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5e:	463a      	mov	r2, r7
 8008e60:	4630      	mov	r0, r6
 8008e62:	f7ff ffdc 	bl	8008e1e <__sfputc_r>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	d1f3      	bne.n	8008e52 <__sfputs_r+0xa>
 8008e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e6c <_vfiprintf_r>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	460d      	mov	r5, r1
 8008e72:	b09d      	sub	sp, #116	; 0x74
 8008e74:	4614      	mov	r4, r2
 8008e76:	4698      	mov	r8, r3
 8008e78:	4606      	mov	r6, r0
 8008e7a:	b118      	cbz	r0, 8008e84 <_vfiprintf_r+0x18>
 8008e7c:	6a03      	ldr	r3, [r0, #32]
 8008e7e:	b90b      	cbnz	r3, 8008e84 <_vfiprintf_r+0x18>
 8008e80:	f7fc fdcc 	bl	8005a1c <__sinit>
 8008e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e86:	07d9      	lsls	r1, r3, #31
 8008e88:	d405      	bmi.n	8008e96 <_vfiprintf_r+0x2a>
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	059a      	lsls	r2, r3, #22
 8008e8e:	d402      	bmi.n	8008e96 <_vfiprintf_r+0x2a>
 8008e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e92:	f7fc fed9 	bl	8005c48 <__retarget_lock_acquire_recursive>
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	071b      	lsls	r3, r3, #28
 8008e9a:	d501      	bpl.n	8008ea0 <_vfiprintf_r+0x34>
 8008e9c:	692b      	ldr	r3, [r5, #16]
 8008e9e:	b99b      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x5c>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f000 f93a 	bl	800911c <__swsetup_r>
 8008ea8:	b170      	cbz	r0, 8008ec8 <_vfiprintf_r+0x5c>
 8008eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eac:	07dc      	lsls	r4, r3, #31
 8008eae:	d504      	bpl.n	8008eba <_vfiprintf_r+0x4e>
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb4:	b01d      	add	sp, #116	; 0x74
 8008eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	0598      	lsls	r0, r3, #22
 8008ebe:	d4f7      	bmi.n	8008eb0 <_vfiprintf_r+0x44>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7fc fec2 	bl	8005c4a <__retarget_lock_release_recursive>
 8008ec6:	e7f3      	b.n	8008eb0 <_vfiprintf_r+0x44>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ecc:	2320      	movs	r3, #32
 8008ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed6:	2330      	movs	r3, #48	; 0x30
 8008ed8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800908c <_vfiprintf_r+0x220>
 8008edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ee0:	f04f 0901 	mov.w	r9, #1
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	469a      	mov	sl, r3
 8008ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eec:	b10a      	cbz	r2, 8008ef2 <_vfiprintf_r+0x86>
 8008eee:	2a25      	cmp	r2, #37	; 0x25
 8008ef0:	d1f9      	bne.n	8008ee6 <_vfiprintf_r+0x7a>
 8008ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef6:	d00b      	beq.n	8008f10 <_vfiprintf_r+0xa4>
 8008ef8:	465b      	mov	r3, fp
 8008efa:	4622      	mov	r2, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ffa2 	bl	8008e48 <__sfputs_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	f000 80a9 	beq.w	800905c <_vfiprintf_r+0x1f0>
 8008f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f0c:	445a      	add	r2, fp
 8008f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80a1 	beq.w	800905c <_vfiprintf_r+0x1f0>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f24:	f10a 0a01 	add.w	sl, sl, #1
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f30:	931a      	str	r3, [sp, #104]	; 0x68
 8008f32:	4654      	mov	r4, sl
 8008f34:	2205      	movs	r2, #5
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	4854      	ldr	r0, [pc, #336]	; (800908c <_vfiprintf_r+0x220>)
 8008f3c:	f7f7 f950 	bl	80001e0 <memchr>
 8008f40:	9a04      	ldr	r2, [sp, #16]
 8008f42:	b9d8      	cbnz	r0, 8008f7c <_vfiprintf_r+0x110>
 8008f44:	06d1      	lsls	r1, r2, #27
 8008f46:	bf44      	itt	mi
 8008f48:	2320      	movmi	r3, #32
 8008f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4e:	0713      	lsls	r3, r2, #28
 8008f50:	bf44      	itt	mi
 8008f52:	232b      	movmi	r3, #43	; 0x2b
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f58:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5e:	d015      	beq.n	8008f8c <_vfiprintf_r+0x120>
 8008f60:	9a07      	ldr	r2, [sp, #28]
 8008f62:	4654      	mov	r4, sl
 8008f64:	2000      	movs	r0, #0
 8008f66:	f04f 0c0a 	mov.w	ip, #10
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f70:	3b30      	subs	r3, #48	; 0x30
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d94d      	bls.n	8009012 <_vfiprintf_r+0x1a6>
 8008f76:	b1b0      	cbz	r0, 8008fa6 <_vfiprintf_r+0x13a>
 8008f78:	9207      	str	r2, [sp, #28]
 8008f7a:	e014      	b.n	8008fa6 <_vfiprintf_r+0x13a>
 8008f7c:	eba0 0308 	sub.w	r3, r0, r8
 8008f80:	fa09 f303 	lsl.w	r3, r9, r3
 8008f84:	4313      	orrs	r3, r2
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	46a2      	mov	sl, r4
 8008f8a:	e7d2      	b.n	8008f32 <_vfiprintf_r+0xc6>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d19      	adds	r1, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9103      	str	r1, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfbb      	ittet	lt
 8008f98:	425b      	neglt	r3, r3
 8008f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9e:	9307      	strge	r3, [sp, #28]
 8008fa0:	9307      	strlt	r3, [sp, #28]
 8008fa2:	bfb8      	it	lt
 8008fa4:	9204      	strlt	r2, [sp, #16]
 8008fa6:	7823      	ldrb	r3, [r4, #0]
 8008fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8008faa:	d10c      	bne.n	8008fc6 <_vfiprintf_r+0x15a>
 8008fac:	7863      	ldrb	r3, [r4, #1]
 8008fae:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb0:	d134      	bne.n	800901c <_vfiprintf_r+0x1b0>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	9203      	str	r2, [sp, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bfb8      	it	lt
 8008fbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fc2:	3402      	adds	r4, #2
 8008fc4:	9305      	str	r3, [sp, #20]
 8008fc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009090 <_vfiprintf_r+0x224>
 8008fca:	7821      	ldrb	r1, [r4, #0]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f7f7 f906 	bl	80001e0 <memchr>
 8008fd4:	b138      	cbz	r0, 8008fe6 <_vfiprintf_r+0x17a>
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	eba0 000a 	sub.w	r0, r0, sl
 8008fdc:	2240      	movs	r2, #64	; 0x40
 8008fde:	4082      	lsls	r2, r0
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	3401      	adds	r4, #1
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fea:	482a      	ldr	r0, [pc, #168]	; (8009094 <_vfiprintf_r+0x228>)
 8008fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ff0:	2206      	movs	r2, #6
 8008ff2:	f7f7 f8f5 	bl	80001e0 <memchr>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d03f      	beq.n	800907a <_vfiprintf_r+0x20e>
 8008ffa:	4b27      	ldr	r3, [pc, #156]	; (8009098 <_vfiprintf_r+0x22c>)
 8008ffc:	bb1b      	cbnz	r3, 8009046 <_vfiprintf_r+0x1da>
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	3307      	adds	r3, #7
 8009002:	f023 0307 	bic.w	r3, r3, #7
 8009006:	3308      	adds	r3, #8
 8009008:	9303      	str	r3, [sp, #12]
 800900a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900c:	443b      	add	r3, r7
 800900e:	9309      	str	r3, [sp, #36]	; 0x24
 8009010:	e768      	b.n	8008ee4 <_vfiprintf_r+0x78>
 8009012:	fb0c 3202 	mla	r2, ip, r2, r3
 8009016:	460c      	mov	r4, r1
 8009018:	2001      	movs	r0, #1
 800901a:	e7a6      	b.n	8008f6a <_vfiprintf_r+0xfe>
 800901c:	2300      	movs	r3, #0
 800901e:	3401      	adds	r4, #1
 8009020:	9305      	str	r3, [sp, #20]
 8009022:	4619      	mov	r1, r3
 8009024:	f04f 0c0a 	mov.w	ip, #10
 8009028:	4620      	mov	r0, r4
 800902a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902e:	3a30      	subs	r2, #48	; 0x30
 8009030:	2a09      	cmp	r2, #9
 8009032:	d903      	bls.n	800903c <_vfiprintf_r+0x1d0>
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0c6      	beq.n	8008fc6 <_vfiprintf_r+0x15a>
 8009038:	9105      	str	r1, [sp, #20]
 800903a:	e7c4      	b.n	8008fc6 <_vfiprintf_r+0x15a>
 800903c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009040:	4604      	mov	r4, r0
 8009042:	2301      	movs	r3, #1
 8009044:	e7f0      	b.n	8009028 <_vfiprintf_r+0x1bc>
 8009046:	ab03      	add	r3, sp, #12
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	462a      	mov	r2, r5
 800904c:	4b13      	ldr	r3, [pc, #76]	; (800909c <_vfiprintf_r+0x230>)
 800904e:	a904      	add	r1, sp, #16
 8009050:	4630      	mov	r0, r6
 8009052:	f7fb fea1 	bl	8004d98 <_printf_float>
 8009056:	4607      	mov	r7, r0
 8009058:	1c78      	adds	r0, r7, #1
 800905a:	d1d6      	bne.n	800900a <_vfiprintf_r+0x19e>
 800905c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905e:	07d9      	lsls	r1, r3, #31
 8009060:	d405      	bmi.n	800906e <_vfiprintf_r+0x202>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	059a      	lsls	r2, r3, #22
 8009066:	d402      	bmi.n	800906e <_vfiprintf_r+0x202>
 8009068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800906a:	f7fc fdee 	bl	8005c4a <__retarget_lock_release_recursive>
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	065b      	lsls	r3, r3, #25
 8009072:	f53f af1d 	bmi.w	8008eb0 <_vfiprintf_r+0x44>
 8009076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009078:	e71c      	b.n	8008eb4 <_vfiprintf_r+0x48>
 800907a:	ab03      	add	r3, sp, #12
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	462a      	mov	r2, r5
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <_vfiprintf_r+0x230>)
 8009082:	a904      	add	r1, sp, #16
 8009084:	4630      	mov	r0, r6
 8009086:	f7fc f921 	bl	80052cc <_printf_i>
 800908a:	e7e4      	b.n	8009056 <_vfiprintf_r+0x1ea>
 800908c:	08009721 	.word	0x08009721
 8009090:	08009727 	.word	0x08009727
 8009094:	0800972b 	.word	0x0800972b
 8009098:	08004d99 	.word	0x08004d99
 800909c:	08008e49 	.word	0x08008e49

080090a0 <__swbuf_r>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	460e      	mov	r6, r1
 80090a4:	4614      	mov	r4, r2
 80090a6:	4605      	mov	r5, r0
 80090a8:	b118      	cbz	r0, 80090b2 <__swbuf_r+0x12>
 80090aa:	6a03      	ldr	r3, [r0, #32]
 80090ac:	b90b      	cbnz	r3, 80090b2 <__swbuf_r+0x12>
 80090ae:	f7fc fcb5 	bl	8005a1c <__sinit>
 80090b2:	69a3      	ldr	r3, [r4, #24]
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	071a      	lsls	r2, r3, #28
 80090ba:	d525      	bpl.n	8009108 <__swbuf_r+0x68>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b31b      	cbz	r3, 8009108 <__swbuf_r+0x68>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	6922      	ldr	r2, [r4, #16]
 80090c4:	1a98      	subs	r0, r3, r2
 80090c6:	6963      	ldr	r3, [r4, #20]
 80090c8:	b2f6      	uxtb	r6, r6
 80090ca:	4283      	cmp	r3, r0
 80090cc:	4637      	mov	r7, r6
 80090ce:	dc04      	bgt.n	80090da <__swbuf_r+0x3a>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7ff fa30 	bl	8008538 <_fflush_r>
 80090d8:	b9e0      	cbnz	r0, 8009114 <__swbuf_r+0x74>
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	3b01      	subs	r3, #1
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	701e      	strb	r6, [r3, #0]
 80090e8:	6962      	ldr	r2, [r4, #20]
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d004      	beq.n	80090fa <__swbuf_r+0x5a>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	07db      	lsls	r3, r3, #31
 80090f4:	d506      	bpl.n	8009104 <__swbuf_r+0x64>
 80090f6:	2e0a      	cmp	r6, #10
 80090f8:	d104      	bne.n	8009104 <__swbuf_r+0x64>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff fa1b 	bl	8008538 <_fflush_r>
 8009102:	b938      	cbnz	r0, 8009114 <__swbuf_r+0x74>
 8009104:	4638      	mov	r0, r7
 8009106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f806 	bl	800911c <__swsetup_r>
 8009110:	2800      	cmp	r0, #0
 8009112:	d0d5      	beq.n	80090c0 <__swbuf_r+0x20>
 8009114:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009118:	e7f4      	b.n	8009104 <__swbuf_r+0x64>
	...

0800911c <__swsetup_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4b2a      	ldr	r3, [pc, #168]	; (80091c8 <__swsetup_r+0xac>)
 8009120:	4605      	mov	r5, r0
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	460c      	mov	r4, r1
 8009126:	b118      	cbz	r0, 8009130 <__swsetup_r+0x14>
 8009128:	6a03      	ldr	r3, [r0, #32]
 800912a:	b90b      	cbnz	r3, 8009130 <__swsetup_r+0x14>
 800912c:	f7fc fc76 	bl	8005a1c <__sinit>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009136:	0718      	lsls	r0, r3, #28
 8009138:	d422      	bmi.n	8009180 <__swsetup_r+0x64>
 800913a:	06d9      	lsls	r1, r3, #27
 800913c:	d407      	bmi.n	800914e <__swsetup_r+0x32>
 800913e:	2309      	movs	r3, #9
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009146:	81a3      	strh	r3, [r4, #12]
 8009148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800914c:	e034      	b.n	80091b8 <__swsetup_r+0x9c>
 800914e:	0758      	lsls	r0, r3, #29
 8009150:	d512      	bpl.n	8009178 <__swsetup_r+0x5c>
 8009152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009154:	b141      	cbz	r1, 8009168 <__swsetup_r+0x4c>
 8009156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800915a:	4299      	cmp	r1, r3
 800915c:	d002      	beq.n	8009164 <__swsetup_r+0x48>
 800915e:	4628      	mov	r0, r5
 8009160:	f7fd fbde 	bl	8006920 <_free_r>
 8009164:	2300      	movs	r3, #0
 8009166:	6363      	str	r3, [r4, #52]	; 0x34
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	2300      	movs	r3, #0
 8009172:	6063      	str	r3, [r4, #4]
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f043 0308 	orr.w	r3, r3, #8
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	b94b      	cbnz	r3, 8009198 <__swsetup_r+0x7c>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800918a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918e:	d003      	beq.n	8009198 <__swsetup_r+0x7c>
 8009190:	4621      	mov	r1, r4
 8009192:	4628      	mov	r0, r5
 8009194:	f000 f884 	bl	80092a0 <__smakebuf_r>
 8009198:	89a0      	ldrh	r0, [r4, #12]
 800919a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800919e:	f010 0301 	ands.w	r3, r0, #1
 80091a2:	d00a      	beq.n	80091ba <__swsetup_r+0x9e>
 80091a4:	2300      	movs	r3, #0
 80091a6:	60a3      	str	r3, [r4, #8]
 80091a8:	6963      	ldr	r3, [r4, #20]
 80091aa:	425b      	negs	r3, r3
 80091ac:	61a3      	str	r3, [r4, #24]
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	b943      	cbnz	r3, 80091c4 <__swsetup_r+0xa8>
 80091b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091b6:	d1c4      	bne.n	8009142 <__swsetup_r+0x26>
 80091b8:	bd38      	pop	{r3, r4, r5, pc}
 80091ba:	0781      	lsls	r1, r0, #30
 80091bc:	bf58      	it	pl
 80091be:	6963      	ldrpl	r3, [r4, #20]
 80091c0:	60a3      	str	r3, [r4, #8]
 80091c2:	e7f4      	b.n	80091ae <__swsetup_r+0x92>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e7f7      	b.n	80091b8 <__swsetup_r+0x9c>
 80091c8:	20000068 	.word	0x20000068

080091cc <_raise_r>:
 80091cc:	291f      	cmp	r1, #31
 80091ce:	b538      	push	{r3, r4, r5, lr}
 80091d0:	4604      	mov	r4, r0
 80091d2:	460d      	mov	r5, r1
 80091d4:	d904      	bls.n	80091e0 <_raise_r+0x14>
 80091d6:	2316      	movs	r3, #22
 80091d8:	6003      	str	r3, [r0, #0]
 80091da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80091e2:	b112      	cbz	r2, 80091ea <_raise_r+0x1e>
 80091e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091e8:	b94b      	cbnz	r3, 80091fe <_raise_r+0x32>
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 f830 	bl	8009250 <_getpid_r>
 80091f0:	462a      	mov	r2, r5
 80091f2:	4601      	mov	r1, r0
 80091f4:	4620      	mov	r0, r4
 80091f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091fa:	f000 b817 	b.w	800922c <_kill_r>
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d00a      	beq.n	8009218 <_raise_r+0x4c>
 8009202:	1c59      	adds	r1, r3, #1
 8009204:	d103      	bne.n	800920e <_raise_r+0x42>
 8009206:	2316      	movs	r3, #22
 8009208:	6003      	str	r3, [r0, #0]
 800920a:	2001      	movs	r0, #1
 800920c:	e7e7      	b.n	80091de <_raise_r+0x12>
 800920e:	2400      	movs	r4, #0
 8009210:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009214:	4628      	mov	r0, r5
 8009216:	4798      	blx	r3
 8009218:	2000      	movs	r0, #0
 800921a:	e7e0      	b.n	80091de <_raise_r+0x12>

0800921c <raise>:
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <raise+0xc>)
 800921e:	4601      	mov	r1, r0
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f7ff bfd3 	b.w	80091cc <_raise_r>
 8009226:	bf00      	nop
 8009228:	20000068 	.word	0x20000068

0800922c <_kill_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d07      	ldr	r5, [pc, #28]	; (800924c <_kill_r+0x20>)
 8009230:	2300      	movs	r3, #0
 8009232:	4604      	mov	r4, r0
 8009234:	4608      	mov	r0, r1
 8009236:	4611      	mov	r1, r2
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	f7f8 fd52 	bl	8001ce2 <_kill>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	d102      	bne.n	8009248 <_kill_r+0x1c>
 8009242:	682b      	ldr	r3, [r5, #0]
 8009244:	b103      	cbz	r3, 8009248 <_kill_r+0x1c>
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	bf00      	nop
 800924c:	200004d8 	.word	0x200004d8

08009250 <_getpid_r>:
 8009250:	f7f8 bd40 	b.w	8001cd4 <_getpid>

08009254 <__swhatbuf_r>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	460c      	mov	r4, r1
 8009258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925c:	2900      	cmp	r1, #0
 800925e:	b096      	sub	sp, #88	; 0x58
 8009260:	4615      	mov	r5, r2
 8009262:	461e      	mov	r6, r3
 8009264:	da0d      	bge.n	8009282 <__swhatbuf_r+0x2e>
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	f013 0f80 	tst.w	r3, #128	; 0x80
 800926c:	f04f 0100 	mov.w	r1, #0
 8009270:	bf0c      	ite	eq
 8009272:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009276:	2340      	movne	r3, #64	; 0x40
 8009278:	2000      	movs	r0, #0
 800927a:	6031      	str	r1, [r6, #0]
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	b016      	add	sp, #88	; 0x58
 8009280:	bd70      	pop	{r4, r5, r6, pc}
 8009282:	466a      	mov	r2, sp
 8009284:	f000 f848 	bl	8009318 <_fstat_r>
 8009288:	2800      	cmp	r0, #0
 800928a:	dbec      	blt.n	8009266 <__swhatbuf_r+0x12>
 800928c:	9901      	ldr	r1, [sp, #4]
 800928e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009292:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009296:	4259      	negs	r1, r3
 8009298:	4159      	adcs	r1, r3
 800929a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929e:	e7eb      	b.n	8009278 <__swhatbuf_r+0x24>

080092a0 <__smakebuf_r>:
 80092a0:	898b      	ldrh	r3, [r1, #12]
 80092a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092a4:	079d      	lsls	r5, r3, #30
 80092a6:	4606      	mov	r6, r0
 80092a8:	460c      	mov	r4, r1
 80092aa:	d507      	bpl.n	80092bc <__smakebuf_r+0x1c>
 80092ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	6123      	str	r3, [r4, #16]
 80092b4:	2301      	movs	r3, #1
 80092b6:	6163      	str	r3, [r4, #20]
 80092b8:	b002      	add	sp, #8
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	ab01      	add	r3, sp, #4
 80092be:	466a      	mov	r2, sp
 80092c0:	f7ff ffc8 	bl	8009254 <__swhatbuf_r>
 80092c4:	9900      	ldr	r1, [sp, #0]
 80092c6:	4605      	mov	r5, r0
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7fd fb9b 	bl	8006a04 <_malloc_r>
 80092ce:	b948      	cbnz	r0, 80092e4 <__smakebuf_r+0x44>
 80092d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d4:	059a      	lsls	r2, r3, #22
 80092d6:	d4ef      	bmi.n	80092b8 <__smakebuf_r+0x18>
 80092d8:	f023 0303 	bic.w	r3, r3, #3
 80092dc:	f043 0302 	orr.w	r3, r3, #2
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	e7e3      	b.n	80092ac <__smakebuf_r+0xc>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	6020      	str	r0, [r4, #0]
 80092e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	9b00      	ldr	r3, [sp, #0]
 80092f0:	6163      	str	r3, [r4, #20]
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	6120      	str	r0, [r4, #16]
 80092f6:	b15b      	cbz	r3, 8009310 <__smakebuf_r+0x70>
 80092f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fc:	4630      	mov	r0, r6
 80092fe:	f000 f81d 	bl	800933c <_isatty_r>
 8009302:	b128      	cbz	r0, 8009310 <__smakebuf_r+0x70>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	f043 0301 	orr.w	r3, r3, #1
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	431d      	orrs	r5, r3
 8009314:	81a5      	strh	r5, [r4, #12]
 8009316:	e7cf      	b.n	80092b8 <__smakebuf_r+0x18>

08009318 <_fstat_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	; (8009338 <_fstat_r+0x20>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	4611      	mov	r1, r2
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	f7f8 fd3a 	bl	8001d9e <_fstat>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	d102      	bne.n	8009334 <_fstat_r+0x1c>
 800932e:	682b      	ldr	r3, [r5, #0]
 8009330:	b103      	cbz	r3, 8009334 <_fstat_r+0x1c>
 8009332:	6023      	str	r3, [r4, #0]
 8009334:	bd38      	pop	{r3, r4, r5, pc}
 8009336:	bf00      	nop
 8009338:	200004d8 	.word	0x200004d8

0800933c <_isatty_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d06      	ldr	r5, [pc, #24]	; (8009358 <_isatty_r+0x1c>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	f7f8 fd38 	bl	8001dbc <_isatty>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_isatty_r+0x1a>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_isatty_r+0x1a>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	200004d8 	.word	0x200004d8

0800935c <_init>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr

08009368 <_fini>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr
